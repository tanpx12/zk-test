{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1","program":"/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bellman","--edition=2021","/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"crossbeam-channel\"","--cfg","feature=\"default\"","--cfg","feature=\"groth16\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"log\"","--cfg","feature=\"multicore\"","--cfg","feature=\"num_cpus\"","--cfg","feature=\"pairing\"","--cfg","feature=\"rayon\"","-C","metadata=71ee31d5839ca98e","-C","extra-filename=-71ee31d5839ca98e","--out-dir","/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","-L","dependency=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","--extern","bitvec=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libbitvec-98e8be46811e888e.rmeta","--extern","blake2s_simd=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libblake2s_simd-0db964cb1fde5a6d.rmeta","--extern","byteorder=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libbyteorder-7c274f399d426ec2.rmeta","--extern","crossbeam_channel=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libcrossbeam_channel-9a589c25608af9a1.rmeta","--extern","ff=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libff-1b3b21f12c06652e.rmeta","--extern","group=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libgroup-df9534a73a31a3f2.rmeta","--extern","lazy_static=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/liblazy_static-1479f2b7adeaa2b6.rmeta","--extern","log=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/liblog-11fcf639aa746c8b.rmeta","--extern","num_cpus=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libnum_cpus-c4104697c0cdc3d8.rmeta","--extern","pairing=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libpairing-91eb9c00afa79940.rmeta","--extern","rand_core=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/librand_core-1b683ff8d81d8c62.rmeta","--extern","rayon=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/librayon-f18807e81899a52e.rmeta","--extern","subtle=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libsubtle-999679ce737cde54.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libbellman-71ee31d5839ca98e.rmeta"},"prelude":{"crate_id":{"name":"bellman","disambiguator":[3679961478125278285,0]},"crate_root":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src","external_crates":[{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":20,"id":{"name":"ff","disambiguator":[13453528231645199977,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":21,"id":{"name":"subtle","disambiguator":[4693613423320812284,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","num":22,"id":{"name":"bitvec","disambiguator":[15961701678275193747,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":23,"id":{"name":"funty","disambiguator":[15770065805564930555,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":24,"id":{"name":"radium","disambiguator":[7311690213042413157,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":25,"id":{"name":"tap","disambiguator":[15141533886974157350,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":26,"id":{"name":"wyz","disambiguator":[10016541334912243662,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","num":27,"id":{"name":"rand_core","disambiguator":[17350612091855812901,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":28,"id":{"name":"getrandom","disambiguator":[6512853696765046289,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":29,"id":{"name":"cfg_if","disambiguator":[243630855546215384,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":30,"id":{"name":"libc","disambiguator":[17397406625196134390,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","num":31,"id":{"name":"group","disambiguator":[1696724144335025167,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","num":32,"id":{"name":"byteorder","disambiguator":[6392723507105128103,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","num":33,"id":{"name":"blake2s_simd","disambiguator":[3232367421234458027,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","num":34,"id":{"name":"arrayref","disambiguator":[11124165419969974158,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","num":35,"id":{"name":"arrayvec","disambiguator":[3054412177759576754,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","num":36,"id":{"name":"constant_time_eq","disambiguator":[16897989040327280710,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","num":37,"id":{"name":"pairing","disambiguator":[10373739322943018979,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":38,"id":{"name":"rayon","disambiguator":[4884830630999415327,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":39,"id":{"name":"either","disambiguator":[15842163831267764531,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":40,"id":{"name":"rayon_core","disambiguator":[6818526642121938157,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","num":41,"id":{"name":"crossbeam_channel","disambiguator":[14139115527656010711,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":42,"id":{"name":"crossbeam_utils","disambiguator":[9914245721832868346,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":43,"id":{"name":"once_cell","disambiguator":[11284962762212964601,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":44,"id":{"name":"crossbeam_deque","disambiguator":[11002458407483190610,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":45,"id":{"name":"crossbeam_epoch","disambiguator":[17585489231459840181,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":46,"id":{"name":"scopeguard","disambiguator":[13563622309219480755,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":47,"id":{"name":"memoffset","disambiguator":[3019475222698041736,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","num":48,"id":{"name":"num_cpus","disambiguator":[13736947587011463554,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","num":49,"id":{"name":"lazy_static","disambiguator":[10224609335574576683,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","num":50,"id":{"name":"log","disambiguator":[9828622438498825495,0]}}],"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":0,"byte_end":19871,"line_start":1,"line_end":597,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211264,"byte_end":211265,"line_start":22,"line_end":22,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":891}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211289,"byte_end":211290,"line_start":23,"line_end":23,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":891}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211316,"byte_end":211317,"line_start":24,"line_end":24,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":891}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":273070,"byte_end":273071,"line_start":215,"line_end":215,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"Waiter, Worker","parent":{"krate":0,"index":1406}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":0,"byte_end":19871,"line_start":1,"line_end":597,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":113},{"krate":0,"index":891},{"krate":0,"index":1406},{"krate":0,"index":1458},{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1601},{"krate":0,"index":1604},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1614},{"krate":0,"index":1617},{"krate":0,"index":1871},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1877},{"krate":0,"index":1621},{"krate":0,"index":1879},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1899},{"krate":0,"index":1624},{"krate":0,"index":1627},{"krate":0,"index":1630},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1642},{"krate":0,"index":1646},{"krate":0,"index":1651},{"krate":0,"index":1656},{"krate":0,"index":1661},{"krate":0,"index":1902},{"krate":0,"index":1918},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1920},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1700},{"krate":0,"index":1707},{"krate":0,"index":1732},{"krate":0,"index":1737}],"decl_id":null,"docs":" `bellman` is a crate for building zk-SNARK circuits. It provides circuit\n traits and and primitive structures, as well as basic gadget implementations\n such as booleans and number abstractions.","sig":null,"attributes":[{"value":"/ `bellman` is a crate for building zk-SNARK circuits. It provides circuit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ traits and and primitive structures, as well as basic gadget implementations","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":77,"byte_end":157,"line_start":2,"line_end":2,"column_start":1,"column_end":81}},{"value":"/ such as booleans and number abstractions.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":158,"byte_end":203,"line_start":3,"line_end":3,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":204,"byte_end":207,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Example circuit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":208,"byte_end":229,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":230,"byte_end":233,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Say we want to write a circuit that proves we know the preimage to some hash","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":234,"byte_end":314,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ computed using SHA-256d (calling SHA-256 twice). The preimage must have a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":315,"byte_end":392,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ fixed length known in advance (because the circuit parameters will depend on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":393,"byte_end":473,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ it), but can otherwise have any value. We take the following strategy:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":474,"byte_end":548,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":549,"byte_end":552,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ - Witness each bit of the preimage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":553,"byte_end":592,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ - Compute `hash = SHA-256d(preimage)` inside the circuit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":593,"byte_end":654,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/ - Expose `hash` as a public input using multiscalar packing.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":655,"byte_end":719,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":720,"byte_end":723,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":724,"byte_end":731,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use bellman::{","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":732,"byte_end":750,"line_start":17,"line_end":17,"column_start":1,"column_end":19}},{"value":"/     gadgets::{","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":751,"byte_end":769,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/         boolean::{AllocatedBit, Boolean},","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":770,"byte_end":815,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/         multipack,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":816,"byte_end":838,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"/         sha256::sha256,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":839,"byte_end":866,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/     },","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":867,"byte_end":877,"line_start":22,"line_end":22,"column_start":1,"column_end":11}},{"value":"/     groth16, Circuit, ConstraintSystem, SynthesisError,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":878,"byte_end":937,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":938,"byte_end":944,"line_start":24,"line_end":24,"column_start":1,"column_end":7}},{"value":"/ use bls12_381::Bls12;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":945,"byte_end":970,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"/ use ff::PrimeField;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":971,"byte_end":994,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ use pairing::Engine;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":995,"byte_end":1019,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1020,"byte_end":1046,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/ use sha2::{Digest, Sha256};","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1047,"byte_end":1078,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1079,"byte_end":1082,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ /// Our own SHA-256d gadget. Input and output are in little-endian bit order.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1083,"byte_end":1164,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/ fn sha256d<Scalar: PrimeField, CS: ConstraintSystem<Scalar>>(","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1165,"byte_end":1230,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/     mut cs: CS,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1231,"byte_end":1250,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/     data: &[Boolean],","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1251,"byte_end":1276,"line_start":34,"line_end":34,"column_start":1,"column_end":26}},{"value":"/ ) -> Result<Vec<Boolean>, SynthesisError> {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1277,"byte_end":1324,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/     // Flip endianness of each input byte","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1325,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":46}},{"value":"/     let input: Vec<_> = data","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1371,"byte_end":1403,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .chunks(8)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1404,"byte_end":1426,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/         .map(|c| c.iter().rev())","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1427,"byte_end":1463,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"/         .flatten()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1464,"byte_end":1486,"line_start":40,"line_end":40,"column_start":1,"column_end":23}},{"value":"/         .cloned()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1487,"byte_end":1508,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/         .collect();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1509,"byte_end":1532,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1533,"byte_end":1536,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/     let mid = sha256(cs.namespace(|| \"SHA-256(input)\"), &input)?;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1537,"byte_end":1606,"line_start":44,"line_end":44,"column_start":1,"column_end":70}},{"value":"/     let res = sha256(cs.namespace(|| \"SHA-256(mid)\"), &mid)?;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1607,"byte_end":1672,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1673,"byte_end":1676,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     // Flip endianness of each output byte","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1677,"byte_end":1723,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/     Ok(res","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1724,"byte_end":1738,"line_start":48,"line_end":48,"column_start":1,"column_end":15}},{"value":"/         .chunks(8)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1739,"byte_end":1761,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/         .map(|c| c.iter().rev())","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1762,"byte_end":1798,"line_start":50,"line_end":50,"column_start":1,"column_end":37}},{"value":"/         .flatten()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1799,"byte_end":1821,"line_start":51,"line_end":51,"column_start":1,"column_end":23}},{"value":"/         .cloned()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1822,"byte_end":1843,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/         .collect())","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1844,"byte_end":1867,"line_start":53,"line_end":53,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1868,"byte_end":1873,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1874,"byte_end":1877,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ struct MyCircuit {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1878,"byte_end":1900,"line_start":56,"line_end":56,"column_start":1,"column_end":23}},{"value":"/     /// The input to SHA-256d we are proving that we know. Set to `None` when we","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1901,"byte_end":1985,"line_start":57,"line_end":57,"column_start":1,"column_end":85}},{"value":"/     /// are verifying a proof (and do not have the witness data).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":1986,"byte_end":2055,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/     preimage: Option<[u8; 80]>,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2056,"byte_end":2091,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2092,"byte_end":2097,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2098,"byte_end":2101,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ impl<Scalar: PrimeField> Circuit<Scalar> for MyCircuit {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2102,"byte_end":2162,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/     fn synthesize<CS: ConstraintSystem<Scalar>>(self, cs: &mut CS) -> Result<(), SynthesisError> {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2163,"byte_end":2265,"line_start":63,"line_end":63,"column_start":1,"column_end":103}},{"value":"/         // Compute the values for the bits of the preimage. If we are verifying a proof,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2266,"byte_end":2358,"line_start":64,"line_end":64,"column_start":1,"column_end":93}},{"value":"/         // we still need to create the same constraints, so we return an equivalent-size","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2359,"byte_end":2451,"line_start":65,"line_end":65,"column_start":1,"column_end":93}},{"value":"/         // Vec of None (indicating that the value of each bit is unknown).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2452,"byte_end":2530,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/         let bit_values = if let Some(preimage) = self.preimage {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2531,"byte_end":2599,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"/             preimage","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2600,"byte_end":2624,"line_start":68,"line_end":68,"column_start":1,"column_end":25}},{"value":"/                 .into_iter()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2625,"byte_end":2657,"line_start":69,"line_end":69,"column_start":1,"column_end":33}},{"value":"/                 .map(|byte| (0..8).map(move |i| (byte >> i) & 1u8 == 1u8))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2658,"byte_end":2736,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/                 .flatten()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2737,"byte_end":2767,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/                 .map(|b| Some(b))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2768,"byte_end":2805,"line_start":72,"line_end":72,"column_start":1,"column_end":38}},{"value":"/                 .collect()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2806,"byte_end":2836,"line_start":73,"line_end":73,"column_start":1,"column_end":31}},{"value":"/         } else {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2837,"byte_end":2857,"line_start":74,"line_end":74,"column_start":1,"column_end":21}},{"value":"/             vec![None; 80 * 8]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2858,"byte_end":2892,"line_start":75,"line_end":75,"column_start":1,"column_end":35}},{"value":"/         };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2893,"byte_end":2907,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/         assert_eq!(bit_values.len(), 80 * 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2908,"byte_end":2957,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2958,"byte_end":2961,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         // Witness the bits of the preimage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":2962,"byte_end":3010,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/         let preimage_bits = bit_values","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3011,"byte_end":3053,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/             .into_iter()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3054,"byte_end":3082,"line_start":81,"line_end":81,"column_start":1,"column_end":29}},{"value":"/             .enumerate()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3083,"byte_end":3111,"line_start":82,"line_end":82,"column_start":1,"column_end":29}},{"value":"/             // Allocate each bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3112,"byte_end":3149,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/             .map(|(i, b)| {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3150,"byte_end":3181,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/                 AllocatedBit::alloc(cs.namespace(|| format!(\"preimage bit {}\", i)), b)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3182,"byte_end":3272,"line_start":85,"line_end":85,"column_start":1,"column_end":91}},{"value":"/             })","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3273,"byte_end":3291,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"/             // Convert the AllocatedBits into Booleans (required for the sha256 gadget).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3292,"byte_end":3384,"line_start":87,"line_end":87,"column_start":1,"column_end":93}},{"value":"/             .map(|b| b.map(Boolean::from))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3385,"byte_end":3431,"line_start":88,"line_end":88,"column_start":1,"column_end":47}},{"value":"/             .collect::<Result<Vec<_>, _>>()?;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3432,"byte_end":3481,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3482,"byte_end":3485,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/         // Compute hash = SHA-256d(preimage).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3486,"byte_end":3535,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/         let hash = sha256d(cs.namespace(|| \"SHA-256d(preimage)\"), &preimage_bits)?;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3536,"byte_end":3623,"line_start":92,"line_end":92,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3624,"byte_end":3627,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/         // Expose the vector of 32 boolean variables as compact public inputs.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3628,"byte_end":3710,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/         multipack::pack_into_inputs(cs.namespace(|| \"pack hash\"), &hash)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3711,"byte_end":3787,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3788,"byte_end":3797,"line_start":96,"line_end":96,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3798,"byte_end":3803,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3804,"byte_end":3807,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Create parameters for our circuit. In a production deployment these would","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3808,"byte_end":3888,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ // be generated securely using a multiparty computation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3889,"byte_end":3949,"line_start":100,"line_end":100,"column_start":1,"column_end":61}},{"value":"/ let params = {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3950,"byte_end":3968,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/     let c = MyCircuit { preimage: None };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":3969,"byte_end":4014,"line_start":102,"line_end":102,"column_start":1,"column_end":46}},{"value":"/     groth16::generate_random_parameters::<Bls12, _, _>(c, &mut OsRng).unwrap()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4015,"byte_end":4097,"line_start":103,"line_end":103,"column_start":1,"column_end":83}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4098,"byte_end":4104,"line_start":104,"line_end":104,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4105,"byte_end":4108,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ // Prepare the verification key (for proof verification).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4109,"byte_end":4170,"line_start":106,"line_end":106,"column_start":1,"column_end":62}},{"value":"/ let pvk = groth16::prepare_verifying_key(&params.vk);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4171,"byte_end":4228,"line_start":107,"line_end":107,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4229,"byte_end":4232,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ // Pick a preimage and compute its hash.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4233,"byte_end":4277,"line_start":109,"line_end":109,"column_start":1,"column_end":45}},{"value":"/ let preimage = [42; 80];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4278,"byte_end":4306,"line_start":110,"line_end":110,"column_start":1,"column_end":29}},{"value":"/ let hash = Sha256::digest(&Sha256::digest(&preimage));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4307,"byte_end":4365,"line_start":111,"line_end":111,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4366,"byte_end":4369,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ // Create an instance of our circuit (with the preimage as a witness).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4370,"byte_end":4444,"line_start":113,"line_end":113,"column_start":1,"column_end":75}},{"value":"/ let c = MyCircuit {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4445,"byte_end":4468,"line_start":114,"line_end":114,"column_start":1,"column_end":24}},{"value":"/     preimage: Some(preimage),","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4469,"byte_end":4502,"line_start":115,"line_end":115,"column_start":1,"column_end":34}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4503,"byte_end":4509,"line_start":116,"line_end":116,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4510,"byte_end":4513,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // Create a Groth16 proof with our parameters.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4514,"byte_end":4564,"line_start":118,"line_end":118,"column_start":1,"column_end":51}},{"value":"/ let proof = groth16::create_random_proof(c, &params, &mut OsRng).unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4565,"byte_end":4643,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4644,"byte_end":4647,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // Pack the hash as inputs for proof verification.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4648,"byte_end":4702,"line_start":121,"line_end":121,"column_start":1,"column_end":55}},{"value":"/ let hash_bits = multipack::bytes_to_bits_le(&hash);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4703,"byte_end":4758,"line_start":122,"line_end":122,"column_start":1,"column_end":56}},{"value":"/ let inputs = multipack::compute_multipacking(&hash_bits);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4759,"byte_end":4820,"line_start":123,"line_end":123,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4821,"byte_end":4824,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ // Check the proof!","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4825,"byte_end":4848,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ assert!(groth16::verify_proof(&pvk, &proof, &inputs).is_ok());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4849,"byte_end":4915,"line_start":126,"line_end":126,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4916,"byte_end":4923,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # Roadmap","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4928,"byte_end":4941,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4942,"byte_end":4945,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ `bellman` is being refactored into a generic proving library. Currently it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":4946,"byte_end":5024,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ is pairing-specific, and different types of proving systems need to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5025,"byte_end":5099,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ implemented as sub-modules. After the refactor, `bellman` will be generic","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5100,"byte_end":5177,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ using the [`ff`] and [`group`] crates, while specific proving systems will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5178,"byte_end":5256,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ be separate crates that pull in the dependencies they require.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5257,"byte_end":5323,"line_start":135,"line_end":135,"column_start":1,"column_end":67}},{"value":"deny(rustdoc :: broken_intra_doc_links)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5379,"byte_end":5420,"line_start":138,"line_end":138,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":25},{"krate":0,"index":29},{"krate":0,"index":33},{"krate":0,"index":57},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":106}],"decl_id":null,"docs":" This module contains an [`EvaluationDomain`] abstraction for performing\n various kinds of polynomial arithmetic on top of the scalar field.","sig":null,"attributes":[{"value":"/ This module contains an [`EvaluationDomain`] abstraction for performing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":19873,"byte_end":19948,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ various kinds of polynomial arithmetic on top of the scalar field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":19949,"byte_end":20019,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20020,"byte_end":20023,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ In pairing-based SNARKs like [Groth16], we need to calculate a quotient","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20024,"byte_end":20099,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ polynomial over a target polynomial with roots at distinct points associated","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20100,"byte_end":20180,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/ with each constraint of the constraint system. In order to be efficient, we","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20181,"byte_end":20260,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ choose these roots to be the powers of a 2<sup>n</sup> root of unity in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20261,"byte_end":20340,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ field. This allows us to perform polynomial operations in O(n) by performing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20341,"byte_end":20421,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/ an O(n log n) FFT over such a domain.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20422,"byte_end":20463,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20464,"byte_end":20467,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`EvaluationDomain`]: crate::domain::EvaluationDomain","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20468,"byte_end":20525,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/ [Groth16]: https://eprint.iacr.org/2016/260","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20526,"byte_end":20573,"line_start":12,"line_end":12,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":16},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20702,"byte_end":20718,"line_start":21,"line_end":21,"column_start":12,"column_end":28},"name":"EvaluationDomain","qualname":"::domain::EvaluationDomain","value":"EvaluationDomain {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21194,"byte_end":21205,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"name":"into_coeffs","qualname":"<EvaluationDomain<S, G>>::into_coeffs","value":"pub fn into_coeffs(Self) -> Vec<G>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21262,"byte_end":21273,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"from_coeffs","qualname":"<EvaluationDomain<S, G>>::from_coeffs","value":"pub fn from_coeffs(Vec<G>) -> Result<EvaluationDomain<S, G>, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":22344,"byte_end":22347,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"fft","qualname":"<EvaluationDomain<S, G>>::fft","value":"pub fn fft(&mut Self, &Worker)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":22463,"byte_end":22467,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"ifft","qualname":"<EvaluationDomain<S, G>>::ifft","value":"pub fn ifft(&mut Self, &Worker)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":22928,"byte_end":22945,"line_start":101,"line_end":101,"column_start":12,"column_end":29},"name":"distribute_powers","qualname":"<EvaluationDomain<S, G>>::distribute_powers","value":"pub fn distribute_powers(&mut Self, &Worker, S)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":23443,"byte_end":23452,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"coset_fft","qualname":"<EvaluationDomain<S, G>>::coset_fft","value":"pub fn coset_fft(&mut Self, &Worker)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":23598,"byte_end":23608,"line_start":120,"line_end":120,"column_start":12,"column_end":22},"name":"icoset_fft","qualname":"<EvaluationDomain<S, G>>::icoset_fft","value":"pub fn icoset_fft(&mut Self, &Worker)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":23868,"byte_end":23869,"line_start":129,"line_end":129,"column_start":12,"column_end":13},"name":"z","qualname":"<EvaluationDomain<S, G>>::z","value":"pub fn z(&Self, &S) -> S","parent":null,"children":[],"decl_id":null,"docs":" This evaluates t(tau) for this domain, which is\n tau^m - 1 for these radix-2 domains.\n","sig":null,"attributes":[{"value":"/ This evaluates t(tau) for this domain, which is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":23760,"byte_end":23811,"line_start":127,"line_end":127,"column_start":5,"column_end":56}},{"value":"/ tau^m - 1 for these radix-2 domains.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":23816,"byte_end":23856,"line_start":128,"line_end":128,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24164,"byte_end":24184,"line_start":139,"line_end":139,"column_start":12,"column_end":32},"name":"divide_by_z_on_coset","qualname":"<EvaluationDomain<S, G>>::divide_by_z_on_coset","value":"pub fn divide_by_z_on_coset(&mut Self, &Worker)","parent":null,"children":[],"decl_id":null,"docs":" The target polynomial is the zero polynomial in our\n evaluation domain, so we must perform division over\n a coset.\n","sig":null,"attributes":[{"value":"/ The target polynomial is the zero polynomial in our","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24020,"byte_end":24075,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/ evaluation domain, so we must perform division over","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24080,"byte_end":24135,"line_start":137,"line_end":137,"column_start":5,"column_end":60}},{"value":"/ a coset.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24140,"byte_end":24152,"line_start":138,"line_end":138,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24681,"byte_end":24691,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"mul_assign","qualname":"<EvaluationDomain<S, G>>::mul_assign","value":"pub fn mul_assign(&mut Self, &Worker, &EvaluationDomain<S, Scalar<S>>)","parent":null,"children":[],"decl_id":null,"docs":" Perform O(n) multiplication of two polynomials in the domain.\n","sig":null,"attributes":[{"value":"/ Perform O(n) multiplication of two polynomials in the domain.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":24604,"byte_end":24669,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25354,"byte_end":25364,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"sub_assign","qualname":"<EvaluationDomain<S, G>>::sub_assign","value":"pub fn sub_assign(&mut Self, &Worker, &EvaluationDomain<S, G>)","parent":null,"children":[],"decl_id":null,"docs":" Perform O(n) subtraction of one polynomial from another in the domain.\n","sig":null,"attributes":[{"value":"/ Perform O(n) subtraction of one polynomial from another in the domain.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25268,"byte_end":25342,"line_start":172,"line_end":172,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":57},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25938,"byte_end":25943,"line_start":192,"line_end":192,"column_start":11,"column_end":16},"name":"Group","qualname":"::domain::Group","value":"Group<Scalar: PrimeField>: Sized + Copy + Clone + Send + Sync","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26009,"byte_end":26019,"line_start":193,"line_end":193,"column_start":8,"column_end":18},"name":"group_zero","qualname":"::domain::Group::group_zero","value":"pub fn group_zero() -> Self","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26038,"byte_end":26054,"line_start":194,"line_end":194,"column_start":8,"column_end":24},"name":"group_mul_assign","qualname":"::domain::Group::group_mul_assign","value":"pub fn group_mul_assign(&mut Self, &Scalar)","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26087,"byte_end":26103,"line_start":195,"line_end":195,"column_start":8,"column_end":24},"name":"group_add_assign","qualname":"::domain::Group::group_add_assign","value":"pub fn group_add_assign(&mut Self, &Self)","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26137,"byte_end":26153,"line_start":196,"line_end":196,"column_start":8,"column_end":24},"name":"group_sub_assign","qualname":"::domain::Group::group_sub_assign","value":"pub fn group_sub_assign(&mut Self, &Self)","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":63},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26194,"byte_end":26199,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"Point","qualname":"::domain::Point","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":66},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26218,"byte_end":26223,"line_start":199,"line_end":199,"column_start":36,"column_end":41},"name":"0","qualname":"::domain::Point::0","value":"G","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26913,"byte_end":26919,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"Scalar","qualname":"::domain::Scalar","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":84},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26935,"byte_end":26940,"line_start":230,"line_end":230,"column_start":34,"column_end":39},"name":"0","qualname":"::domain::Scalar::0","value":"S","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gadgets","qualname":"::gadgets","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":227},{"krate":0,"index":299},{"krate":0,"index":451},{"krate":0,"index":507},{"krate":0,"index":570},{"krate":0,"index":607},{"krate":0,"index":738},{"krate":0,"index":813},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888}],"decl_id":null,"docs":" Self-contained sub-circuit implementations for various primitives.\n","sig":null,"attributes":[{"value":"/ Self-contained sub-circuit implementations for various primitives.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34659,"byte_end":34729,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test","qualname":"::gadgets::test","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":1762},{"krate":0,"index":1771},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":1773},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":203},{"krate":0,"index":205}],"decl_id":null,"docs":" Helpers for testing circuit implementations.\n","sig":null,"attributes":[{"value":"/ Helpers for testing circuit implementations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":35456,"byte_end":35504,"line_start":1,"line_end":1,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36122,"byte_end":36142,"line_start":31,"line_end":31,"column_start":12,"column_end":32},"name":"TestConstraintSystem","qualname":"::gadgets::test::TestConstraintSystem","value":"TestConstraintSystem {  }","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" Constraint system for testing purposes.\n","sig":null,"attributes":[{"value":"/ Constraint system for testing purposes.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36067,"byte_end":36110,"line_start":30,"line_end":30,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39543,"byte_end":39546,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<TestConstraintSystem<Scalar>>::new","value":"pub fn new() -> TestConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39993,"byte_end":40005,"line_start":163,"line_end":163,"column_start":12,"column_end":24},"name":"pretty_print","qualname":"<TestConstraintSystem<Scalar>>::pretty_print","value":"pub fn pretty_print(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":42004,"byte_end":42008,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"hash","qualname":"<TestConstraintSystem<Scalar>>::hash","value":"pub fn hash(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":42815,"byte_end":42835,"line_start":251,"line_end":251,"column_start":12,"column_end":32},"name":"which_is_unsatisfied","qualname":"<TestConstraintSystem<Scalar>>::which_is_unsatisfied","value":"pub fn which_is_unsatisfied(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":43310,"byte_end":43322,"line_start":267,"line_end":267,"column_start":12,"column_end":24},"name":"is_satisfied","qualname":"<TestConstraintSystem<Scalar>>::is_satisfied","value":"pub fn is_satisfied(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":43404,"byte_end":43419,"line_start":271,"line_end":271,"column_start":12,"column_end":27},"name":"num_constraints","qualname":"<TestConstraintSystem<Scalar>>::num_constraints","value":"pub fn num_constraints(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":43487,"byte_end":43490,"line_start":275,"line_end":275,"column_start":12,"column_end":15},"name":"set","qualname":"<TestConstraintSystem<Scalar>>::set","value":"pub fn set(&mut Self, &str, Scalar)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":44035,"byte_end":44041,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"verify","qualname":"<TestConstraintSystem<Scalar>>::verify","value":"pub fn verify(&Self, &[Scalar]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":44325,"byte_end":44335,"line_start":301,"line_end":301,"column_start":12,"column_end":22},"name":"num_inputs","qualname":"<TestConstraintSystem<Scalar>>::num_inputs","value":"pub fn num_inputs(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":44398,"byte_end":44407,"line_start":305,"line_end":305,"column_start":12,"column_end":21},"name":"get_input","qualname":"<TestConstraintSystem<Scalar>>::get_input","value":"pub fn get_input(&mut Self, usize, &str) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":44589,"byte_end":44592,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"get","qualname":"<TestConstraintSystem<Scalar>>::get","value":"pub fn get(&mut Self, &str) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":227},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blake2s","qualname":"::gadgets::blake2s","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":267},{"krate":0,"index":285}],"decl_id":null,"docs":" The [BLAKE2s] hash function with personalization support.","sig":null,"attributes":[{"value":"/ The [BLAKE2s] hash function with personalization support.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","byte_start":49436,"byte_end":49497,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","byte_start":49498,"byte_end":49501,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [BLAKE2s]: https://tools.ietf.org/html/rfc7693","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","byte_start":49502,"byte_end":49552,"line_start":3,"line_end":3,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/blake2s.rs","byte_start":60391,"byte_end":60398,"line_start":315,"line_end":315,"column_start":8,"column_end":15},"name":"blake2s","qualname":"::gadgets::blake2s::blake2s","value":"pub fn blake2s<Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>>(CS, &[Boolean], &[u8])\n-> Result<Vec<Boolean>, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":299},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boolean","qualname":"::gadgets::boolean","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":1779},{"krate":0,"index":1782},{"krate":0,"index":323},{"krate":0,"index":380},{"krate":0,"index":385},{"krate":0,"index":389},{"krate":0,"index":1784},{"krate":0,"index":1794},{"krate":0,"index":395},{"krate":0,"index":449}],"decl_id":null,"docs":" Gadgets for allocating bits in the circuit and performing boolean logic.\n","sig":null,"attributes":[{"value":"/ Gadgets for allocating bits in the circuit and performing boolean logic.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":73802,"byte_end":73878,"line_start":1,"line_end":1,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74149,"byte_end":74161,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"AllocatedBit","qualname":"::gadgets::boolean::AllocatedBit","value":"AllocatedBit {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781}],"decl_id":null,"docs":" Represents a variable in the constraint system which is guaranteed\n to be either zero or one.\n","sig":null,"attributes":[{"value":"/ Represents a variable in the constraint system which is guaranteed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74020,"byte_end":74090,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ to be either zero or one.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74091,"byte_end":74120,"line_start":10,"line_end":10,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74247,"byte_end":74256,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"name":"get_value","qualname":"<AllocatedBit>::get_value","value":"pub fn get_value(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74319,"byte_end":74331,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"get_variable","qualname":"<AllocatedBit>::get_variable","value":"pub fn get_variable(&Self) -> Variable","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74573,"byte_end":74592,"line_start":29,"line_end":29,"column_start":12,"column_end":31},"name":"alloc_conditionally","qualname":"<AllocatedBit>::alloc_conditionally","value":"pub fn alloc_conditionally<Scalar, CS>(CS, Option<bool>, &AllocatedBit)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Allocate a variable in the constraint system which can only be a\n boolean value. Further, constrain that the boolean is false\n unless the condition is false.\n","sig":null,"attributes":[{"value":"/ Allocate a variable in the constraint system which can only be a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74386,"byte_end":74454,"line_start":26,"line_end":26,"column_start":5,"column_end":73}},{"value":"/ boolean value. Further, constrain that the boolean is false","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74459,"byte_end":74522,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/ unless the condition is false.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74527,"byte_end":74561,"line_start":28,"line_end":28,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":75748,"byte_end":75753,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"alloc","qualname":"<AllocatedBit>::alloc","value":"pub fn alloc<Scalar, CS>(CS, Option<bool>) -> Result<Self, SynthesisError>\nwhere Scalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Allocate a variable in the constraint system which can only be a\n boolean value.\n","sig":null,"attributes":[{"value":"/ Allocate a variable in the constraint system which can only be a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":75645,"byte_end":75713,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/ boolean value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":75718,"byte_end":75736,"line_start":69,"line_end":69,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":76606,"byte_end":76609,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"xor","qualname":"<AllocatedBit>::xor","value":"pub fn xor<Scalar, CS>(CS, &Self, &Self) -> Result<Self, SynthesisError> where\nScalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Performs an XOR operation over the two operands, returning\n an `AllocatedBit`.\n","sig":null,"attributes":[{"value":"/ Performs an XOR operation over the two operands, returning","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":76505,"byte_end":76567,"line_start":101,"line_end":101,"column_start":5,"column_end":67}},{"value":"/ an `AllocatedBit`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":76572,"byte_end":76594,"line_start":102,"line_end":102,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":78265,"byte_end":78268,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"name":"and","qualname":"<AllocatedBit>::and","value":"pub fn and<Scalar, CS>(CS, &Self, &Self) -> Result<Self, SynthesisError> where\nScalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Performs an AND operation over the two operands, returning\n an `AllocatedBit`.\n","sig":null,"attributes":[{"value":"/ Performs an AND operation over the two operands, returning","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":78164,"byte_end":78226,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ an `AllocatedBit`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":78231,"byte_end":78253,"line_start":154,"line_end":154,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":79260,"byte_end":79267,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"and_not","qualname":"<AllocatedBit>::and_not","value":"pub fn and_not<Scalar, CS>(CS, &Self, &Self) -> Result<Self, SynthesisError>\nwhere Scalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Calculates `a AND (NOT b)`.\n","sig":null,"attributes":[{"value":"/ Calculates `a AND (NOT b)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":79217,"byte_end":79248,"line_start":192,"line_end":192,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":80318,"byte_end":80321,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"nor","qualname":"<AllocatedBit>::nor","value":"pub fn nor<Scalar, CS>(CS, &Self, &Self) -> Result<Self, SynthesisError> where\nScalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Calculates `(NOT a) AND (NOT b)`.\n","sig":null,"attributes":[{"value":"/ Calculates `(NOT a) AND (NOT b)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":80269,"byte_end":80306,"line_start":230,"line_end":230,"column_start":5,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":380},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":81335,"byte_end":81358,"line_start":269,"line_end":269,"column_start":8,"column_end":31},"name":"u64_into_boolean_vec_le","qualname":"::gadgets::boolean::u64_into_boolean_vec_le","value":"pub fn u64_into_boolean_vec_le<Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>>(CS, Option<u64>)\n-> Result<Vec<Boolean>, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":385},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":82088,"byte_end":82113,"line_start":300,"line_end":300,"column_start":8,"column_end":33},"name":"field_into_boolean_vec_le","qualname":"::gadgets::boolean::field_into_boolean_vec_le","value":"pub fn field_into_boolean_vec_le<Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>, F: PrimeFieldBits>(CS, Option<F>)\n-> Result<Vec<Boolean>, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":82410,"byte_end":82438,"line_start":313,"line_end":313,"column_start":8,"column_end":36},"name":"field_into_allocated_bits_le","qualname":"::gadgets::boolean::field_into_allocated_bits_le","value":"pub fn field_into_allocated_bits_le<Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>, F: PrimeFieldBits>(CS, Option<F>)\n-> Result<Vec<AllocatedBit>, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1785},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83841,"byte_end":83843,"line_start":363,"line_end":363,"column_start":5,"column_end":7},"name":"Is","qualname":"::gadgets::boolean::Boolean::Is","value":"Boolean::Is(AllocatedBit)","parent":{"krate":0,"index":1784},"children":[],"decl_id":null,"docs":" Existential view of the boolean variable\n","sig":null,"attributes":[{"value":"/ Existential view of the boolean variable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83792,"byte_end":83836,"line_start":362,"line_end":362,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83908,"byte_end":83911,"line_start":365,"line_end":365,"column_start":5,"column_end":8},"name":"Not","qualname":"::gadgets::boolean::Boolean::Not","value":"Boolean::Not(AllocatedBit)","parent":{"krate":0,"index":1784},"children":[],"decl_id":null,"docs":" Negated view of the boolean variable\n","sig":null,"attributes":[{"value":"/ Negated view of the boolean variable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83863,"byte_end":83903,"line_start":364,"line_end":364,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1791},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83976,"byte_end":83984,"line_start":367,"line_end":367,"column_start":5,"column_end":13},"name":"Constant","qualname":"::gadgets::boolean::Boolean::Constant","value":"Boolean::Constant(bool)","parent":{"krate":0,"index":1784},"children":[],"decl_id":null,"docs":" Constant (not an allocated variable)\n","sig":null,"attributes":[{"value":"/ Constant (not an allocated variable)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83931,"byte_end":83971,"line_start":366,"line_end":366,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":1784},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83778,"byte_end":83785,"line_start":361,"line_end":361,"column_start":10,"column_end":17},"name":"Boolean","qualname":"::gadgets::boolean::Boolean","value":"pub enum Boolean { Is(AllocatedBit), Not(AllocatedBit), Constant(bool), }","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791}],"decl_id":null,"docs":" This is a boolean value which may be either a constant or\n an interpretation of an `AllocatedBit`.\n","sig":null,"attributes":[{"value":"/ This is a boolean value which may be either a constant or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83646,"byte_end":83707,"line_start":358,"line_end":358,"column_start":1,"column_end":62}},{"value":"/ an interpretation of an `AllocatedBit`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":83708,"byte_end":83751,"line_start":359,"line_end":359,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":84021,"byte_end":84032,"line_start":371,"line_end":371,"column_start":12,"column_end":23},"name":"is_constant","qualname":"<Boolean>::is_constant","value":"pub fn is_constant(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":84114,"byte_end":84127,"line_start":375,"line_end":375,"column_start":12,"column_end":25},"name":"enforce_equal","qualname":"<Boolean>::enforce_equal","value":"pub fn enforce_equal<Scalar, CS>(CS, &Self, &Self)\n-> Result<(), SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":85535,"byte_end":85544,"line_start":421,"line_end":421,"column_start":12,"column_end":21},"name":"get_value","qualname":"<Boolean>::get_value","value":"pub fn get_value(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":85776,"byte_end":85778,"line_start":429,"line_end":429,"column_start":12,"column_end":14},"name":"lc","qualname":"<Boolean>::lc","value":"pub fn lc<Scalar: PrimeField>(&Self, Variable, Scalar)\n-> LinearCombination<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86488,"byte_end":86496,"line_start":450,"line_end":450,"column_start":12,"column_end":20},"name":"constant","qualname":"<Boolean>::constant","value":"pub fn constant(bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a boolean from a known constant\n","sig":null,"attributes":[{"value":"/ Construct a boolean from a known constant","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86431,"byte_end":86476,"line_start":449,"line_end":449,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86620,"byte_end":86623,"line_start":455,"line_end":455,"column_start":12,"column_end":15},"name":"not","qualname":"<Boolean>::not","value":"pub fn not(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a negated interpretation of this boolean.\n","sig":null,"attributes":[{"value":"/ Return a negated interpretation of this boolean.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86556,"byte_end":86608,"line_start":454,"line_end":454,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86914,"byte_end":86917,"line_start":464,"line_end":464,"column_start":12,"column_end":15},"name":"xor","qualname":"<Boolean>::xor","value":"pub fn xor<'a, Scalar, CS>(CS, &'a Self, &'a Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Perform XOR over two boolean operands\n","sig":null,"attributes":[{"value":"/ Perform XOR over two boolean operands","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":86861,"byte_end":86902,"line_start":463,"line_end":463,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":87846,"byte_end":87849,"line_start":486,"line_end":486,"column_start":12,"column_end":15},"name":"and","qualname":"<Boolean>::and","value":"pub fn and<'a, Scalar, CS>(CS, &'a Self, &'a Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Perform AND over two boolean operands\n","sig":null,"attributes":[{"value":"/ Perform AND over two boolean operands","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":87793,"byte_end":87834,"line_start":485,"line_end":485,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":89004,"byte_end":89013,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"sha256_ch","qualname":"<Boolean>::sha256_ch","value":"pub fn sha256_ch<'a, Scalar, CS>(CS, &'a Self, &'a Self, &'a Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Computes (a and b) xor ((not a) and c)\n","sig":null,"attributes":[{"value":"/ Computes (a and b) xor ((not a) and c)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":88950,"byte_end":88992,"line_start":514,"line_end":514,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":92785,"byte_end":92795,"line_start":622,"line_end":622,"column_start":12,"column_end":22},"name":"sha256_maj","qualname":"<Boolean>::sha256_maj","value":"pub fn sha256_maj<'a, Scalar, CS>(CS, &'a Self, &'a Self, &'a Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Computes (a and b) xor (a and c) xor (b and c)\n","sig":null,"attributes":[{"value":"/ Computes (a and b) xor (a and c) xor (b and c)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":92723,"byte_end":92773,"line_start":621,"line_end":621,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":451},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lookup","qualname":"::gadgets::lookup","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":473},{"krate":0,"index":493}],"decl_id":null,"docs":" Window table lookup gadgets.\n","sig":null,"attributes":[{"value":"/ Window table lookup gadgets.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":141080,"byte_end":141112,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":473},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":141921,"byte_end":141931,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"lookup3_xy","qualname":"::gadgets::lookup::lookup3_xy","value":"pub fn lookup3_xy<Scalar: PrimeField, CS>(CS, &[Boolean], &[(Scalar, Scalar)])\n-> Result<(AllocatedNum<Scalar>, AllocatedNum<Scalar>), SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Performs a 3-bit window table lookup. `bits` is in\n little-endian order.\n","sig":null,"attributes":[{"value":"/ Performs a 3-bit window table lookup. `bits` is in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":141834,"byte_end":141888,"line_start":29,"line_end":29,"column_start":1,"column_end":55}},{"value":"/ little-endian order.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":141889,"byte_end":141913,"line_start":30,"line_end":30,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":144841,"byte_end":144877,"line_start":121,"line_end":121,"column_start":8,"column_end":44},"name":"lookup3_xy_with_conditional_negation","qualname":"::gadgets::lookup::lookup3_xy_with_conditional_negation","value":"pub fn lookup3_xy_with_conditional_negation<Scalar: PrimeField,\nCS>(CS, &[Boolean], &[(Scalar, Scalar)])\n-> Result<(Num<Scalar>, Num<Scalar>), SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Performs a 3-bit window table lookup, where\n one of the bits is a sign bit.\n","sig":null,"attributes":[{"value":"/ Performs a 3-bit window table lookup, where","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":144751,"byte_end":144798,"line_start":119,"line_end":119,"column_start":1,"column_end":48}},{"value":"/ one of the bits is a sign bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/lookup.rs","byte_start":144799,"byte_end":144833,"line_start":120,"line_end":120,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":507},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multieq","qualname":"::gadgets::multieq","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":532},{"krate":0,"index":542},{"krate":0,"index":546}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":524},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":151106,"byte_end":151113,"line_start":5,"line_end":5,"column_start":12,"column_end":19},"name":"MultiEq","qualname":"::gadgets::multieq::MultiEq","value":"MultiEq {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":151379,"byte_end":151382,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiEq<Scalar, CS>>::new","value":"pub fn new(CS) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":152032,"byte_end":152045,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"enforce_equal","qualname":"<MultiEq<Scalar, CS>>::enforce_equal","value":"pub fn enforce_equal(&mut Self, usize, &LinearCombination<Scalar>,\n&LinearCombination<Scalar>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":570},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multipack","qualname":"::gadgets::multipack","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605}],"decl_id":null,"docs":" Helpers for packing vectors of bits into scalar field elements.\n","sig":null,"attributes":[{"value":"/ Helpers for packing vectors of bits into scalar field elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":154315,"byte_end":154382,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":154611,"byte_end":154627,"line_start":11,"line_end":11,"column_start":8,"column_end":24},"name":"pack_into_inputs","qualname":"::gadgets::multipack::pack_into_inputs","value":"pub fn pack_into_inputs<Scalar, CS>(CS, &[Boolean])\n-> Result<(), SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Takes a sequence of booleans and exposes them as compact\n public inputs\n","sig":null,"attributes":[{"value":"/ Takes a sequence of booleans and exposes them as compact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":154525,"byte_end":154585,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ public inputs","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":154586,"byte_end":154603,"line_start":10,"line_end":10,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":599},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":155400,"byte_end":155413,"line_start":39,"line_end":39,"column_start":8,"column_end":21},"name":"bytes_to_bits","qualname":"::gadgets::multipack::bytes_to_bits","value":"pub fn bytes_to_bits(&[u8]) -> Vec<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":155567,"byte_end":155583,"line_start":46,"line_end":46,"column_start":8,"column_end":24},"name":"bytes_to_bits_le","qualname":"::gadgets::multipack::bytes_to_bits_le","value":"pub fn bytes_to_bits_le(&[u8]) -> Vec<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multipack.rs","byte_start":155731,"byte_end":155751,"line_start":53,"line_end":53,"column_start":8,"column_end":28},"name":"compute_multipacking","qualname":"::gadgets::multipack::compute_multipacking","value":"pub fn compute_multipacking<Scalar: PrimeField>(&[bool]) -> Vec<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":607},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::gadgets::num","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":732}],"decl_id":null,"docs":" Gadgets representing numbers in the scalar field of the underlying curve.\n","sig":null,"attributes":[{"value":"/ Gadgets representing numbers in the scalar field of the underlying curve.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157296,"byte_end":157373,"line_start":1,"line_end":1,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157578,"byte_end":157590,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"AllocatedNum","qualname":"::gadgets::num::AllocatedNum","value":"AllocatedNum {  }","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157924,"byte_end":157929,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"alloc","qualname":"<AllocatedNum<Scalar>>::alloc","value":"pub fn alloc<CS, F>(CS, F) -> Result<Self, SynthesisError> where\nCS: ConstraintSystem<Scalar>, F: FnOnce() -> Result<Scalar, SynthesisError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":158442,"byte_end":158450,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"inputize","qualname":"<AllocatedNum<Scalar>>::inputize","value":"pub fn inputize<CS>(&Self, CS) -> Result<(), SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":159088,"byte_end":159105,"line_start":70,"line_end":70,"column_start":12,"column_end":29},"name":"to_bits_le_strict","qualname":"<AllocatedNum<Scalar>>::to_bits_le_strict","value":"pub fn to_bits_le_strict<CS>(&Self, CS)\n-> Result<Vec<Boolean>, SynthesisError> where Scalar: PrimeFieldBits,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Deconstructs this allocated number into its\n boolean representation in little-endian bit\n order, requiring that the representation\n strictly exists \"in the field\" (i.e., a\n congruency is not allowed.)\n","sig":null,"attributes":[{"value":"/ Deconstructs this allocated number into its","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":158844,"byte_end":158891,"line_start":65,"line_end":65,"column_start":5,"column_end":52}},{"value":"/ boolean representation in little-endian bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":158896,"byte_end":158943,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ order, requiring that the representation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":158948,"byte_end":158992,"line_start":67,"line_end":67,"column_start":5,"column_end":49}},{"value":"/ strictly exists \"in the field\" (i.e., a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":158997,"byte_end":159040,"line_start":68,"line_end":68,"column_start":5,"column_end":48}},{"value":"/ congruency is not allowed.)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":159045,"byte_end":159076,"line_start":69,"line_end":69,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":163408,"byte_end":163418,"line_start":198,"line_end":198,"column_start":12,"column_end":22},"name":"to_bits_le","qualname":"<AllocatedNum<Scalar>>::to_bits_le","value":"pub fn to_bits_le<CS>(&Self, CS) -> Result<Vec<Boolean>, SynthesisError> where\nScalar: PrimeFieldBits, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Convert the allocated number into its little-endian representation.\n Note that this does not strongly enforce that the commitment is\n \"in the field.\"\n","sig":null,"attributes":[{"value":"/ Convert the allocated number into its little-endian representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":163229,"byte_end":163300,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ Note that this does not strongly enforce that the commitment is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":163305,"byte_end":163372,"line_start":196,"line_end":196,"column_start":5,"column_end":72}},{"value":"/ \"in the field.\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":163377,"byte_end":163396,"line_start":197,"line_end":197,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":164053,"byte_end":164056,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"mul","qualname":"<AllocatedNum<Scalar>>::mul","value":"pub fn mul<CS>(&Self, CS, &Self) -> Result<Self, SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":164789,"byte_end":164795,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"square","qualname":"<AllocatedNum<Scalar>>::square","value":"pub fn square<CS>(&Self, CS) -> Result<Self, SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":165459,"byte_end":165473,"line_start":284,"line_end":284,"column_start":12,"column_end":26},"name":"assert_nonzero","qualname":"<AllocatedNum<Scalar>>::assert_nonzero","value":"pub fn assert_nonzero<CS>(&Self, CS) -> Result<(), SynthesisError> where\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":166389,"byte_end":166410,"line_start":317,"line_end":317,"column_start":12,"column_end":33},"name":"conditionally_reverse","qualname":"<AllocatedNum<Scalar>>::conditionally_reverse","value":"pub fn conditionally_reverse<CS>(CS, &Self, &Self, &Boolean)\n-> Result<(Self, Self), SynthesisError> where CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Takes two allocated numbers (a, b) and returns\n (b, a) if the condition is true, and (a, b)\n otherwise.\n","sig":null,"attributes":[{"value":"/ Takes two allocated numbers (a, b) and returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":166256,"byte_end":166306,"line_start":314,"line_end":314,"column_start":5,"column_end":55}},{"value":"/ (b, a) if the condition is true, and (a, b)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":166311,"byte_end":166358,"line_start":315,"line_end":315,"column_start":5,"column_end":52}},{"value":"/ otherwise.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":166363,"byte_end":166377,"line_start":316,"line_end":316,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":167595,"byte_end":167604,"line_start":359,"line_end":359,"column_start":12,"column_end":21},"name":"get_value","qualname":"<AllocatedNum<Scalar>>::get_value","value":"pub fn get_value(&Self) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":167669,"byte_end":167681,"line_start":363,"line_end":363,"column_start":12,"column_end":24},"name":"get_variable","qualname":"<AllocatedNum<Scalar>>::get_variable","value":"pub fn get_variable(&Self) -> Variable","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":725},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":167745,"byte_end":167748,"line_start":368,"line_end":368,"column_start":12,"column_end":15},"name":"Num","qualname":"::gadgets::num::Num","value":"Num {  }","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168143,"byte_end":168147,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"name":"zero","qualname":"<Num<Scalar>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168286,"byte_end":168295,"line_start":390,"line_end":390,"column_start":12,"column_end":21},"name":"get_value","qualname":"<Num<Scalar>>::get_value","value":"pub fn get_value(&Self) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168360,"byte_end":168362,"line_start":394,"line_end":394,"column_start":12,"column_end":14},"name":"lc","qualname":"<Num<Scalar>>::lc","value":"pub fn lc(&Self, Scalar) -> LinearCombination<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168488,"byte_end":168507,"line_start":398,"line_end":398,"column_start":12,"column_end":31},"name":"add_bool_with_coeff","qualname":"<Num<Scalar>>::add_bool_with_coeff","value":"pub fn add_bool_with_coeff(Self, Variable, &Boolean, Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha256","qualname":"::gadgets::sha256","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":766},{"krate":0,"index":772},{"krate":0,"index":774}],"decl_id":null,"docs":" Circuits for the [SHA-256] hash function and its internal compression\n function.","sig":null,"attributes":[{"value":"/ Circuits for the [SHA-256] hash function and its internal compression","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":174903,"byte_end":174976,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ function.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":174977,"byte_end":174990,"line_start":2,"line_end":2,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":174991,"byte_end":174994,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [SHA-256]: https://tools.ietf.org/html/rfc6234","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":174995,"byte_end":175045,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":176249,"byte_end":176272,"line_start":29,"line_end":29,"column_start":8,"column_end":31},"name":"sha256_block_no_padding","qualname":"::gadgets::sha256::sha256_block_no_padding","value":"pub fn sha256_block_no_padding<Scalar, CS>(CS, &[Boolean])\n-> Result<Vec<Boolean>, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":176656,"byte_end":176662,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"sha256","qualname":"::gadgets::sha256::sha256","value":"pub fn sha256<Scalar, CS>(CS, &[Boolean])\n-> Result<Vec<Boolean>, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":813},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uint32","qualname":"::gadgets::uint32","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":1796},{"krate":0,"index":1799},{"krate":0,"index":837}],"decl_id":null,"docs":" Circuit representation of a [`u32`], with helpers for the [`sha256`]\n gadgets.","sig":null,"attributes":[{"value":"/ Circuit representation of a [`u32`], with helpers for the [`sha256`]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187458,"byte_end":187530,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/ gadgets.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187531,"byte_end":187543,"line_start":2,"line_end":2,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187544,"byte_end":187547,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [`sha256`]: crate::gadgets::sha256","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187548,"byte_end":187586,"line_start":4,"line_end":4,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1796},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187865,"byte_end":187871,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"UInt32","qualname":"::gadgets::uint32::UInt32","value":"UInt32 {  }","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1798}],"decl_id":null,"docs":" Represents an interpretation of 32 `Boolean` objects as an\n unsigned integer.\n","sig":null,"attributes":[{"value":"/ Represents an interpretation of 32 `Boolean` objects as an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187752,"byte_end":187814,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ unsigned integer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187815,"byte_end":187836,"line_start":15,"line_end":15,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":188036,"byte_end":188044,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"constant","qualname":"<UInt32>::constant","value":"pub fn constant(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a constant `UInt32` from a `u32`\n","sig":null,"attributes":[{"value":"/ Construct a constant `UInt32` from a `u32`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187978,"byte_end":188024,"line_start":24,"line_end":24,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":188520,"byte_end":188525,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"alloc","qualname":"<UInt32>::alloc","value":"pub fn alloc<Scalar, CS>(CS, Option<u32>) -> Result<Self, SynthesisError>\nwhere Scalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Allocate a `UInt32` in the constraint system\n","sig":null,"attributes":[{"value":"/ Allocate a `UInt32` in the constraint system","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":188460,"byte_end":188508,"line_start":45,"line_end":45,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":189413,"byte_end":189425,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"into_bits_be","qualname":"<UInt32>::into_bits_be","value":"pub fn into_bits_be(Self) -> Vec<Boolean>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":189536,"byte_end":189548,"line_start":85,"line_end":85,"column_start":12,"column_end":24},"name":"from_bits_be","qualname":"<UInt32>::from_bits_be","value":"pub fn from_bits_be(&[Boolean]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":190289,"byte_end":190298,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"into_bits","qualname":"<UInt32>::into_bits","value":"pub fn into_bits(Self) -> Vec<Boolean>","parent":null,"children":[],"decl_id":null,"docs":" Turns this `UInt32` into its little-endian byte order representation.\n","sig":null,"attributes":[{"value":"/ Turns this `UInt32` into its little-endian byte order representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":190204,"byte_end":190277,"line_start":113,"line_end":113,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":190451,"byte_end":190460,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"from_bits","qualname":"<UInt32>::from_bits","value":"pub fn from_bits(&[Boolean]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a little-endian byte order representation of bits into a\n `UInt32`.\n","sig":null,"attributes":[{"value":"/ Converts a little-endian byte order representation of bits into a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":190352,"byte_end":190421,"line_start":118,"line_end":118,"column_start":5,"column_end":74}},{"value":"/ `UInt32`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":190426,"byte_end":190439,"line_start":119,"line_end":119,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":191776,"byte_end":191780,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"rotr","qualname":"<UInt32>::rotr","value":"pub fn rotr(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":192169,"byte_end":192172,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"shr","qualname":"<UInt32>::shr","value":"pub fn shr(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":193749,"byte_end":193759,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"sha256_maj","qualname":"<UInt32>::sha256_maj","value":"pub fn sha256_maj<Scalar, CS>(CS, &Self, &Self, &Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute the `maj` value (a and b) xor (a and c) xor (b and c)\n during SHA256.\n","sig":null,"attributes":[{"value":"/ Compute the `maj` value (a and b) xor (a and c) xor (b and c)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":193649,"byte_end":193714,"line_start":238,"line_end":238,"column_start":5,"column_end":70}},{"value":"/ during SHA256.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":193719,"byte_end":193737,"line_start":239,"line_end":239,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":194308,"byte_end":194317,"line_start":262,"line_end":262,"column_start":12,"column_end":21},"name":"sha256_ch","qualname":"<UInt32>::sha256_ch","value":"pub fn sha256_ch<Scalar, CS>(CS, &Self, &Self, &Self)\n-> Result<Self, SynthesisError> where Scalar: PrimeField,\nCS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute the `ch` value `(a and b) xor ((not a) and c)`\n during SHA256.\n","sig":null,"attributes":[{"value":"/ Compute the `ch` value `(a and b) xor ((not a) and c)`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":194215,"byte_end":194273,"line_start":260,"line_end":260,"column_start":5,"column_end":63}},{"value":"/ during SHA256.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":194278,"byte_end":194296,"line_start":261,"line_end":261,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":194819,"byte_end":194822,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"xor","qualname":"<UInt32>::xor","value":"pub fn xor<Scalar, CS>(&Self, CS, &Self) -> Result<Self, SynthesisError> where\nScalar: PrimeField, CS: ConstraintSystem<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" XOR this `UInt32` with another `UInt32`\n","sig":null,"attributes":[{"value":"/ XOR this `UInt32` with another `UInt32`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":194764,"byte_end":194807,"line_start":282,"line_end":282,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":195543,"byte_end":195550,"line_start":308,"line_end":308,"column_start":12,"column_end":19},"name":"addmany","qualname":"<UInt32>::addmany","value":"pub fn addmany<Scalar, CS, M>(M, &[Self]) -> Result<Self, SynthesisError>\nwhere Scalar: PrimeField, CS: ConstraintSystem<Scalar>,\nM: ConstraintSystem<Scalar, Root = MultiEq<Scalar, CS>>","parent":null,"children":[],"decl_id":null,"docs":" Perform modular addition of several `UInt32` objects.\n","sig":null,"attributes":[{"value":"/ Perform modular addition of several `UInt32` objects.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":195474,"byte_end":195531,"line_start":307,"line_end":307,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":885},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35165,"byte_end":35175,"line_start":22,"line_end":22,"column_start":11,"column_end":21},"name":"Assignment","qualname":"::gadgets::Assignment","value":"Assignment<T>","parent":null,"children":[{"krate":0,"index":887}],"decl_id":null,"docs":" This basically is just an extension to `Option`\n which allows for a convenient mapping to an\n error on `None`.\n","sig":null,"attributes":[{"value":"/ This basically is just an extension to `Option`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35034,"byte_end":35085,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/ which allows for a convenient mapping to an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35086,"byte_end":35133,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/ error on `None`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35134,"byte_end":35154,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35188,"byte_end":35191,"line_start":23,"line_end":23,"column_start":8,"column_end":11},"name":"get","qualname":"::gadgets::Assignment::get","value":"pub fn get(&Self) -> Result<&T, SynthesisError>","parent":{"krate":0,"index":885},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":891},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"groth16","qualname":"::groth16","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":1076},{"krate":0,"index":1208},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1817},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1828},{"krate":0,"index":1837},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1840},{"krate":0,"index":1848},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1379},{"krate":0,"index":1385},{"krate":0,"index":1395}],"decl_id":null,"docs":" The [Groth16] proving system.","sig":null,"attributes":[{"value":"cfg(feature = \"groth16\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5455,"byte_end":5482,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/ The [Groth16] proving system.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":210793,"byte_end":210826,"line_start":1,"line_end":1,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":210827,"byte_end":210830,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Groth16]: https://eprint.iacr.org/2016/260","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":210831,"byte_end":210878,"line_start":3,"line_end":3,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1014},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":229036,"byte_end":229062,"line_start":19,"line_end":19,"column_start":8,"column_end":34},"name":"generate_random_parameters","qualname":"::groth16::generator::generate_random_parameters","value":"pub fn generate_random_parameters<E, C, R>(C, &mut R)\n-> Result<Parameters<E>, SynthesisError> where E: Engine, E::G1: WnafGroup,\nE::G2: WnafGroup, C: Circuit<E::Fr>, R: RngCore","parent":null,"children":[],"decl_id":null,"docs":" Generates a random common reference string for\n a circuit.\n","sig":null,"attributes":[{"value":"/ Generates a random common reference string for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":228963,"byte_end":229013,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/ a circuit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":229014,"byte_end":229028,"line_start":18,"line_end":18,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":1053},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":233144,"byte_end":233163,"line_start":159,"line_end":159,"column_start":8,"column_end":27},"name":"generate_parameters","qualname":"::groth16::generator::generate_parameters","value":"pub fn generate_parameters<E,\nC>(C, E::G1, E::G2, E::Fr, E::Fr, E::Fr, E::Fr, E::Fr)\n-> Result<Parameters<E>, SynthesisError> where E: Engine, E::G1: WnafGroup,\nE::G2: WnafGroup, C: Circuit<E::Fr>","parent":null,"children":[],"decl_id":null,"docs":" Create parameters for a circuit, given some toxic waste.\n","sig":null,"attributes":[{"value":"/ Create parameters for a circuit, given some toxic waste.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":233039,"byte_end":233099,"line_start":157,"line_end":157,"column_start":1,"column_end":61}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":233100,"byte_end":233136,"line_start":158,"line_end":158,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1190},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/prover.rs","byte_start":248585,"byte_end":248604,"line_start":160,"line_end":160,"column_start":8,"column_end":27},"name":"create_random_proof","qualname":"::groth16::prover::create_random_proof","value":"pub fn create_random_proof<E, C, R, P: ParameterSource<E>>(C, P, &mut R)\n-> Result<Proof<E>, SynthesisError> where E: Engine, E::Fr: PrimeFieldBits,\nC: Circuit<E::Fr>, R: RngCore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1195},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/prover.rs","byte_start":248994,"byte_end":249006,"line_start":178,"line_end":178,"column_start":8,"column_end":20},"name":"create_proof","qualname":"::groth16::prover::create_proof","value":"pub fn create_proof<E, C, P: ParameterSource<E>>(C, P, E::Fr, E::Fr)\n-> Result<Proof<E>, SynthesisError> where E: Engine, E::Fr: PrimeFieldBits,\nC: Circuit<E::Fr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/prover.rs","byte_start":248946,"byte_end":248986,"line_start":177,"line_end":177,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":1243},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"batch","qualname":"::groth16::verifier::batch","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1801},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1304},{"krate":0,"index":1307}],"decl_id":null,"docs":" Performs batch Groth16 proof verification.","sig":null,"attributes":[{"value":"/ Performs batch Groth16 proof verification.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256085,"byte_end":256131,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256132,"byte_end":256135,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Batch verification asks whether *all* proofs in some set are valid,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256136,"byte_end":256207,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ rather than asking whether *each* of them is valid. This allows sharing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256208,"byte_end":256283,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ computations among all proof verifications, performing less work overall","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256284,"byte_end":256360,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ at the cost of higher latency (the entire batch must complete), complexity of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256361,"byte_end":256442,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ caller code (which must assemble a batch of proofs across work-items),","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256443,"byte_end":256517,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ and loss of the ability to easily pinpoint failing proofs.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256518,"byte_end":256580,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256581,"byte_end":256584,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This batch verification implementation is non-adaptive, in the sense that it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256585,"byte_end":256665,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ assumes that all the proofs in the batch are verifiable by the same","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256666,"byte_end":256737,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ `VerifyingKey`. The reason is that if you have different proof statements,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256738,"byte_end":256816,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ you need to specify which statement you are proving, which means that you","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256817,"byte_end":256894,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ need to refer to or lookup a particular `VerifyingKey`. In practice, with","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256895,"byte_end":256972,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ large enough batches, it's manageable and not much worse performance-wise to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":256973,"byte_end":257053,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ keep batches of each statement type, vs one large adaptive batch.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257054,"byte_end":257123,"line_start":16,"line_end":16,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1801},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257775,"byte_end":257779,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Item","qualname":"::groth16::verifier::batch::Item","value":"Item {  }","parent":null,"children":[{"krate":0,"index":1803},{"krate":0,"index":1804}],"decl_id":null,"docs":" A batch verification item.","sig":null,"attributes":[{"value":"/ A batch verification item.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257524,"byte_end":257554,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257555,"byte_end":257558,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This struct exists to allow batch processing to be decoupled from the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257559,"byte_end":257632,"line_start":38,"line_end":38,"column_start":1,"column_end":74}},{"value":"/ lifetime of the message. This is useful when using the batch verification","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257633,"byte_end":257710,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ API in an async context.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257711,"byte_end":257739,"line_start":40,"line_end":40,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258450,"byte_end":258463,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"verify_single","qualname":"<Item<E>>::verify_single","value":"pub fn verify_single(Self, &PreparedVerifyingKey<E>)\n-> Result<(), VerificationError>","parent":null,"children":[],"decl_id":null,"docs":" Perform non-batched verification of this `Item`.","sig":null,"attributes":[{"value":"/ Perform non-batched verification of this `Item`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258248,"byte_end":258300,"line_start":60,"line_end":60,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258305,"byte_end":258308,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is useful (in combination with `Item::clone`) for implementing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258313,"byte_end":258384,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ fallback logic when batch verification fails.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258389,"byte_end":258438,"line_start":63,"line_end":63,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1811},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258786,"byte_end":258794,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::groth16::verifier::batch::Verifier","value":"Verifier {  }","parent":null,"children":[{"krate":0,"index":1813}],"decl_id":null,"docs":" A batch verification context.","sig":null,"attributes":[{"value":"/ A batch verification context.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258605,"byte_end":258638,"line_start":69,"line_end":69,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258639,"byte_end":258642,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ In practice, you would create a batch verifier for each proof statement","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258643,"byte_end":258718,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ requiring the same `VerifyingKey`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258719,"byte_end":258757,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259160,"byte_end":259163,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier<E>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new batch verifier.\n","sig":null,"attributes":[{"value":"/ Construct a new batch verifier.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259113,"byte_end":259148,"line_start":89,"line_end":89,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259274,"byte_end":259279,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"queue","qualname":"<Verifier<E>>::queue","value":"pub fn queue<I: Into<Item<E>>>(&mut Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Queue a (proof, inputs) tuple for verification.\n","sig":null,"attributes":[{"value":"/ Queue a (proof, inputs) tuple for verification.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259211,"byte_end":259262,"line_start":94,"line_end":94,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259563,"byte_end":259569,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"verify","qualname":"<Verifier<E>>::verify","value":"pub fn verify<R: RngCore + CryptoRng>(Self, R, &VerifyingKey<E>)\n-> Result<(), VerificationError>","parent":null,"children":[],"decl_id":null,"docs":" Perform batch verification with a particular `VerifyingKey`, returning\n `Ok(())` if all proofs were verified and `VerificationError` otherwise.\n","sig":null,"attributes":[{"value":"/ Perform batch verification with a particular `VerifyingKey`, returning","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259368,"byte_end":259442,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ `Ok(())` if all proofs were verified and `VerificationError` otherwise.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259447,"byte_end":259522,"line_start":100,"line_end":100,"column_start":5,"column_end":80}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259527,"byte_end":259551,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262694,"byte_end":262710,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"verify_multicore","qualname":"<Verifier<E>>::verify_multicore","value":"pub fn verify_multicore(Self, &VerifyingKey<E>)\n-> Result<(), VerificationError>","parent":null,"children":[],"decl_id":null,"docs":" Perform batch verification with a particular `VerifyingKey`, returning\n `Ok(())` if all proofs were verified and `VerificationError` otherwise.","sig":null,"attributes":[{"value":"/ Perform batch verification with a particular `VerifyingKey`, returning","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262361,"byte_end":262435,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ `Ok(())` if all proofs were verified and `VerificationError` otherwise.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262440,"byte_end":262515,"line_start":178,"line_end":178,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262520,"byte_end":262523,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This performs the bulk of internal arithmetic over the global rayon","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262528,"byte_end":262599,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ threadpool.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262604,"byte_end":262619,"line_start":181,"line_end":181,"column_start":5,"column_end":20}},{"value":"cfg(feature = \"multicore\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262624,"byte_end":262653,"line_start":182,"line_end":182,"column_start":5,"column_end":34}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":262658,"byte_end":262682,"line_start":183,"line_end":183,"column_start":5,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":1333},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier.rs","byte_start":254566,"byte_end":254587,"line_start":11,"line_end":11,"column_start":8,"column_end":29},"name":"prepare_verifying_key","qualname":"::groth16::verifier::prepare_verifying_key","value":"pub fn prepare_verifying_key<E: MultiMillerLoop>(&VerifyingKey<E>)\n-> PreparedVerifyingKey<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1335},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier.rs","byte_start":254937,"byte_end":254949,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::groth16::verifier::verify_proof","value":"pub fn verify_proof<'a,\nE: MultiMillerLoop>(&'a PreparedVerifyingKey<E>, &Proof<E>, &[E::Fr])\n-> Result<(), VerificationError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1817},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211355,"byte_end":211360,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"Proof","qualname":"::groth16::Proof","value":"Proof { a, b, c }","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211382,"byte_end":211383,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"a","qualname":"::groth16::Proof::a","value":"<E as pairing::Engine>::G1Affine","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211406,"byte_end":211407,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"b","qualname":"::groth16::Proof::b","value":"<E as pairing::Engine>::G2Affine","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211430,"byte_end":211431,"line_start":30,"line_end":30,"column_start":9,"column_end":10},"name":"c","qualname":"::groth16::Proof::c","value":"<E as pairing::Engine>::G1Affine","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211646,"byte_end":211651,"line_start":40,"line_end":40,"column_start":12,"column_end":17},"name":"write","qualname":"<Proof<E>>::write","value":"pub fn write<W: Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211903,"byte_end":211907,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"read","qualname":"<Proof<E>>::read","value":"pub fn read<R: Read>(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1828},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":213733,"byte_end":213745,"line_start":104,"line_end":104,"column_start":12,"column_end":24},"name":"VerifyingKey","qualname":"::groth16::VerifyingKey","value":"VerifyingKey { alpha_g1, beta_g1, beta_g2, gamma_g2, delta_g1, delta_g2, ic }","parent":null,"children":[{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":213876,"byte_end":213884,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"alpha_g1","qualname":"::groth16::VerifyingKey::alpha_g1","value":"<E as pairing::Engine>::G1Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1831},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214023,"byte_end":214030,"line_start":111,"line_end":111,"column_start":9,"column_end":16},"name":"beta_g1","qualname":"::groth16::VerifyingKey::beta_g1","value":"<E as pairing::Engine>::G1Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1832},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214053,"byte_end":214060,"line_start":112,"line_end":112,"column_start":9,"column_end":16},"name":"beta_g2","qualname":"::groth16::VerifyingKey::beta_g2","value":"<E as pairing::Engine>::G2Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1833},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214147,"byte_end":214155,"line_start":115,"line_end":115,"column_start":9,"column_end":17},"name":"gamma_g2","qualname":"::groth16::VerifyingKey::gamma_g2","value":"<E as pairing::Engine>::G2Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1834},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214406,"byte_end":214414,"line_start":121,"line_end":121,"column_start":9,"column_end":17},"name":"delta_g1","qualname":"::groth16::VerifyingKey::delta_g1","value":"<E as pairing::Engine>::G1Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1835},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214437,"byte_end":214445,"line_start":122,"line_end":122,"column_start":9,"column_end":17},"name":"delta_g2","qualname":"::groth16::VerifyingKey::delta_g2","value":"<E as pairing::Engine>::G2Affine","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1836},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214732,"byte_end":214734,"line_start":128,"line_end":128,"column_start":9,"column_end":11},"name":"ic","qualname":"::groth16::VerifyingKey::ic","value":"std::vec::Vec<<E as pairing::Engine>::G1Affine>","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":215206,"byte_end":215211,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"write","qualname":"<VerifyingKey<E>>::write","value":"pub fn write<W: Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":215873,"byte_end":215877,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"read","qualname":"<VerifyingKey<E>>::read","value":"pub fn read<R: Read>(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1840},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":217890,"byte_end":217900,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"Parameters","qualname":"::groth16::Parameters","value":"Parameters { vk, h, l, a, b_g1, b_g2 }","parent":null,"children":[{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1842},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":217922,"byte_end":217924,"line_start":224,"line_end":224,"column_start":9,"column_end":11},"name":"vk","qualname":"::groth16::Parameters::vk","value":"groth16::VerifyingKey<E>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218084,"byte_end":218085,"line_start":228,"line_end":228,"column_start":9,"column_end":10},"name":"h","qualname":"::groth16::Parameters::h","value":"std::sync::Arc<std::vec::Vec<<E as pairing::Engine>::G1Affine>>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1844},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218322,"byte_end":218323,"line_start":233,"line_end":233,"column_start":9,"column_end":10},"name":"l","qualname":"::groth16::Parameters::l","value":"std::sync::Arc<std::vec::Vec<<E as pairing::Engine>::G1Affine>>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218592,"byte_end":218593,"line_start":238,"line_end":238,"column_start":9,"column_end":10},"name":"a","qualname":"::groth16::Parameters::a","value":"std::sync::Arc<std::vec::Vec<<E as pairing::Engine>::G1Affine>>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1846},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218837,"byte_end":218841,"line_start":243,"line_end":243,"column_start":9,"column_end":13},"name":"b_g1","qualname":"::groth16::Parameters::b_g1","value":"std::sync::Arc<std::vec::Vec<<E as pairing::Engine>::G1Affine>>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1847},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218874,"byte_end":218878,"line_start":244,"line_end":244,"column_start":9,"column_end":13},"name":"b_g2","qualname":"::groth16::Parameters::b_g2","value":"std::sync::Arc<std::vec::Vec<<E as pairing::Engine>::G2Affine>>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":219250,"byte_end":219255,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"write","qualname":"<Parameters<E>>::write","value":"pub fn write<W: Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":220211,"byte_end":220215,"line_start":290,"line_end":290,"column_start":12,"column_end":16},"name":"read","qualname":"<Parameters<E>>::read","value":"pub fn read<R: Read>(R, bool) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1379},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223468,"byte_end":223488,"line_start":401,"line_end":401,"column_start":12,"column_end":32},"name":"PreparedVerifyingKey","qualname":"::groth16::PreparedVerifyingKey","value":"PreparedVerifyingKey {  }","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1385},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223765,"byte_end":223780,"line_start":412,"line_end":412,"column_start":11,"column_end":26},"name":"ParameterSource","qualname":"::groth16::ParameterSource","value":"ParameterSource<E: Engine>","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1387},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223803,"byte_end":223812,"line_start":413,"line_end":413,"column_start":10,"column_end":19},"name":"G1Builder","qualname":"::groth16::ParameterSource::G1Builder","value":"type G1Builder: SourceBuilder<E::G1Affine>;","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1388},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223851,"byte_end":223860,"line_start":414,"line_end":414,"column_start":10,"column_end":19},"name":"G2Builder","qualname":"::groth16::ParameterSource::G2Builder","value":"type G2Builder: SourceBuilder<E::G2Affine>;","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223898,"byte_end":223904,"line_start":416,"line_end":416,"column_start":8,"column_end":14},"name":"get_vk","qualname":"::groth16::ParameterSource::get_vk","value":"pub fn get_vk(&mut Self, usize) -> Result<VerifyingKey<E>, SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":223982,"byte_end":223987,"line_start":417,"line_end":417,"column_start":8,"column_end":13},"name":"get_h","qualname":"::groth16::ParameterSource::get_h","value":"pub fn get_h(&mut Self, usize) -> Result<Self::G1Builder, SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":224064,"byte_end":224069,"line_start":418,"line_end":418,"column_start":8,"column_end":13},"name":"get_l","qualname":"::groth16::ParameterSource::get_l","value":"pub fn get_l(&mut Self, usize) -> Result<Self::G1Builder, SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":224146,"byte_end":224151,"line_start":419,"line_end":419,"column_start":8,"column_end":13},"name":"get_a","qualname":"::groth16::ParameterSource::get_a","value":"pub fn get_a(&mut Self, usize, usize)\n-> Result<(Self::G1Builder, Self::G1Builder), SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":224299,"byte_end":224307,"line_start":424,"line_end":424,"column_start":8,"column_end":16},"name":"get_b_g1","qualname":"::groth16::ParameterSource::get_b_g1","value":"pub fn get_b_g1(&mut Self, usize, usize)\n-> Result<(Self::G1Builder, Self::G1Builder), SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":224455,"byte_end":224463,"line_start":429,"line_end":429,"column_start":8,"column_end":16},"name":"get_b_g2","qualname":"::groth16::ParameterSource::get_b_g2","value":"pub fn get_b_g2(&mut Self, usize, usize)\n-> Result<(Self::G2Builder, Self::G2Builder), SynthesisError>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1406},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multicore","qualname":"::multicore","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1457}],"decl_id":null,"docs":" An interface for dealing with the kinds of parallel computations involved in\n `bellman`. It's currently just a thin wrapper around [`rayon`] but may be\n extended in the future to allow for various parallelism strategies.\n","sig":null,"attributes":[{"value":"/ An interface for dealing with the kinds of parallel computations involved in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":266494,"byte_end":266574,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ `bellman`. It's currently just a thin wrapper around [`rayon`] but may be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":266575,"byte_end":266652,"line_start":2,"line_end":2,"column_start":1,"column_end":78}},{"value":"/ extended in the future to allow for various parallelism strategies.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":266653,"byte_end":266724,"line_start":3,"line_end":3,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1862},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267260,"byte_end":267266,"line_start":22,"line_end":22,"column_start":16,"column_end":22},"name":"Worker","qualname":"::multicore::implementation::Worker","value":"Worker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267304,"byte_end":267307,"line_start":25,"line_end":25,"column_start":16,"column_end":19},"name":"new","qualname":"<Worker>::new","value":"pub fn new() -> Worker","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267370,"byte_end":267385,"line_start":29,"line_end":29,"column_start":16,"column_end":31},"name":"log_num_threads","qualname":"<Worker>::log_num_threads","value":"pub fn log_num_threads(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267474,"byte_end":267481,"line_start":33,"line_end":33,"column_start":16,"column_end":23},"name":"compute","qualname":"<Worker>::compute","value":"pub fn compute<F, R>(&Self, F) -> Waiter<R> where F: FnOnce() -> R + Send +\n'static, R: Send + 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":269601,"byte_end":269606,"line_start":78,"line_end":78,"column_start":16,"column_end":21},"name":"scope","qualname":"<Worker>::scope","value":"pub fn scope<'a, F, R>(&Self, usize, F) -> R where\nF: FnOnce(&rayon::Scope, usize) -> R + Send, R: Send","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270049,"byte_end":270055,"line_start":94,"line_end":94,"column_start":16,"column_end":22},"name":"Waiter","qualname":"::multicore::implementation::Waiter","value":"Waiter {  }","parent":null,"children":[{"krate":0,"index":1451}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270209,"byte_end":270213,"line_start":100,"line_end":100,"column_start":16,"column_end":20},"name":"wait","qualname":"<Waiter<T>>::wait","value":"pub fn wait(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this waiter and blocks until the result is ready.\n","sig":null,"attributes":[{"value":"/ Consumes this waiter and blocks until the result is ready.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270131,"byte_end":270193,"line_start":99,"line_end":99,"column_start":9,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270740,"byte_end":270744,"line_start":112,"line_end":112,"column_start":16,"column_end":20},"name":"done","qualname":"<Waiter<T>>::done","value":"pub fn done(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" One-off sending.\n","sig":null,"attributes":[{"value":"/ One-off sending.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270704,"byte_end":270724,"line_start":111,"line_end":111,"column_start":9,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":1458},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multiexp","qualname":"::multiexp","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1502},{"krate":0,"index":1506},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1519},{"krate":0,"index":1523},{"krate":0,"index":1867},{"krate":0,"index":1869},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1541},{"krate":0,"index":1543},{"krate":0,"index":1548},{"krate":0,"index":1556},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1576},{"krate":0,"index":1588}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1502},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273529,"byte_end":273542,"line_start":19,"line_end":19,"column_start":11,"column_end":24},"name":"SourceBuilder","qualname":"::multiexp::SourceBuilder","value":"SourceBuilder<G: PrimeCurveAffine>: Send + Sync + 'static + Clone","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505}],"decl_id":null,"docs":" An object that builds a source of bases.\n","sig":null,"attributes":[{"value":"/ An object that builds a source of bases.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273474,"byte_end":273518,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1504},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273606,"byte_end":273612,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Source","qualname":"::multiexp::SourceBuilder::Source","value":"type Source: Source<G>;","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273633,"byte_end":273638,"line_start":22,"line_end":22,"column_start":8,"column_end":13},"name":"build","qualname":"::multiexp::SourceBuilder::build","value":"pub fn build(Self) -> Self::Source","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1506},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273716,"byte_end":273722,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"Source","qualname":"::multiexp::Source","value":"Source<G: PrimeCurveAffine>","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509}],"decl_id":null,"docs":" A source of bases, like an iterator.\n","sig":null,"attributes":[{"value":"/ A source of bases, like an iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273665,"byte_end":273705,"line_start":25,"line_end":25,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273753,"byte_end":273757,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"next","qualname":"::multiexp::Source::next","value":"pub fn next(&mut Self) -> Result<&G, SynthesisError>","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273880,"byte_end":273884,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"skip","qualname":"::multiexp::Source::skip","value":"pub fn skip(&mut Self, usize) -> Result<(), SynthesisError>","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Skips `amt` elements from the source, avoiding deserialization.\n","sig":null,"attributes":[{"value":"/ Skips `amt` elements from the source, avoiding deserialization.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273805,"byte_end":273872,"line_start":29,"line_end":29,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":1510},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273952,"byte_end":273971,"line_start":33,"line_end":33,"column_start":11,"column_end":30},"name":"AddAssignFromSource","qualname":"::multiexp::AddAssignFromSource","value":"AddAssignFromSource: PrimeCurve","parent":null,"children":[{"krate":0,"index":1511}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":274072,"byte_end":274094,"line_start":35,"line_end":35,"column_start":8,"column_end":30},"name":"add_assign_from_source","qualname":"::multiexp::AddAssignFromSource::add_assign_from_source","value":"pub fn add_assign_from_source<S: Source<<Self as\nPrimeCurve>::Affine>>(&mut Self, &mut S) -> Result<(), SynthesisError>","parent":{"krate":0,"index":1510},"children":[],"decl_id":null,"docs":" Parses the element from the source. Fails if the point is at infinity.\n","sig":null,"attributes":[{"value":"/ Parses the element from the source. Fails if the point is at infinity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273990,"byte_end":274064,"line_start":34,"line_end":34,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":1523},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275464,"byte_end":275476,"line_start":88,"line_end":88,"column_start":11,"column_end":23},"name":"QueryDensity","qualname":"::multiexp::QueryDensity","value":"QueryDensity","parent":null,"children":[{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1524},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275529,"byte_end":275533,"line_start":90,"line_end":90,"column_start":10,"column_end":14},"name":"Iter","qualname":"::multiexp::QueryDensity::Iter","value":"type Iter: Iterator<Item = bool>;","parent":{"krate":0,"index":1523},"children":[],"decl_id":null,"docs":" Returns whether the base exists.\n","sig":null,"attributes":[{"value":"/ Returns whether the base exists.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275483,"byte_end":275519,"line_start":89,"line_end":89,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275566,"byte_end":275570,"line_start":92,"line_end":92,"column_start":8,"column_end":12},"name":"iter","qualname":"::multiexp::QueryDensity::iter","value":"pub fn iter(Self) -> Self::Iter","parent":{"krate":0,"index":1523},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275599,"byte_end":275613,"line_start":93,"line_end":93,"column_start":8,"column_end":22},"name":"get_query_size","qualname":"::multiexp::QueryDensity::get_query_size","value":"pub fn get_query_size(Self) -> Option<usize>","parent":{"krate":0,"index":1523},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1867},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275669,"byte_end":275680,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"FullDensity","qualname":"::multiexp::FullDensity","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1534},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276015,"byte_end":276029,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"DensityTracker","qualname":"::multiexp::DensityTracker","value":"DensityTracker {  }","parent":null,"children":[{"krate":0,"index":1535}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276443,"byte_end":276446,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<DensityTracker>::new","value":"pub fn new() -> DensityTracker","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276532,"byte_end":276543,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"add_element","qualname":"<DensityTracker>::add_element","value":"pub fn add_element(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276604,"byte_end":276607,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"inc","qualname":"<DensityTracker>::inc","value":"pub fn inc(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276737,"byte_end":276754,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"get_total_density","qualname":"<DensityTracker>::get_total_density","value":"pub fn get_total_density(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1558},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276937,"byte_end":276941,"line_start":167,"line_end":167,"column_start":5,"column_end":9},"name":"Zero","qualname":"::multiexp::Exponent::Zero","value":"Exponent::Zero","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1560},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276947,"byte_end":276950,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"One","qualname":"::multiexp::Exponent::One","value":"Exponent::One","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1562},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276956,"byte_end":276960,"line_start":169,"line_end":169,"column_start":5,"column_end":9},"name":"Bits","qualname":"::multiexp::Exponent::Bits","value":"Exponent::Bits(FieldBits<F::ReprBits>)","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1556},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276903,"byte_end":276911,"line_start":166,"line_end":166,"column_start":10,"column_end":18},"name":"Exponent","qualname":"::multiexp::Exponent","value":"pub enum Exponent<F: PrimeFieldBits> {\n    Zero,\n    One,\n    Bits(FieldBits<F::ReprBits>),\n}","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562}],"decl_id":null,"docs":" An exponent\n","sig":null,"attributes":[{"value":"/ An exponent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276878,"byte_end":276893,"line_start":165,"line_end":165,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1588},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":281052,"byte_end":281060,"line_start":305,"line_end":305,"column_start":8,"column_end":16},"name":"multiexp","qualname":"::multiexp::multiexp","value":"pub fn multiexp<Q, D, G, S>(&Worker, S, D, Arc<Vec<Exponent<G::Scalar>>>)\n-> Waiter<Result<G, SynthesisError>> where for<'a> &'a Q: QueryDensity,\nD: Send + Sync + 'static + Clone + AsRef<Q>, G: PrimeCurve,\nG::Scalar: PrimeFieldBits, S: SourceBuilder<<G as PrimeCurve>::Affine>","parent":null,"children":[],"decl_id":null,"docs":" Perform multi-exponentiation. The caller is responsible for ensuring the\n query size is the same as the number of exponents.\n","sig":null,"attributes":[{"value":"/ Perform multi-exponentiation. The caller is responsible for ensuring the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":280913,"byte_end":280989,"line_start":303,"line_end":303,"column_start":1,"column_end":77}},{"value":"/ query size is the same as the number of exponents.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":280990,"byte_end":281044,"line_start":304,"line_end":304,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1617},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5945,"byte_end":5952,"line_start":159,"line_end":159,"column_start":11,"column_end":18},"name":"Circuit","qualname":"::Circuit","value":"Circuit<Scalar: PrimeField>","parent":null,"children":[{"krate":0,"index":1619}],"decl_id":null,"docs":" Computations are expressed in terms of arithmetic circuits, in particular\n rank-1 quadratic constraint systems. The `Circuit` trait represents a\n circuit that can be synthesized. The `synthesize` method is called during\n CRS generation and during proving.\n","sig":null,"attributes":[{"value":"/ Computations are expressed in terms of arithmetic circuits, in particular","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5666,"byte_end":5743,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/ rank-1 quadratic constraint systems. The `Circuit` trait represents a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5744,"byte_end":5817,"line_start":156,"line_end":156,"column_start":1,"column_end":74}},{"value":"/ circuit that can be synthesized. The `synthesize` method is called during","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5818,"byte_end":5895,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ CRS generation and during proving.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5896,"byte_end":5934,"line_start":158,"line_end":158,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6055,"byte_end":6065,"line_start":161,"line_end":161,"column_start":8,"column_end":18},"name":"synthesize","qualname":"::Circuit::synthesize","value":"pub fn synthesize<CS: ConstraintSystem<Scalar>>(Self, &mut CS)\n-> Result<(), SynthesisError>","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":" Synthesize the circuit into a rank-1 quadratic constraint system\n","sig":null,"attributes":[{"value":"/ Synthesize the circuit into a rank-1 quadratic constraint system","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5979,"byte_end":6047,"line_start":160,"line_end":160,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1871},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6242,"byte_end":6250,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"Variable","qualname":"::Variable","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents a variable in our constraint system.\n","sig":null,"attributes":[{"value":"/ Represents a variable in our constraint system.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6149,"byte_end":6200,"line_start":164,"line_end":164,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6412,"byte_end":6425,"line_start":171,"line_end":171,"column_start":12,"column_end":25},"name":"new_unchecked","qualname":"<Variable>::new_unchecked","value":"pub fn new_unchecked(Index) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" This constructs a variable with an arbitrary index.\n Circuit implementations are not recommended to use this.\n","sig":null,"attributes":[{"value":"/ This constructs a variable with an arbitrary index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6280,"byte_end":6335,"line_start":169,"line_end":169,"column_start":5,"column_end":60}},{"value":"/ Circuit implementations are not recommended to use this.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6340,"byte_end":6400,"line_start":170,"line_end":170,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6613,"byte_end":6626,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"<Variable>::get_unchecked","value":"pub fn get_unchecked(&Self) -> Index","parent":null,"children":[],"decl_id":null,"docs":" This returns the index underlying the variable.\n Circuit implementations are not recommended to use this.\n","sig":null,"attributes":[{"value":"/ This returns the index underlying the variable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6485,"byte_end":6536,"line_start":175,"line_end":175,"column_start":5,"column_end":56}},{"value":"/ Circuit implementations are not recommended to use this.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6541,"byte_end":6601,"line_start":176,"line_end":176,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1880},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6811,"byte_end":6816,"line_start":186,"line_end":186,"column_start":5,"column_end":10},"name":"Input","qualname":"::Index::Input","value":"Index::Input(usize)","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1883},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6829,"byte_end":6832,"line_start":187,"line_end":187,"column_start":5,"column_end":8},"name":"Aux","qualname":"::Index::Aux","value":"Index::Aux(usize)","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1879},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6799,"byte_end":6804,"line_start":185,"line_end":185,"column_start":10,"column_end":15},"name":"Index","qualname":"::Index","value":"pub enum Index { Input(usize), Aux(usize), }","parent":null,"children":[{"krate":0,"index":1880},{"krate":0,"index":1883}],"decl_id":null,"docs":" Represents the index of either an input variable or\n auxiliary variable.\n","sig":null,"attributes":[{"value":"/ Represents the index of either an input variable or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6669,"byte_end":6724,"line_start":182,"line_end":182,"column_start":1,"column_end":56}},{"value":"/ auxiliary variable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6725,"byte_end":6748,"line_start":183,"line_end":183,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1895},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7018,"byte_end":7035,"line_start":193,"line_end":193,"column_start":12,"column_end":29},"name":"LinearCombination","qualname":"::LinearCombination","value":"","parent":null,"children":[],"decl_id":null,"docs":" This represents a linear combination of some variables, with coefficients\n in the scalar field of a pairing-friendly elliptic curve group.\n","sig":null,"attributes":[{"value":"/ This represents a linear combination of some variables, with coefficients","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6844,"byte_end":6921,"line_start":190,"line_end":190,"column_start":1,"column_end":78}},{"value":"/ in the scalar field of a pairing-friendly elliptic curve group.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6922,"byte_end":6989,"line_start":191,"line_end":191,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7305,"byte_end":7309,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"zero","qualname":"<LinearCombination<Scalar>>::zero","value":"pub fn zero() -> LinearCombination<Scalar>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1903},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10217,"byte_end":10234,"line_start":309,"line_end":309,"column_start":5,"column_end":22},"name":"AssignmentMissing","qualname":"::SynthesisError::AssignmentMissing","value":"SynthesisError::AssignmentMissing","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During synthesis, we lacked knowledge of a variable assignment.\n","sig":null,"attributes":[{"value":"/ During synthesis, we lacked knowledge of a variable assignment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10145,"byte_end":10212,"line_start":308,"line_end":308,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10286,"byte_end":10300,"line_start":311,"line_end":311,"column_start":5,"column_end":19},"name":"DivisionByZero","qualname":"::SynthesisError::DivisionByZero","value":"SynthesisError::DivisionByZero","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During synthesis, we divided by zero.\n","sig":null,"attributes":[{"value":"/ During synthesis, we divided by zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10240,"byte_end":10281,"line_start":310,"line_end":310,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10383,"byte_end":10396,"line_start":313,"line_end":313,"column_start":5,"column_end":18},"name":"Unsatisfiable","qualname":"::SynthesisError::Unsatisfiable","value":"SynthesisError::Unsatisfiable","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During synthesis, we constructed an unsatisfiable constraint system.\n","sig":null,"attributes":[{"value":"/ During synthesis, we constructed an unsatisfiable constraint system.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10306,"byte_end":10378,"line_start":312,"line_end":312,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10478,"byte_end":10502,"line_start":315,"line_end":315,"column_start":5,"column_end":29},"name":"PolynomialDegreeTooLarge","qualname":"::SynthesisError::PolynomialDegreeTooLarge","value":"SynthesisError::PolynomialDegreeTooLarge","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During synthesis, our polynomials ended up being too high of degree\n","sig":null,"attributes":[{"value":"/ During synthesis, our polynomials ended up being too high of degree","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10402,"byte_end":10473,"line_start":314,"line_end":314,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10579,"byte_end":10597,"line_start":317,"line_end":317,"column_start":5,"column_end":23},"name":"UnexpectedIdentity","qualname":"::SynthesisError::UnexpectedIdentity","value":"SynthesisError::UnexpectedIdentity","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During proof generation, we encountered an identity in the CRS\n","sig":null,"attributes":[{"value":"/ During proof generation, we encountered an identity in the CRS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10508,"byte_end":10574,"line_start":316,"line_end":316,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10677,"byte_end":10684,"line_start":319,"line_end":319,"column_start":5,"column_end":12},"name":"IoError","qualname":"::SynthesisError::IoError","value":"SynthesisError::IoError(io::Error)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During proof generation, we encountered an I/O error with the CRS\n","sig":null,"attributes":[{"value":"/ During proof generation, we encountered an I/O error with the CRS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10603,"byte_end":10672,"line_start":318,"line_end":318,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1916},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10780,"byte_end":10801,"line_start":321,"line_end":321,"column_start":5,"column_end":26},"name":"UnconstrainedVariable","qualname":"::SynthesisError::UnconstrainedVariable","value":"SynthesisError::UnconstrainedVariable","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" During CRS generation, we observed an unconstrained auxiliary variable\n","sig":null,"attributes":[{"value":"/ During CRS generation, we observed an unconstrained auxiliary variable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10701,"byte_end":10775,"line_start":320,"line_end":320,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":1902},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10124,"byte_end":10138,"line_start":307,"line_end":307,"column_start":10,"column_end":24},"name":"SynthesisError","qualname":"::SynthesisError","value":"pub enum SynthesisError {\n    AssignmentMissing,\n    DivisionByZero,\n    Unsatisfiable,\n    PolynomialDegreeTooLarge,\n    UnexpectedIdentity,\n    IoError(io::Error),\n    UnconstrainedVariable,\n}","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1916}],"decl_id":null,"docs":" This is an error that could occur during circuit synthesis contexts,\n such as CRS generation or proving.\n","sig":null,"attributes":[{"value":"/ This is an error that could occur during circuit synthesis contexts,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":9986,"byte_end":10058,"line_start":304,"line_end":304,"column_start":1,"column_end":73}},{"value":"/ such as CRS generation or proving.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10059,"byte_end":10097,"line_start":305,"line_end":305,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12100,"byte_end":12119,"line_start":358,"line_end":358,"column_start":5,"column_end":24},"name":"InvalidVerifyingKey","qualname":"::VerificationError::InvalidVerifyingKey","value":"VerificationError::InvalidVerifyingKey","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":" Verification was attempted with a malformed verifying key.\n","sig":null,"attributes":[{"value":"/ Verification was attempted with a malformed verifying key.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12033,"byte_end":12095,"line_start":357,"line_end":357,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12160,"byte_end":12172,"line_start":360,"line_end":360,"column_start":5,"column_end":17},"name":"InvalidProof","qualname":"::VerificationError::InvalidProof","value":"VerificationError::InvalidProof","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":" Proof verification failed.\n","sig":null,"attributes":[{"value":"/ Proof verification failed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12125,"byte_end":12155,"line_start":359,"line_end":359,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":1920},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12009,"byte_end":12026,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"name":"VerificationError","qualname":"::VerificationError","value":"pub enum VerificationError { InvalidVerifyingKey, InvalidProof, }","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1923}],"decl_id":null,"docs":" An error during verification.\n","sig":null,"attributes":[{"value":"/ An error during verification.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":11942,"byte_end":11975,"line_start":354,"line_end":354,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":1674},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12692,"byte_end":12708,"line_start":377,"line_end":377,"column_start":11,"column_end":27},"name":"ConstraintSystem","qualname":"::ConstraintSystem","value":"ConstraintSystem<Scalar: PrimeField>: Sized","parent":null,"children":[{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1682},{"krate":0,"index":1686},{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697}],"decl_id":null,"docs":" Represents a constraint system which can have new variables\n allocated and constrains between them formed.\n","sig":null,"attributes":[{"value":"/ Represents a constraint system which can have new variables","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12568,"byte_end":12631,"line_start":375,"line_end":375,"column_start":1,"column_end":64}},{"value":"/ allocated and constrains between them formed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12632,"byte_end":12681,"line_start":376,"line_end":376,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1676},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12875,"byte_end":12879,"line_start":380,"line_end":380,"column_start":10,"column_end":14},"name":"Root","qualname":"::ConstraintSystem::Root","value":"type Root: ConstraintSystem<Scalar>;","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Represents the type of the \"root\" of this constraint system\n so that nested namespaces can minimize indirection.\n","sig":null,"attributes":[{"value":"/ Represents the type of the \"root\" of this constraint system","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12742,"byte_end":12805,"line_start":378,"line_end":378,"column_start":5,"column_end":68}},{"value":"/ so that nested namespaces can minimize indirection.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12810,"byte_end":12865,"line_start":379,"line_end":379,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12955,"byte_end":12958,"line_start":383,"line_end":383,"column_start":8,"column_end":11},"name":"one","qualname":"::ConstraintSystem::one","value":"pub fn one() -> Variable","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Return the \"one\" input variable\n","sig":null,"attributes":[{"value":"/ Return the \"one\" input variable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12912,"byte_end":12947,"line_start":382,"line_end":382,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13339,"byte_end":13344,"line_start":391,"line_end":391,"column_start":8,"column_end":13},"name":"alloc","qualname":"::ConstraintSystem::alloc","value":"pub fn alloc<F, A, AR>(&mut Self, A, F) -> Result<Variable, SynthesisError>\nwhere F: FnOnce() -> Result<Scalar, SynthesisError>, A: FnOnce() -> AR,\nAR: Into<String>","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Allocate a private variable in the constraint system. The provided function is used to\n determine the assignment of the variable. The given `annotation` function is invoked\n in testing contexts in order to derive a unique name for this variable in the current\n namespace.\n","sig":null,"attributes":[{"value":"/ Allocate a private variable in the constraint system. The provided function is used to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13035,"byte_end":13125,"line_start":387,"line_end":387,"column_start":5,"column_end":95}},{"value":"/ determine the assignment of the variable. The given `annotation` function is invoked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13130,"byte_end":13218,"line_start":388,"line_end":388,"column_start":5,"column_end":93}},{"value":"/ in testing contexts in order to derive a unique name for this variable in the current","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13223,"byte_end":13312,"line_start":389,"line_end":389,"column_start":5,"column_end":94}},{"value":"/ namespace.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13317,"byte_end":13331,"line_start":390,"line_end":390,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13693,"byte_end":13704,"line_start":399,"line_end":399,"column_start":8,"column_end":19},"name":"alloc_input","qualname":"::ConstraintSystem::alloc_input","value":"pub fn alloc_input<F, A, AR>(&mut Self, A, F)\n-> Result<Variable, SynthesisError> where F: FnOnce() ->\nResult<Scalar, SynthesisError>, A: FnOnce() -> AR, AR: Into<String>","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Allocate a public variable in the constraint system. The provided function is used to\n determine the assignment of the variable.\n","sig":null,"attributes":[{"value":"/ Allocate a public variable in the constraint system. The provided function is used to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13546,"byte_end":13635,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ determine the assignment of the variable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13640,"byte_end":13685,"line_start":398,"line_end":398,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14090,"byte_end":14097,"line_start":407,"line_end":407,"column_start":8,"column_end":15},"name":"enforce","qualname":"::ConstraintSystem::enforce","value":"pub fn enforce<A, AR, LA, LB, LC>(&mut Self, A, LA, LB, LC) where A: FnOnce()\n-> AR, AR: Into<String>, LA: FnOnce(LinearCombination<Scalar>) ->\nLinearCombination<Scalar>, LB: FnOnce(LinearCombination<Scalar>) ->\nLinearCombination<Scalar>, LC: FnOnce(LinearCombination<Scalar>) ->\nLinearCombination<Scalar>","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Enforce that `A` * `B` = `C`. The `annotation` function is invoked in testing contexts\n in order to derive a unique name for the constraint in the current namespace.\n","sig":null,"attributes":[{"value":"/ Enforce that `A` * `B` = `C`. The `annotation` function is invoked in testing contexts","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":13906,"byte_end":13996,"line_start":405,"line_end":405,"column_start":5,"column_end":95}},{"value":"/ in order to derive a unique name for the constraint in the current namespace.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14001,"byte_end":14082,"line_start":406,"line_end":406,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14584,"byte_end":14598,"line_start":417,"line_end":417,"column_start":8,"column_end":22},"name":"push_namespace","qualname":"::ConstraintSystem::push_namespace","value":"pub fn push_namespace<NR, N>(&mut Self, N) where NR: Into<String>, N: FnOnce()\n-> NR","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Create a new (sub)namespace and enter into it. Not intended\n for downstream use; use `namespace` instead.\n","sig":null,"attributes":[{"value":"/ Create a new (sub)namespace and enter into it. Not intended","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14460,"byte_end":14523,"line_start":415,"line_end":415,"column_start":5,"column_end":68}},{"value":"/ for downstream use; use `namespace` instead.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14528,"byte_end":14576,"line_start":416,"line_end":416,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14810,"byte_end":14823,"line_start":424,"line_end":424,"column_start":8,"column_end":21},"name":"pop_namespace","qualname":"::ConstraintSystem::pop_namespace","value":"pub fn pop_namespace(&mut Self)","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Exit out of the existing namespace. Not intended for\n downstream use; use `namespace` instead.\n","sig":null,"attributes":[{"value":"/ Exit out of the existing namespace. Not intended for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14697,"byte_end":14753,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/ downstream use; use `namespace` instead.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14758,"byte_end":14802,"line_start":423,"line_end":423,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14980,"byte_end":14988,"line_start":428,"line_end":428,"column_start":8,"column_end":16},"name":"get_root","qualname":"::ConstraintSystem::get_root","value":"pub fn get_root(&mut Self) -> &mut Self::Root","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Gets the \"root\" constraint system, bypassing the namespacing.\n Not intended for downstream use; use `namespace` instead.\n","sig":null,"attributes":[{"value":"/ Gets the \"root\" constraint system, bypassing the namespacing.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14841,"byte_end":14906,"line_start":426,"line_end":426,"column_start":5,"column_end":70}},{"value":"/ Not intended for downstream use; use `namespace` instead.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":14911,"byte_end":14972,"line_start":427,"line_end":427,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15082,"byte_end":15091,"line_start":431,"line_end":431,"column_start":8,"column_end":17},"name":"namespace","qualname":"::ConstraintSystem::namespace","value":"pub fn namespace<NR, N>(&mut Self, N) -> Namespace<, Scalar, Self::Root> where\nNR: Into<String>, N: FnOnce() -> NR","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Begin a namespace for this constraint system.\n","sig":null,"attributes":[{"value":"/ Begin a namespace for this constraint system.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15025,"byte_end":15074,"line_start":430,"line_end":430,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15513,"byte_end":15522,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"Namespace","qualname":"::Namespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" This is a \"namespaced\" constraint system which borrows a constraint system (pushing\n a namespace context) and, when dropped, pops out of the namespace context.\n","sig":null,"attributes":[{"value":"/ This is a \"namespaced\" constraint system which borrows a constraint system (pushing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15335,"byte_end":15422,"line_start":442,"line_end":442,"column_start":1,"column_end":88}},{"value":"/ a namespace context) and, when dropped, pops out of the namespace context.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15423,"byte_end":15501,"line_start":443,"line_end":443,"column_start":1,"column_end":79}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20893,"byte_end":20909,"line_start":30,"line_end":30,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21027,"byte_end":21043,"line_start":36,"line_end":36,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21158,"byte_end":21174,"line_start":42,"line_end":42,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26264,"byte_end":26269,"line_start":201,"line_end":201,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26387,"byte_end":26392,"line_start":207,"line_end":207,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26433,"byte_end":26438,"line_start":209,"line_end":209,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26545,"byte_end":26550,"line_start":215,"line_end":215,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26978,"byte_end":26984,"line_start":232,"line_end":232,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27100,"byte_end":27106,"line_start":238,"line_end":238,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27144,"byte_end":27150,"line_start":240,"line_end":240,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27247,"byte_end":27253,"line_start":246,"line_end":246,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36437,"byte_end":36452,"line_start":42,"line_end":42,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36475,"byte_end":36490,"line_start":43,"line_end":43,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36801,"byte_end":36816,"line_start":52,"line_end":52,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36932,"byte_end":36947,"line_start":57,"line_end":57,"column_start":14,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39389,"byte_end":39409,"line_start":140,"line_end":140,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39501,"byte_end":39521,"line_start":146,"line_end":146,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":45850,"byte_end":45870,"line_start":356,"line_end":356,"column_start":55,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74221,"byte_end":74233,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":335},{"krate":0,"index":344},{"krate":0,"index":353},{"krate":0,"index":362},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":84000,"byte_end":84007,"line_start":370,"line_end":370,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":97070,"byte_end":97077,"line_start":739,"line_end":739,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":151346,"byte_end":151353,"line_start":13,"line_end":13,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":152708,"byte_end":152715,"line_start":60,"line_end":60,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":152925,"byte_end":152932,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":555},{"krate":0,"index":559},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157702,"byte_end":157714,"line_start":16,"line_end":16,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157890,"byte_end":157902,"line_start":25,"line_end":25,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":655},{"krate":0,"index":663},{"krate":0,"index":679},{"krate":0,"index":685},{"krate":0,"index":693},{"krate":0,"index":701},{"krate":0,"index":709},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":167892,"byte_end":167895,"line_start":373,"line_end":373,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168118,"byte_end":168121,"line_start":382,"line_end":382,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":179448,"byte_end":179453,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187965,"byte_end":187971,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":858},{"krate":0,"index":864},{"krate":0,"index":870},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35259,"byte_end":35265,"line_start":26,"line_end":26,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":230130,"byte_end":230145,"line_start":55,"line_end":55,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1036},{"krate":0,"index":1040},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/prover.rs","byte_start":245971,"byte_end":245988,"line_start":73,"line_end":73,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1175},{"krate":0,"index":1179},{"krate":0,"index":1185},{"krate":0,"index":1188},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257907,"byte_end":257911,"line_start":47,"line_end":47,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258096,"byte_end":258100,"line_start":53,"line_end":53,"column_start":59,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258234,"byte_end":258238,"line_start":59,"line_end":59,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258950,"byte_end":258958,"line_start":79,"line_end":79,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259060,"byte_end":259068,"line_start":85,"line_end":85,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":263201,"byte_end":263212,"line_start":200,"line_end":200,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211479,"byte_end":211484,"line_start":33,"line_end":33,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211624,"byte_end":211629,"line_start":39,"line_end":39,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214787,"byte_end":214799,"line_start":131,"line_end":131,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":215177,"byte_end":215189,"line_start":143,"line_end":143,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218936,"byte_end":218946,"line_start":247,"line_end":247,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":219223,"byte_end":219233,"line_start":258,"line_end":258,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1371},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267280,"byte_end":267286,"line_start":24,"line_end":24,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270111,"byte_end":270117,"line_start":98,"line_end":98,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":274359,"byte_end":274360,"line_start":43,"line_end":43,"column_start":33,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275711,"byte_end":275722,"line_start":99,"line_end":99,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276337,"byte_end":276351,"line_start":133,"line_end":133,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1542}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276415,"byte_end":276429,"line_start":139,"line_end":139,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277026,"byte_end":277034,"line_start":172,"line_end":172,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277313,"byte_end":277321,"line_start":184,"line_end":184,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277412,"byte_end":277420,"line_start":190,"line_end":190,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6265,"byte_end":6273,"line_start":168,"line_end":168,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7140,"byte_end":7157,"line_start":195,"line_end":195,"column_start":58,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7266,"byte_end":7283,"line_start":201,"line_end":201,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7439,"byte_end":7456,"line_start":207,"line_end":207,"column_start":54,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1632},{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7710,"byte_end":7727,"line_start":217,"line_end":217,"column_start":54,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1636},{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8001,"byte_end":8018,"line_start":226,"line_end":226,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8230,"byte_end":8247,"line_start":234,"line_end":234,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8484,"byte_end":8501,"line_start":242,"line_end":242,"column_start":69,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8815,"byte_end":8832,"line_start":254,"line_end":254,"column_start":69,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":9160,"byte_end":9177,"line_start":267,"line_end":267,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":9614,"byte_end":9631,"line_start":286,"line_end":286,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1664},{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10831,"byte_end":10845,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10953,"byte_end":10967,"line_start":330,"line_end":330,"column_start":16,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10994,"byte_end":11008,"line_start":332,"line_end":332,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12192,"byte_end":12209,"line_start":363,"line_end":363,"column_start":16,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12236,"byte_end":12253,"line_start":365,"line_end":365,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15716,"byte_end":15725,"line_start":450,"line_end":450,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1717},{"krate":0,"index":1721},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":17416,"byte_end":17425,"line_start":508,"line_end":508,"column_start":69,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5430,"byte_end":5436,"line_start":140,"line_end":140,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5446,"byte_end":5453,"line_start":141,"line_end":141,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34739,"byte_end":34743,"line_start":3,"line_end":3,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":114}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34754,"byte_end":34761,"line_start":5,"line_end":5,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":227}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34771,"byte_end":34778,"line_start":6,"line_end":6,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":299}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34788,"byte_end":34794,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":451}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34804,"byte_end":34811,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":507}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34821,"byte_end":34830,"line_start":9,"line_end":9,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":570}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34840,"byte_end":34843,"line_start":10,"line_end":10,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":607}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34853,"byte_end":34859,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":738}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":34869,"byte_end":34875,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":813}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5491,"byte_end":5498,"line_start":143,"line_end":143,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":891}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier.rs","byte_start":254551,"byte_end":254556,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1243}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5508,"byte_end":5517,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1406}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":5527,"byte_end":5535,"line_start":145,"line_end":145,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1458}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":20893,"byte_end":20909,"line_start":30,"line_end":30,"column_start":49,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21027,"byte_end":21043,"line_start":36,"line_end":36,"column_start":49,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":21158,"byte_end":21174,"line_start":42,"line_end":42,"column_start":34,"column_end":50},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25965,"byte_end":25970,"line_start":192,"line_end":192,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25973,"byte_end":25977,"line_start":192,"line_end":192,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25980,"byte_end":25985,"line_start":192,"line_end":192,"column_start":53,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25988,"byte_end":25992,"line_start":192,"line_end":192,"column_start":61,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":25995,"byte_end":25999,"line_start":192,"line_end":192,"column_start":68,"column_end":72},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26264,"byte_end":26269,"line_start":201,"line_end":201,"column_start":38,"column_end":43},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26387,"byte_end":26392,"line_start":207,"line_end":207,"column_start":33,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26433,"byte_end":26438,"line_start":209,"line_end":209,"column_start":34,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26545,"byte_end":26550,"line_start":215,"line_end":215,"column_start":45,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":63},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":26978,"byte_end":26984,"line_start":232,"line_end":232,"column_start":35,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":81},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27100,"byte_end":27106,"line_start":238,"line_end":238,"column_start":30,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":81},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27144,"byte_end":27150,"line_start":240,"line_end":240,"column_start":31,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":81},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/domain.rs","byte_start":27247,"byte_end":27253,"line_start":246,"line_end":246,"column_start":34,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":81},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36437,"byte_end":36452,"line_start":42,"line_end":42,"column_start":13,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36475,"byte_end":36490,"line_start":43,"line_end":43,"column_start":20,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36801,"byte_end":36816,"line_start":52,"line_end":52,"column_start":21,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":36932,"byte_end":36947,"line_start":57,"line_end":57,"column_start":14,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39389,"byte_end":39409,"line_start":140,"line_end":140,"column_start":38,"column_end":58},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":39501,"byte_end":39521,"line_start":146,"line_end":146,"column_start":26,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/test/mod.rs","byte_start":45850,"byte_end":45870,"line_start":356,"line_end":356,"column_start":55,"column_end":75},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":162},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":74221,"byte_end":74233,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":84000,"byte_end":84007,"line_start":370,"line_end":370,"column_start":6,"column_end":13},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/boolean.rs","byte_start":97070,"byte_end":97077,"line_start":739,"line_end":739,"column_start":29,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1784},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":151346,"byte_end":151353,"line_start":13,"line_end":13,"column_start":56,"column_end":63},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":152708,"byte_end":152715,"line_start":60,"line_end":60,"column_start":65,"column_end":72},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":524},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/multieq.rs","byte_start":152925,"byte_end":152932,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":524},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157702,"byte_end":157714,"line_start":16,"line_end":16,"column_start":36,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":641},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":157890,"byte_end":157902,"line_start":25,"line_end":25,"column_start":26,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":167892,"byte_end":167895,"line_start":373,"line_end":373,"column_start":57,"column_end":60},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":725},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/num.rs","byte_start":168118,"byte_end":168121,"line_start":382,"line_end":382,"column_start":26,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/sha256.rs","byte_start":179448,"byte_end":179453,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets/uint32.rs","byte_start":187965,"byte_end":187971,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/gadgets.rs","byte_start":35259,"byte_end":35265,"line_start":26,"line_end":26,"column_start":27,"column_end":33},"kind":{"Impl":{"id":30}},"from":{"krate":2,"index":46286},"to":{"krate":0,"index":885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/generator.rs","byte_start":230130,"byte_end":230145,"line_start":55,"line_end":55,"column_start":55,"column_end":70},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1018},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/prover.rs","byte_start":245971,"byte_end":245988,"line_start":73,"line_end":73,"column_start":45,"column_end":62},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":257907,"byte_end":257911,"line_start":47,"line_end":47,"column_start":58,"column_end":62},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1801},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258096,"byte_end":258100,"line_start":53,"line_end":53,"column_start":59,"column_end":63},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1801},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258234,"byte_end":258238,"line_start":59,"line_end":59,"column_start":26,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":258950,"byte_end":258958,"line_start":79,"line_end":79,"column_start":38,"column_end":46},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1811},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":259060,"byte_end":259068,"line_start":85,"line_end":85,"column_start":26,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/verifier/batch.rs","byte_start":263201,"byte_end":263212,"line_start":200,"line_end":200,"column_start":34,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211479,"byte_end":211484,"line_start":33,"line_end":33,"column_start":31,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":211624,"byte_end":211629,"line_start":39,"line_end":39,"column_start":17,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":214787,"byte_end":214799,"line_start":131,"line_end":131,"column_start":31,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1828},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":215177,"byte_end":215189,"line_start":143,"line_end":143,"column_start":17,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":218936,"byte_end":218946,"line_start":247,"line_end":247,"column_start":31,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1840},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/groth16/mod.rs","byte_start":219223,"byte_end":219233,"line_start":258,"line_end":258,"column_start":17,"column_end":27},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":267280,"byte_end":267286,"line_start":24,"line_end":24,"column_start":10,"column_end":16},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multicore.rs","byte_start":270111,"byte_end":270117,"line_start":98,"line_end":98,"column_start":13,"column_end":19},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273565,"byte_end":273569,"line_start":19,"line_end":19,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":1502}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273572,"byte_end":273576,"line_start":19,"line_end":19,"column_start":54,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":1502}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273589,"byte_end":273594,"line_start":19,"line_end":19,"column_start":71,"column_end":76},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":1502}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":273973,"byte_end":273983,"line_start":33,"line_end":33,"column_start":32,"column_end":42},"kind":"SuperTrait","from":{"krate":31,"index":134},"to":{"krate":0,"index":1510}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":274359,"byte_end":274360,"line_start":43,"line_end":43,"column_start":33,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1514},"to":{"krate":0,"index":1510}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":275711,"byte_end":275722,"line_start":99,"line_end":99,"column_start":29,"column_end":40},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1867},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276337,"byte_end":276351,"line_start":133,"line_end":133,"column_start":18,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1534},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":276415,"byte_end":276429,"line_start":139,"line_end":139,"column_start":6,"column_end":20},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277026,"byte_end":277034,"line_start":172,"line_end":172,"column_start":38,"column_end":46},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1556},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277313,"byte_end":277321,"line_start":184,"line_end":184,"column_start":37,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1556},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/multiexp.rs","byte_start":277412,"byte_end":277420,"line_start":190,"line_end":190,"column_start":25,"column_end":33},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":6265,"byte_end":6273,"line_start":168,"line_end":168,"column_start":6,"column_end":14},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7140,"byte_end":7157,"line_start":195,"line_end":195,"column_start":58,"column_end":75},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7266,"byte_end":7283,"line_start":201,"line_end":201,"column_start":26,"column_end":43},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7439,"byte_end":7456,"line_start":207,"line_end":207,"column_start":54,"column_end":71},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3125}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":7710,"byte_end":7727,"line_start":217,"line_end":217,"column_start":54,"column_end":71},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8001,"byte_end":8018,"line_start":226,"line_end":226,"column_start":44,"column_end":61},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3125}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8230,"byte_end":8247,"line_start":234,"line_end":234,"column_start":44,"column_end":61},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8484,"byte_end":8501,"line_start":242,"line_end":242,"column_start":69,"column_end":86},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3125}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":8815,"byte_end":8832,"line_start":254,"line_end":254,"column_start":69,"column_end":86},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":9160,"byte_end":9177,"line_start":267,"line_end":267,"column_start":9,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3125}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":9614,"byte_end":9631,"line_start":286,"line_end":286,"column_start":9,"column_end":26},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":3130}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10831,"byte_end":10845,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1902},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10953,"byte_end":10967,"line_start":330,"line_end":330,"column_start":16,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1902},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":10994,"byte_end":11008,"line_start":332,"line_end":332,"column_start":23,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1902},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12192,"byte_end":12209,"line_start":363,"line_end":363,"column_start":16,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1920},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12236,"byte_end":12253,"line_start":365,"line_end":365,"column_start":23,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1920},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":12730,"byte_end":12735,"line_start":377,"line_end":377,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":15716,"byte_end":15725,"line_start":450,"line_end":450,"column_start":9,"column_end":18},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1700},"to":{"krate":0,"index":1674}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bellman-0.13.1/src/lib.rs","byte_start":17416,"byte_end":17425,"line_start":508,"line_end":508,"column_start":69,"column_end":78},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":3300}}]}