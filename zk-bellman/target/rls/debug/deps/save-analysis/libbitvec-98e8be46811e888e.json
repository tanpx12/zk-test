{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1","program":"/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitvec","--edition=2021","/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"atomic\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=98e8be46811e888e","-C","extra-filename=-98e8be46811e888e","--out-dir","/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps","-L","dependency=/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps","--extern","funty=/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps/libfunty-0e30c90f12833bb5.rmeta","--extern","radium=/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps/libradium-c1338c2e6380a43b.rmeta","--extern","tap=/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps/libtap-f49e81b6ea3702a5.rmeta","--extern","wyz=/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps/libwyz-d8233747325634fa.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tanpx/Desktop/rust-playground/main/target/rls/debug/deps/libbitvec-98e8be46811e888e.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[15961701678275193747,0]},"crate_root":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src","external_crates":[{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/devel.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","num":20,"id":{"name":"funty","disambiguator":[15770065805564930555,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","num":21,"id":{"name":"radium","disambiguator":[7311690213042413157,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","num":22,"id":{"name":"tap","disambiguator":[15141533886974157350,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","num":23,"id":{"name":"wyz","disambiguator":[10016541334912243662,0]}}],"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":0,"byte_end":1196,"line_start":1,"line_end":77,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":16332,"byte_end":16336,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"alias_span":null,"name":"core","value":"","parent":{"krate":0,"index":34}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":16362,"byte_end":16367,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"alias_span":null,"name":"funty","value":"","parent":{"krate":0,"index":34}},{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":28058,"byte_end":28073,"line_start":414,"line_end":414,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":34}},{"kind":"Use","ref_id":{"krate":0,"index":5413},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60064,"byte_end":60072,"line_start":21,"line_end":21,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":97}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84356,"byte_end":84364,"line_start":39,"line_end":39,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":554}},{"kind":"Use","ref_id":{"krate":0,"index":5821},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216028,"byte_end":216032,"line_start":226,"line_end":226,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1824}},{"kind":"Use","ref_id":{"krate":0,"index":5822},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216028,"byte_end":216032,"line_start":226,"line_end":226,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1824}},{"kind":"Use","ref_id":{"krate":23,"index":440},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223318,"byte_end":223323,"line_start":25,"line_end":25,"column_start":2,"column_end":7},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":23,"index":441},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223318,"byte_end":223323,"line_start":25,"line_end":25,"column_start":2,"column_end":7},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":23,"index":462},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223326,"byte_end":223329,"line_start":26,"line_end":26,"column_start":2,"column_end":5},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":23,"index":463},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223326,"byte_end":223329,"line_start":26,"line_end":26,"column_start":2,"column_end":5},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":23,"index":83},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223332,"byte_end":223342,"line_start":27,"line_end":27,"column_start":2,"column_end":12},"alias_span":null,"name":"Mutability","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":1962},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223436,"byte_end":223451,"line_start":36,"line_end":36,"column_start":3,"column_end":18},"alias_span":null,"name":"check_alignment","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":5865},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223455,"byte_end":223468,"line_start":37,"line_end":37,"column_start":3,"column_end":16},"alias_span":null,"name":"MisalignError","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":2080},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223482,"byte_end":223488,"line_start":39,"line_end":39,"column_start":9,"column_end":15},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223498,"byte_end":223509,"line_start":40,"line_end":40,"column_start":9,"column_end":20},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":2487},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223524,"byte_end":223530,"line_start":42,"line_end":42,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":5897},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223534,"byte_end":223545,"line_start":43,"line_end":43,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrError","value":"","parent":{"krate":0,"index":1887}},{"kind":"Use","ref_id":{"krate":0,"index":5934},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223558,"byte_end":223570,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"alias_span":null,"name":"BitSpanError","value":"","parent":{"krate":0,"index":1887}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":324075,"byte_end":324076,"line_start":54,"line_end":54,"column_start":7,"column_end":8},"alias_span":null,"name":"*","value":"BitSliceIndex","parent":{"krate":0,"index":3018}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":324085,"byte_end":324086,"line_start":55,"line_end":55,"column_start":8,"column_end":9},"alias_span":null,"name":"*","value":"RSplitN, RChunksMut, RChunks, ChunksMut, Chunks, Windows, SplitMut, Split, RSplitMut, RChunksExactMut, IterMut, ChunksExactMut, IterOnes, SplitNMut, SplitInclusiveMut, RSplitNMut, RSplit, RChunksExact, Iter, ChunksExact, IterZeros, SplitN, SplitInclusive","parent":{"krate":0,"index":3018}},{"kind":"Use","ref_id":{"krate":0,"index":4681},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570357,"byte_end":570362,"line_start":23,"line_end":23,"column_start":2,"column_end":7},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":4325}},{"kind":"Use","ref_id":{"krate":0,"index":7854},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570365,"byte_end":570371,"line_start":24,"line_end":24,"column_start":2,"column_end":8},"alias_span":null,"name":"Splice","value":"","parent":{"krate":0,"index":4325}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570398,"byte_end":570406,"line_start":26,"line_end":26,"column_start":23,"column_end":31},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":4325}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":798,"byte_end":806,"line_start":45,"line_end":45,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":53},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":810,"byte_end":816,"line_start":46,"line_end":46,"column_start":3,"column_end":9},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":820,"byte_end":824,"line_start":47,"line_end":47,"column_start":3,"column_end":7},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":1849},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":864,"byte_end":872,"line_start":50,"line_end":50,"column_start":4,"column_end":12},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5821},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":877,"byte_end":886,"line_start":51,"line_end":51,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5822},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":877,"byte_end":886,"line_start":51,"line_end":51,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5821},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":891,"byte_end":895,"line_start":52,"line_end":52,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5822},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":891,"byte_end":895,"line_start":52,"line_end":52,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5843},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":900,"byte_end":904,"line_start":53,"line_end":53,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5844},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":900,"byte_end":904,"line_start":53,"line_end":53,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":2487},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":923,"byte_end":929,"line_start":56,"line_end":56,"column_start":4,"column_end":10},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":934,"byte_end":945,"line_start":57,"line_end":57,"column_start":4,"column_end":15},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":2080},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":950,"byte_end":956,"line_start":58,"line_end":58,"column_start":4,"column_end":10},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":4157},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":972,"byte_end":980,"line_start":60,"line_end":60,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":4308},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":991,"byte_end":999,"line_start":61,"line_end":61,"column_start":10,"column_end":18},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5260},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1014,"byte_end":1020,"line_start":63,"line_end":63,"column_start":4,"column_end":10},"alias_span":null,"name":"AsBits","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5266},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1025,"byte_end":1034,"line_start":64,"line_end":64,"column_start":4,"column_end":13},"alias_span":null,"name":"AsMutBits","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1082,"byte_end":1088,"line_start":68,"line_end":68,"column_start":3,"column_end":9},"alias_span":null,"name":"BitArr","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":56},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1141,"byte_end":1147,"line_start":72,"line_end":72,"column_start":3,"column_end":9},"alias_span":null,"name":"bitbox","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1151,"byte_end":1157,"line_start":73,"line_end":73,"column_start":3,"column_end":9},"alias_span":null,"name":"bitvec","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1168,"byte_end":1174,"line_start":74,"line_end":74,"column_start":10,"column_end":16},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":5286}},{"kind":"Use","ref_id":{"krate":0,"index":5125},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":1183,"byte_end":1189,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":5286}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":0,"byte_end":1196,"line_start":1,"line_end":77,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":33},{"krate":0,"index":57},{"krate":0,"index":97},{"krate":0,"index":554},{"krate":0,"index":1110},{"krate":0,"index":1397},{"krate":0,"index":1606},{"krate":0,"index":1793},{"krate":0,"index":1824},{"krate":0,"index":1887},{"krate":0,"index":3018},{"krate":0,"index":4282},{"krate":0,"index":4325},{"krate":0,"index":5176},{"krate":0,"index":5286}],"decl_id":null,"docs":"<div style=\"text-align: center;\" align=\"center\">","sig":null,"attributes":[{"value":"warn(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":115,"byte_end":172,"line_start":5,"line_end":5,"column_start":2,"column_end":59}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":275,"byte_end":308,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"allow(clippy :: declare_interior_mutable_const, clippy :: type_complexity,\nunknown_lints)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":309,"byte_end":403,"line_start":12,"line_end":16,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":"# Constructor Macros","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":477,"byte_end":489,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"allow(deprecated)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros.rs","byte_start":3596,"byte_end":3617,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":"# Internal Macro Implementations","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros.rs","byte_start":3662,"byte_end":3674,"line_start":4,"line_end":4,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27211,"byte_end":27226,"line_start":365,"line_end":365,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `u8` from bits applied in `Lsb0` order (`a` low, `h` high).\n","sig":null,"attributes":[{"value":"/ Constructs a `u8` from bits applied in `Lsb0` order (`a` low, `h` high).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27057,"byte_end":27133,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27149,"byte_end":27166,"line_start":363,"line_end":363,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27167,"byte_end":27197,"line_start":364,"line_end":364,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27633,"byte_end":27648,"line_start":389,"line_end":389,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `u8` from bits applied in `Msb0` order (`a` high, `h` low).\n","sig":null,"attributes":[{"value":"/ Constructs a `u8` from bits applied in `Msb0` order (`a` high, `h` low).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27479,"byte_end":27555,"line_start":385,"line_end":385,"column_start":1,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27571,"byte_end":27588,"line_start":387,"line_end":387,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros/internal.rs","byte_start":27589,"byte_end":27619,"line_start":388,"line_end":388,"column_start":1,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"access","qualname":"::access","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":96},{"krate":0,"index":5379},{"krate":0,"index":5381},{"krate":0,"index":5358},{"krate":0,"index":5360},{"krate":0,"index":5383},{"krate":0,"index":5385},{"krate":0,"index":5365},{"krate":0,"index":5367},{"krate":0,"index":5387},{"krate":0,"index":5389},{"krate":0,"index":5372},{"krate":0,"index":5374},{"krate":0,"index":5398},{"krate":0,"index":5400},{"krate":0,"index":5391},{"krate":0,"index":5393},{"krate":0,"index":5409},{"krate":0,"index":5411},{"krate":0,"index":5402},{"krate":0,"index":5404}],"decl_id":null,"docs":"# Memory Bus Access Management","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":81},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52189,"byte_end":52198,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"BitAccess","qualname":"::access::BitAccess","value":"BitAccess: Radium","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87}],"decl_id":null,"docs":"# Bit-Level Access Instructions","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53152,"byte_end":53162,"line_start":47,"line_end":47,"column_start":5,"column_end":15},"name":"clear_bits","qualname":"::access::BitAccess::clear_bits","value":"pub fn clear_bits(&Self, BitMask<Self::Item>) -> Self::Item","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Clears bits within a memory element to `0`.","sig":null,"attributes":[{"value":"/ Clears bits within a memory element to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52252,"byte_end":52299,"line_start":21,"line_end":21,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52301,"byte_end":52304,"line_start":22,"line_end":22,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52306,"byte_end":52380,"line_start":23,"line_end":23,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52382,"byte_end":52457,"line_start":24,"line_end":24,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52459,"byte_end":52521,"line_start":25,"line_end":25,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52523,"byte_end":52526,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52528,"byte_end":52545,"line_start":27,"line_end":27,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52547,"byte_end":52550,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52552,"byte_end":52625,"line_start":29,"line_end":29,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will set the corresponding bit in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52627,"byte_end":52703,"line_start":30,"line_end":30,"column_start":2,"column_end":78}},{"value":"/   `*self` to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52705,"byte_end":52726,"line_start":31,"line_end":31,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52728,"byte_end":52731,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52733,"byte_end":52747,"line_start":33,"line_end":33,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52749,"byte_end":52752,"line_start":34,"line_end":34,"column_start":2,"column_end":5}},{"value":"/ The prior value of the memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52754,"byte_end":52796,"line_start":35,"line_end":35,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52798,"byte_end":52801,"line_start":36,"line_end":36,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52803,"byte_end":52817,"line_start":37,"line_end":37,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52819,"byte_end":52822,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` corresponding to `1` bits in the `mask` are cleared","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52824,"byte_end":52899,"line_start":39,"line_end":39,"column_start":2,"column_end":77}},{"value":"/ to `0`; all others retain their original value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52901,"byte_end":52952,"line_start":40,"line_end":40,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52954,"byte_end":52957,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Do not invert the `mask` prior to calling this function. [`BitMask`] is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52959,"byte_end":53034,"line_start":42,"line_end":42,"column_start":2,"column_end":77}},{"value":"/ a selection type, not a bitwise-operation argument.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53036,"byte_end":53091,"line_start":43,"line_end":43,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53093,"byte_end":53096,"line_start":44,"line_end":44,"column_start":2,"column_end":5}},{"value":"/ [`BitMask`]: crate::index::BitMask","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53098,"byte_end":53136,"line_start":45,"line_end":45,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53138,"byte_end":53147,"line_start":46,"line_end":46,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53984,"byte_end":53992,"line_start":72,"line_end":72,"column_start":5,"column_end":13},"name":"set_bits","qualname":"::access::BitAccess::set_bits","value":"pub fn set_bits(&Self, BitMask<Self::Item>) -> Self::Item","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Sets bits within a memory element to `1`.","sig":null,"attributes":[{"value":"/ Sets bits within a memory element to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53274,"byte_end":53319,"line_start":51,"line_end":51,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53321,"byte_end":53324,"line_start":52,"line_end":52,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53326,"byte_end":53400,"line_start":53,"line_end":53,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53402,"byte_end":53477,"line_start":54,"line_end":54,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53479,"byte_end":53541,"line_start":55,"line_end":55,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53543,"byte_end":53546,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53548,"byte_end":53565,"line_start":57,"line_end":57,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53567,"byte_end":53570,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53572,"byte_end":53645,"line_start":59,"line_end":59,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will set the corresponding bit in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53647,"byte_end":53723,"line_start":60,"line_end":60,"column_start":2,"column_end":78}},{"value":"/   `*self` to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53725,"byte_end":53746,"line_start":61,"line_end":61,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53748,"byte_end":53751,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53753,"byte_end":53767,"line_start":63,"line_end":63,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53769,"byte_end":53772,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ The prior value of the memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53774,"byte_end":53816,"line_start":65,"line_end":65,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53818,"byte_end":53821,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53823,"byte_end":53837,"line_start":67,"line_end":67,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53839,"byte_end":53842,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` corresponding to `1` bits in the `mask` are set to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53844,"byte_end":53918,"line_start":69,"line_end":69,"column_start":2,"column_end":76}},{"value":"/ `1`; all others retain their original value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53920,"byte_end":53968,"line_start":70,"line_end":70,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":53970,"byte_end":53979,"line_start":71,"line_end":71,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54802,"byte_end":54813,"line_start":97,"line_end":97,"column_start":5,"column_end":16},"name":"invert_bits","qualname":"::access::BitAccess::invert_bits","value":"pub fn invert_bits(&Self, BitMask<Self::Item>) -> Self::Item","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Inverts bits within a memory element.","sig":null,"attributes":[{"value":"/ Inverts bits within a memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54102,"byte_end":54143,"line_start":76,"line_end":76,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54145,"byte_end":54148,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54150,"byte_end":54224,"line_start":78,"line_end":78,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54226,"byte_end":54301,"line_start":79,"line_end":79,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54303,"byte_end":54365,"line_start":80,"line_end":80,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54367,"byte_end":54370,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54372,"byte_end":54389,"line_start":82,"line_end":82,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54391,"byte_end":54394,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54396,"byte_end":54469,"line_start":84,"line_end":84,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will invert the corresponding bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54471,"byte_end":54547,"line_start":85,"line_end":85,"column_start":2,"column_end":78}},{"value":"/   in `*self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54549,"byte_end":54566,"line_start":86,"line_end":86,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54568,"byte_end":54571,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54573,"byte_end":54587,"line_start":88,"line_end":88,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54589,"byte_end":54592,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ The prior value of the memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54594,"byte_end":54636,"line_start":90,"line_end":90,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54638,"byte_end":54641,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54643,"byte_end":54657,"line_start":92,"line_end":92,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54659,"byte_end":54662,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` corresponding to `1` bits in the `mask` are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54664,"byte_end":54731,"line_start":94,"line_end":94,"column_start":2,"column_end":69}},{"value":"/ inverted; all others retain their original value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54733,"byte_end":54786,"line_start":95,"line_end":95,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54788,"byte_end":54797,"line_start":96,"line_end":96,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55756,"byte_end":55765,"line_start":126,"line_end":126,"column_start":5,"column_end":14},"name":"write_bit","qualname":"::access::BitAccess::write_bit","value":"pub fn write_bit<O>(&Self, BitIdx<Self::Item>, bool) -> bool where O: BitOrder","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Writes a value to one bit in a memory element, returning the previous\n value.","sig":null,"attributes":[{"value":"/ Writes a value to one bit in a memory element, returning the previous","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54924,"byte_end":54997,"line_start":101,"line_end":101,"column_start":2,"column_end":75}},{"value":"/ value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":54999,"byte_end":55009,"line_start":102,"line_end":102,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55011,"byte_end":55014,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ ## Type Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55016,"byte_end":55038,"line_start":104,"line_end":104,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55040,"byte_end":55043,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ - `O`: An ordering of bits in a memory element that translates the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55045,"byte_end":55115,"line_start":106,"line_end":106,"column_start":2,"column_end":72}},{"value":"/   `index` into a real position.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55117,"byte_end":55152,"line_start":107,"line_end":107,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55154,"byte_end":55157,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55159,"byte_end":55176,"line_start":109,"line_end":109,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55178,"byte_end":55181,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of the bit in `*self` to modify.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55183,"byte_end":55249,"line_start":111,"line_end":111,"column_start":2,"column_end":68}},{"value":"/ - `value`: The new bit value to write into `*self` at the `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55251,"byte_end":55321,"line_start":112,"line_end":112,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55323,"byte_end":55326,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55328,"byte_end":55342,"line_start":114,"line_end":114,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55344,"byte_end":55347,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ The bit previously stored in `*self` at `index`. These operations are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55349,"byte_end":55422,"line_start":116,"line_end":116,"column_start":2,"column_end":75}},{"value":"/ required to load the `*self` value from memory in order to operate, and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55424,"byte_end":55499,"line_start":117,"line_end":117,"column_start":2,"column_end":77}},{"value":"/ so always have the prior value available for use. This can reduce","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55501,"byte_end":55570,"line_start":118,"line_end":118,"column_start":2,"column_end":71}},{"value":"/ spurious loads throughout the crate.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55572,"byte_end":55612,"line_start":119,"line_end":119,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55614,"byte_end":55617,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55619,"byte_end":55633,"line_start":121,"line_end":121,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55635,"byte_end":55638,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ `*self` is updated with the bit at `index` set to `value`; all other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55640,"byte_end":55712,"line_start":123,"line_end":123,"column_start":2,"column_end":74}},{"value":"/ bits remain unchanged.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55714,"byte_end":55740,"line_start":124,"line_end":124,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":55742,"byte_end":55751,"line_start":125,"line_end":125,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56717,"byte_end":56728,"line_start":156,"line_end":156,"column_start":5,"column_end":16},"name":"get_writers","qualname":"::access::BitAccess::get_writers","value":"pub fn get_writers(bool)\n-> for<'a> fn(: &'a Self, : BitMask<Self::Item>) -> Self::Item","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Gets the function that will write `value` into all bits under a mask.","sig":null,"attributes":[{"value":"/ Gets the function that will write `value` into all bits under a mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56058,"byte_end":56131,"line_start":138,"line_end":138,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56133,"byte_end":56136,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This is useful for preparing bulk operations that all write the same","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56138,"byte_end":56210,"line_start":140,"line_end":140,"column_start":2,"column_end":74}},{"value":"/ data into memory, and only need to provide the shape of memory to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56212,"byte_end":56288,"line_start":141,"line_end":141,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56290,"byte_end":56293,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56295,"byte_end":56312,"line_start":143,"line_end":143,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56314,"byte_end":56317,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ - `value`: The bit that will be written by the returned function.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56319,"byte_end":56388,"line_start":145,"line_end":145,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56390,"byte_end":56393,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56395,"byte_end":56409,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56411,"byte_end":56414,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ A function which writes `value` into memory at a given address and under","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56416,"byte_end":56492,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/ a given mask. If `value` is `false`, then this produces [`clear_bits`];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56494,"byte_end":56569,"line_start":150,"line_end":150,"column_start":2,"column_end":77}},{"value":"/ if it is `true`, then this produces [`set_bits`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56571,"byte_end":56624,"line_start":151,"line_end":151,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56626,"byte_end":56629,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ [`clear_bits`]: Self::clear_bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56631,"byte_end":56667,"line_start":153,"line_end":153,"column_start":2,"column_end":38}},{"value":"/ [`set_bits`]: Self::set_bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56669,"byte_end":56701,"line_start":154,"line_end":154,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56703,"byte_end":56712,"line_start":155,"line_end":155,"column_start":2,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57013,"byte_end":57020,"line_start":176,"line_end":176,"column_start":11,"column_end":18},"name":"BitSafe","qualname":"::access::BitSafe","value":"BitSafe","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":"# Read-Only Semivolatile Handle","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57214,"byte_end":57217,"line_start":181,"line_end":181,"column_start":7,"column_end":10},"name":"Mem","qualname":"::access::BitSafe::Mem","value":"type Mem: BitRegister;","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" The element type being guarded against improper mutation.","sig":null,"attributes":[{"value":"/ The element type being guarded against improper mutation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57024,"byte_end":57085,"line_start":177,"line_end":177,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57087,"byte_end":57090,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ This is only present as an extra proof that the type graph has a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57092,"byte_end":57160,"line_start":179,"line_end":179,"column_start":2,"column_end":70}},{"value":"/ consistent view of the underlying memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57162,"byte_end":57207,"line_start":180,"line_end":180,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":93},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57425,"byte_end":57428,"line_start":187,"line_end":187,"column_start":7,"column_end":10},"name":"Rad","qualname":"::access::BitSafe::Rad","value":"type Rad: Radium<Item = Self::Mem>;","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" The memory-access type this guards.","sig":null,"attributes":[{"value":"/ The memory-access type this guards.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57234,"byte_end":57273,"line_start":183,"line_end":183,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57275,"byte_end":57278,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ This is exposed as an associated type so that `BitStore` can name it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57280,"byte_end":57352,"line_start":185,"line_end":185,"column_start":2,"column_end":74}},{"value":"/ without having to re-select it based on crate configuration.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57354,"byte_end":57418,"line_start":186,"line_end":186,"column_start":2,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57488,"byte_end":57492,"line_start":190,"line_end":190,"column_start":8,"column_end":12},"name":"ZERO","qualname":"::access::BitSafe::ZERO","value":"Self","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" The zero constant.\n","sig":null,"attributes":[{"value":"/ The zero constant.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57458,"byte_end":57480,"line_start":189,"line_end":189,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57622,"byte_end":57626,"line_start":194,"line_end":194,"column_start":5,"column_end":9},"name":"load","qualname":"::access::BitSafe::load","value":"pub fn load(&Self) -> Self::Mem","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Loads the value from memory, allowing for the possibility that other\n handles have write permissions to it.\n","sig":null,"attributes":[{"value":"/ Loads the value from memory, allowing for the possibility that other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57502,"byte_end":57574,"line_start":192,"line_end":192,"column_start":2,"column_end":74}},{"value":"/ handles have write permissions to it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57576,"byte_end":57617,"line_start":193,"line_end":193,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":5379},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":58677,"byte_end":58686,"line_start":239,"line_end":239,"column_start":8,"column_end":17},"name":"BitSafeU8","qualname":"::access::BitSafeU8","value":"BitSafeU8 {  }","parent":null,"children":[{"krate":0,"index":5380}],"decl_id":null,"docs":"# Read-Only Shared-Mutable Handle","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57825,"byte_end":57845,"line_start":201,"line_end":201,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5383},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":58723,"byte_end":58733,"line_start":240,"line_end":240,"column_start":9,"column_end":19},"name":"BitSafeU16","qualname":"::access::BitSafeU16","value":"BitSafeU16 {  }","parent":null,"children":[{"krate":0,"index":5384}],"decl_id":null,"docs":"# Read-Only Shared-Mutable Handle","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57825,"byte_end":57845,"line_start":201,"line_end":201,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5387},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":58771,"byte_end":58781,"line_start":241,"line_end":241,"column_start":9,"column_end":19},"name":"BitSafeU32","qualname":"::access::BitSafeU32","value":"BitSafeU32 {  }","parent":null,"children":[{"krate":0,"index":5388}],"decl_id":null,"docs":"# Read-Only Shared-Mutable Handle","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57825,"byte_end":57845,"line_start":201,"line_end":201,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5398},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":58863,"byte_end":58873,"line_start":245,"line_end":245,"column_start":14,"column_end":24},"name":"BitSafeU64","qualname":"::access::BitSafeU64","value":"BitSafeU64 {  }","parent":null,"children":[{"krate":0,"index":5399}],"decl_id":null,"docs":"# Read-Only Shared-Mutable Handle","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57825,"byte_end":57845,"line_start":201,"line_end":201,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5409},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":58920,"byte_end":58932,"line_start":247,"line_end":247,"column_start":16,"column_end":28},"name":"BitSafeUsize","qualname":"::access::BitSafeUsize","value":"BitSafeUsize {  }","parent":null,"children":[{"krate":0,"index":5410}],"decl_id":null,"docs":"# Read-Only Shared-Mutable Handle","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":57825,"byte_end":57845,"line_start":201,"line_end":201,"column_start":3,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":97},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":137},{"krate":0,"index":235},{"krate":0,"index":368},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":542}],"decl_id":null,"docs":"# Statically-Allocated, Fixed-Size, Bit Buffer","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63013,"byte_end":63021,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<A, O>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Returns a bit-slice containing the entire bit-array. Equivalent to\n `&a[..]`.","sig":null,"attributes":[{"value":"/ Returns a bit-slice containing the entire bit-array. Equivalent to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62380,"byte_end":62450,"line_start":15,"line_end":15,"column_start":2,"column_end":72}},{"value":"/ `&a[..]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62452,"byte_end":62465,"line_start":16,"line_end":16,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62467,"byte_end":62470,"line_start":17,"line_end":17,"column_start":2,"column_end":5}},{"value":"/ Because `BitArray` can be viewed as a slice of bits or as a slice of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62472,"byte_end":62544,"line_start":18,"line_end":18,"column_start":2,"column_end":74}},{"value":"/ elements with equal ease, you should switch to using [`.as_bitslice()`]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62546,"byte_end":62621,"line_start":19,"line_end":19,"column_start":2,"column_end":77}},{"value":"/ or [`.as_raw_slice()`] to make your choice explicit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62623,"byte_end":62679,"line_start":20,"line_end":20,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62681,"byte_end":62684,"line_start":21,"line_end":21,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62686,"byte_end":62701,"line_start":22,"line_end":22,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62703,"byte_end":62706,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ [`array::as_slice`](https://doc.rust-lang.org/std/primitive.array.html#method.as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62708,"byte_end":62799,"line_start":24,"line_end":24,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62801,"byte_end":62804,"line_start":25,"line_end":25,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62806,"byte_end":62847,"line_start":26,"line_end":26,"column_start":2,"column_end":43}},{"value":"/ [`.as_raw_slice()`]: Self::as_raw_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62849,"byte_end":62892,"line_start":27,"line_end":27,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62894,"byte_end":62903,"line_start":28,"line_end":28,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62905,"byte_end":62935,"line_start":29,"line_end":29,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` or `.as_raw_slice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62937,"byte_end":63004,"line_start":30,"line_end":30,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63773,"byte_end":63785,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<A, O>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable bit-slice containing the entire bit-array. Equivalent\n to `&mut a[..]`.","sig":null,"attributes":[{"value":"/ Returns a mutable bit-slice containing the entire bit-array. Equivalent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63083,"byte_end":63158,"line_start":35,"line_end":35,"column_start":2,"column_end":77}},{"value":"/ to `&mut a[..]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63160,"byte_end":63180,"line_start":36,"line_end":36,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63182,"byte_end":63185,"line_start":37,"line_end":37,"column_start":2,"column_end":5}},{"value":"/ Because `BitArray` can be viewed as a slice of bits or as a slice of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63187,"byte_end":63259,"line_start":38,"line_end":38,"column_start":2,"column_end":74}},{"value":"/ elements with equal ease, you should switch to using","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63261,"byte_end":63317,"line_start":39,"line_end":39,"column_start":2,"column_end":58}},{"value":"/ [`.as_mut_bitslice()`] or [`.as_raw_mut_slice()`] to make your choice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63319,"byte_end":63392,"line_start":40,"line_end":40,"column_start":2,"column_end":75}},{"value":"/ explicit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63394,"byte_end":63407,"line_start":41,"line_end":41,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63409,"byte_end":63412,"line_start":42,"line_end":42,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63414,"byte_end":63429,"line_start":43,"line_end":43,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63431,"byte_end":63434,"line_start":44,"line_end":44,"column_start":2,"column_end":5}},{"value":"/ [`array::as_mut_slice`](https://doc.rust-lang.org/std/primitive.array.html#method.as_mut_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63436,"byte_end":63535,"line_start":45,"line_end":45,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63537,"byte_end":63540,"line_start":46,"line_end":46,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitslice()`]: Self::as_mut_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63542,"byte_end":63591,"line_start":47,"line_end":47,"column_start":2,"column_end":51}},{"value":"/ [`.as_raw_mut_slice()`]: Self::as_raw_mut_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63593,"byte_end":63644,"line_start":48,"line_end":48,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63646,"byte_end":63655,"line_start":49,"line_end":49,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63657,"byte_end":63687,"line_start":50,"line_end":50,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_mut_bitslice()` or `.as_raw_mut_slice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":63689,"byte_end":63764,"line_start":51,"line_end":51,"column_start":2,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5413},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65466,"byte_end":65474,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5416},{"krate":0,"index":5417}],"decl_id":null,"docs":"# Bit-Array Iteration","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66221,"byte_end":66224,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"name":"new","qualname":"<IntoIter<A, O>>::new","value":"pub fn new(BitArray<A, O>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-array into its iterator.","sig":null,"attributes":[{"value":"/ Converts a bit-array into its iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65808,"byte_end":65851,"line_start":92,"line_end":92,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65853,"byte_end":65856,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ The [`.into_iter()`] method on bit-arrays forwards to this. While","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65858,"byte_end":65927,"line_start":94,"line_end":94,"column_start":2,"column_end":71}},{"value":"/ `BitArray` does deref to `&/mut BitSlice`, which also has","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65929,"byte_end":65990,"line_start":95,"line_end":95,"column_start":2,"column_end":63}},{"value":"/ `.into_iter()`, this behavior has always been present alongside","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65992,"byte_end":66059,"line_start":96,"line_end":96,"column_start":2,"column_end":69}},{"value":"/ `BitArray` and there is no legacy forwarding to preserve.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66061,"byte_end":66122,"line_start":97,"line_end":97,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66124,"byte_end":66127,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66129,"byte_end":66144,"line_start":99,"line_end":99,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66146,"byte_end":66149,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::new`](core::array::IntoIter::new)s","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66151,"byte_end":66201,"line_start":101,"line_end":101,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66203,"byte_end":66212,"line_start":102,"line_end":102,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66485,"byte_end":66496,"line_start":116,"line_end":116,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<A, O>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining unyielded bits in the iterator.","sig":null,"attributes":[{"value":"/ Views the remaining unyielded bits in the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66322,"byte_end":66377,"line_start":110,"line_end":110,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66379,"byte_end":66382,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66384,"byte_end":66399,"line_start":112,"line_end":112,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66401,"byte_end":66404,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](core::array::IntoIter::as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66406,"byte_end":66465,"line_start":114,"line_end":114,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66467,"byte_end":66476,"line_start":115,"line_end":115,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66770,"byte_end":66778,"line_start":124,"line_end":124,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<A, O>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66609,"byte_end":66618,"line_start":120,"line_end":120,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66620,"byte_end":66650,"line_start":121,"line_end":121,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66652,"byte_end":66698,"line_start":122,"line_end":122,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66700,"byte_end":66761,"line_start":123,"line_end":123,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67019,"byte_end":67034,"line_start":134,"line_end":134,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<A, O>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Mutably views the remaining unyielded bits in the iterator.","sig":null,"attributes":[{"value":"/ Mutably views the remaining unyielded bits in the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66840,"byte_end":66903,"line_start":128,"line_end":128,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66905,"byte_end":66908,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66910,"byte_end":66925,"line_start":130,"line_end":130,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66927,"byte_end":66930,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](core::array::IntoIter::as_mut_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":66932,"byte_end":66999,"line_start":132,"line_end":132,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67001,"byte_end":67010,"line_start":133,"line_end":133,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67343,"byte_end":67355,"line_start":146,"line_end":146,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<A, O>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67178,"byte_end":67187,"line_start":142,"line_end":142,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67189,"byte_end":67219,"line_start":143,"line_end":143,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice_mut()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67221,"byte_end":67271,"line_start":144,"line_end":144,"column_start":2,"column_end":52}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67273,"byte_end":67334,"line_start":145,"line_end":145,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":5445},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81741,"byte_end":81761,"line_start":300,"line_end":300,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Slice to Bit-Array Conversion Error","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81589,"byte_end":81609,"line_start":297,"line_end":297,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":536},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60157,"byte_end":60165,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray { _ord, data }","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":"# Bit-Precision Array Immediate","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60075,"byte_end":60095,"line_start":23,"line_end":23,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":540},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60293,"byte_end":60297,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"name":"_ord","qualname":"::array::BitArray::_ord","value":"std::marker::PhantomData<O>","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" The ordering of bits within an `A::Store` element.\n","sig":null,"attributes":[{"value":"/ The ordering of bits within an `A::Store` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60233,"byte_end":60287,"line_start":30,"line_end":30,"column_start":2,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":541},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60350,"byte_end":60354,"line_start":33,"line_end":33,"column_start":6,"column_end":10},"name":"data","qualname":"::array::BitArray::data","value":"A","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" The wrapped data buffer.\n","sig":null,"attributes":[{"value":"/ The wrapped data buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60316,"byte_end":60344,"line_start":32,"line_end":32,"column_start":2,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":545},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60491,"byte_end":60495,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::array::BitArray::<A, O>::ZERO","value":"Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" A bit-array with all bits initialized to zero.\n","sig":null,"attributes":[{"value":"/ A bit-array with all bits initialized to zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60429,"byte_end":60479,"line_start":41,"line_end":41,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60816,"byte_end":60819,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<A, O>>::new","value":"pub fn new(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an existing buffer as a bit-array.","sig":null,"attributes":[{"value":"/ Wraps an existing buffer as a bit-array.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60555,"byte_end":60599,"line_start":47,"line_end":47,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60601,"byte_end":60604,"line_start":48,"line_end":48,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60606,"byte_end":60621,"line_start":49,"line_end":49,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60623,"byte_end":60626,"line_start":50,"line_end":50,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60628,"byte_end":60639,"line_start":51,"line_end":51,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60641,"byte_end":60668,"line_start":52,"line_end":52,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60670,"byte_end":60673,"line_start":53,"line_end":53,"column_start":2,"column_end":5}},{"value":"/ let data = [0u16, 1, 2, 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60675,"byte_end":60706,"line_start":54,"line_end":54,"column_start":2,"column_end":33}},{"value":"/ let bits = BitArray::<_, Msb0>::new(data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60708,"byte_end":60754,"line_start":55,"line_end":55,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(bits.len(), 64);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60756,"byte_end":60787,"line_start":56,"line_end":56,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60789,"byte_end":60796,"line_start":57,"line_end":57,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60798,"byte_end":60807,"line_start":58,"line_end":58,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61124,"byte_end":61134,"line_start":74,"line_end":74,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitArray<A, O>>::into_inner","value":"pub fn into_inner(Self) -> A","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-array wrapper, returning the contained buffer.","sig":null,"attributes":[{"value":"/ Removes the bit-array wrapper, returning the contained buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60874,"byte_end":60940,"line_start":63,"line_end":63,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60942,"byte_end":60945,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60947,"byte_end":60962,"line_start":65,"line_end":65,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60964,"byte_end":60967,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60969,"byte_end":60980,"line_start":67,"line_end":67,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60982,"byte_end":61009,"line_start":68,"line_end":68,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61011,"byte_end":61014,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ let bits = bitarr![0; 30];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61016,"byte_end":61046,"line_start":70,"line_end":70,"column_start":2,"column_end":32}},{"value":"/ let native: [usize; 1] = bits.into_inner();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61048,"byte_end":61095,"line_start":71,"line_end":71,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61097,"byte_end":61104,"line_start":72,"line_end":72,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61106,"byte_end":61115,"line_start":73,"line_end":73,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61235,"byte_end":61246,"line_start":80,"line_end":80,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<A, O>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-array as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-array as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61165,"byte_end":61215,"line_start":78,"line_end":78,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61217,"byte_end":61226,"line_start":79,"line_end":79,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61394,"byte_end":61409,"line_start":86,"line_end":86,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<A, O>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<A::Store, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-array as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-array as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61316,"byte_end":61374,"line_start":84,"line_end":84,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61376,"byte_end":61385,"line_start":85,"line_end":85,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61580,"byte_end":61592,"line_start":92,"line_end":92,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<A, O>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[A::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-array as a slice of its underlying memory elements.\n","sig":null,"attributes":[{"value":"/ Views the bit-array as a slice of its underlying memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61491,"byte_end":61560,"line_start":90,"line_end":90,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61562,"byte_end":61571,"line_start":91,"line_end":91,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61751,"byte_end":61767,"line_start":99,"line_end":99,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitArray<A, O>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [A::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-array as a mutable slice of its underlying memory\n elements.\n","sig":null,"attributes":[{"value":"/ Views the bit-array as a mutable slice of its underlying memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61649,"byte_end":61716,"line_start":96,"line_end":96,"column_start":2,"column_end":69}},{"value":"/ elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61718,"byte_end":61731,"line_start":97,"line_end":97,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61733,"byte_end":61742,"line_start":98,"line_end":98,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61953,"byte_end":61956,"line_start":107,"line_end":107,"column_start":9,"column_end":12},"name":"len","qualname":"<BitArray<A, O>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the length (in bits) of the bit-array.","sig":null,"attributes":[{"value":"/ Gets the length (in bits) of the bit-array.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61836,"byte_end":61883,"line_start":103,"line_end":103,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61885,"byte_end":61888,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ This method is a compile-time constant.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61890,"byte_end":61933,"line_start":105,"line_end":105,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":61935,"byte_end":61944,"line_start":106,"line_end":106,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":62109,"byte_end":62117,"line_start":115,"line_end":115,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitArray<A, O>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the array is empty.","sig":null,"attributes":[{"value":"/ Tests whether the array is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":62002,"byte_end":62039,"line_start":111,"line_end":111,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":62041,"byte_end":62044,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ This method is a compile-time constant.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":62046,"byte_end":62089,"line_start":113,"line_end":113,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":62091,"byte_end":62100,"line_start":114,"line_end":114,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":554},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":643},{"krate":0,"index":737},{"krate":0,"index":876},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1087}],"decl_id":null,"docs":"# Heap-Allocated, Fixed-Size, Bit Buffer","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":83927,"byte_end":83953,"line_start":1,"line_end":1,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97059,"byte_end":97067,"line_start":60,"line_end":60,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<BitBox<T, O>>::from_raw","value":"pub unsafe fn from_raw(*mut BitSlice<T, O>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a bit-box from a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Constructs a bit-box from a raw bit-slice pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95585,"byte_end":95639,"line_start":21,"line_end":21,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95641,"byte_end":95644,"line_start":22,"line_end":22,"column_start":2,"column_end":5}},{"value":"/ This converts a `*mut BitSlice` pointer that had previously been","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95646,"byte_end":95714,"line_start":23,"line_end":23,"column_start":2,"column_end":70}},{"value":"/ produced by either [`::into_raw()`] or [`::leak()`] and restores the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95716,"byte_end":95788,"line_start":24,"line_end":24,"column_start":2,"column_end":74}},{"value":"/ bit-box containing it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95790,"byte_end":95816,"line_start":25,"line_end":25,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95818,"byte_end":95821,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95823,"byte_end":95838,"line_start":27,"line_end":27,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95840,"byte_end":95843,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ [`Box::from_raw`](alloc::boxed::Box::from_raw)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95845,"byte_end":95895,"line_start":29,"line_end":29,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95897,"byte_end":95900,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95902,"byte_end":95915,"line_start":31,"line_end":31,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95917,"byte_end":95920,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ You must only call this function on pointers produced by leaking a prior","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95922,"byte_end":95998,"line_start":33,"line_end":33,"column_start":2,"column_end":78}},{"value":"/ `BitBox`; you may not modify the value of a pointer returned by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96000,"byte_end":96067,"line_start":34,"line_end":34,"column_start":2,"column_end":69}},{"value":"/ [`::into_raw()`], nor may you conjure pointer values of your own. Doing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96069,"byte_end":96144,"line_start":35,"line_end":35,"column_start":2,"column_end":77}},{"value":"/ so will corrupt the allocator state.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96146,"byte_end":96186,"line_start":36,"line_end":36,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96188,"byte_end":96191,"line_start":37,"line_end":37,"column_start":2,"column_end":5}},{"value":"/ You must only call this function on any given leaked pointer at most","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96193,"byte_end":96265,"line_start":38,"line_end":38,"column_start":2,"column_end":74}},{"value":"/ once. Not calling it at all will merely render the allocated memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96267,"byte_end":96338,"line_start":39,"line_end":39,"column_start":2,"column_end":73}},{"value":"/ unreachable for the duration of the program runtime, a normal (and safe)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96340,"byte_end":96416,"line_start":40,"line_end":40,"column_start":2,"column_end":78}},{"value":"/ memory leak. Calling it once restores ordinary functionality, and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96418,"byte_end":96487,"line_start":41,"line_end":41,"column_start":2,"column_end":71}},{"value":"/ ensures ordinary destruction at or before program termination. However,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96489,"byte_end":96564,"line_start":42,"line_end":42,"column_start":2,"column_end":77}},{"value":"/ calling it more than once on the same pointer will introduce data races,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96566,"byte_end":96642,"line_start":43,"line_end":43,"column_start":2,"column_end":78}},{"value":"/ use-after-free, and/or double-free errors.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96644,"byte_end":96690,"line_start":44,"line_end":44,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96692,"byte_end":96695,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96697,"byte_end":96712,"line_start":46,"line_end":46,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96714,"byte_end":96717,"line_start":47,"line_end":47,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96719,"byte_end":96730,"line_start":48,"line_end":48,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96732,"byte_end":96759,"line_start":49,"line_end":49,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96761,"byte_end":96764,"line_start":50,"line_end":50,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 80];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96766,"byte_end":96794,"line_start":51,"line_end":51,"column_start":2,"column_end":30}},{"value":"/ let ptr: *mut BitSlice = BitBox::into_raw(bb);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96796,"byte_end":96846,"line_start":52,"line_end":52,"column_start":2,"column_end":52}},{"value":"/ let bb = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96848,"byte_end":96894,"line_start":53,"line_end":53,"column_start":2,"column_end":48}},{"value":"/ // unsafe { BitBox::from_raw(ptr) }; // UAF crash!","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96896,"byte_end":96950,"line_start":54,"line_end":54,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96952,"byte_end":96959,"line_start":55,"line_end":55,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96961,"byte_end":96964,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ [`::into_raw()`]: Self::into_raw","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":96966,"byte_end":97002,"line_start":57,"line_end":57,"column_start":2,"column_end":38}},{"value":"/ [`::leak()`]: Self::leak","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97004,"byte_end":97032,"line_start":58,"line_end":58,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97034,"byte_end":97043,"line_start":59,"line_end":59,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98039,"byte_end":98047,"line_start":93,"line_end":93,"column_start":9,"column_end":17},"name":"into_raw","qualname":"<BitBox<T, O>>::into_raw","value":"pub fn into_raw(Self) -> *mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the bit-box, returning a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Consumes the bit-box, returning a raw bit-slice pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97171,"byte_end":97231,"line_start":66,"line_end":66,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97233,"byte_end":97236,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ Bit-slice pointers are always correctly encoded and non-null. The","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97238,"byte_end":97307,"line_start":68,"line_end":68,"column_start":2,"column_end":71}},{"value":"/ referent region is dereferenceäble *as a `BitSlice` for the remainder of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97309,"byte_end":97386,"line_start":69,"line_end":69,"column_start":2,"column_end":78}},{"value":"/ the program, or until it is first passed to [`::from_raw()`], whichever","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97388,"byte_end":97463,"line_start":70,"line_end":70,"column_start":2,"column_end":77}},{"value":"/ comes first. Once the pointer is first passed to `::from_raw()`, all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97465,"byte_end":97537,"line_start":71,"line_end":71,"column_start":2,"column_end":74}},{"value":"/ copies of that pointer become invalid to dereference.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97539,"byte_end":97596,"line_start":72,"line_end":72,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97598,"byte_end":97601,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97603,"byte_end":97618,"line_start":74,"line_end":74,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97620,"byte_end":97623,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ [`Box::into_raw`](alloc::boxed::Box::into_raw)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97625,"byte_end":97675,"line_start":76,"line_end":76,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97677,"byte_end":97680,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97682,"byte_end":97697,"line_start":78,"line_end":78,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97699,"byte_end":97702,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97704,"byte_end":97715,"line_start":80,"line_end":80,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97717,"byte_end":97744,"line_start":81,"line_end":81,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97746,"byte_end":97749,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 80];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97751,"byte_end":97779,"line_start":83,"line_end":83,"column_start":2,"column_end":30}},{"value":"/ let ptr = BitBox::into_raw(bb);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97781,"byte_end":97816,"line_start":84,"line_end":84,"column_start":2,"column_end":37}},{"value":"/ let bb = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97818,"byte_end":97864,"line_start":85,"line_end":85,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97866,"byte_end":97873,"line_start":86,"line_end":86,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97875,"byte_end":97878,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ You **may not** deällocate pointers produced by this function through","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97880,"byte_end":97954,"line_start":88,"line_end":88,"column_start":2,"column_end":75}},{"value":"/ any other means.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97956,"byte_end":97976,"line_start":89,"line_end":89,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97978,"byte_end":97981,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ [`::from_raw()`]: Self::from_raw","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":97983,"byte_end":98019,"line_start":91,"line_end":91,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98021,"byte_end":98030,"line_start":92,"line_end":92,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98982,"byte_end":98986,"line_start":127,"line_end":127,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitBox<T, O>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<T, O> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":" Deliberately leaks the allocated memory, returning an\n `&'static mut BitSlice` reference.","sig":null,"attributes":[{"value":"/ Deliberately leaks the allocated memory, returning an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98109,"byte_end":98166,"line_start":97,"line_end":97,"column_start":2,"column_end":59}},{"value":"/ `&'static mut BitSlice` reference.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98168,"byte_end":98206,"line_start":98,"line_end":98,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98208,"byte_end":98211,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ This differs from [`::into_raw()`] in that the reference is safe to use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98213,"byte_end":98288,"line_start":100,"line_end":100,"column_start":2,"column_end":77}},{"value":"/ and can be tracked by the Rust borrow-checking system. Like the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98290,"byte_end":98357,"line_start":101,"line_end":101,"column_start":2,"column_end":69}},{"value":"/ bit-slice pointer produced by `::into_raw()`, this reference can be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98359,"byte_end":98430,"line_start":102,"line_end":102,"column_start":2,"column_end":73}},{"value":"/ un-leaked by passing it into [`::from_raw()`] to reclaim the memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98432,"byte_end":98504,"line_start":103,"line_end":103,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98506,"byte_end":98509,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98511,"byte_end":98526,"line_start":105,"line_end":105,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98528,"byte_end":98531,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](alloc::boxed::Box::leak)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98533,"byte_end":98575,"line_start":107,"line_end":107,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98577,"byte_end":98580,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98582,"byte_end":98597,"line_start":109,"line_end":109,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98599,"byte_end":98602,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98604,"byte_end":98615,"line_start":111,"line_end":111,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98617,"byte_end":98644,"line_start":112,"line_end":112,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98646,"byte_end":98649,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 80];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98651,"byte_end":98679,"line_start":114,"line_end":114,"column_start":2,"column_end":30}},{"value":"/ let static_ref: &'static mut BitSlice = BitBox::leak(bb);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98681,"byte_end":98742,"line_start":115,"line_end":115,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98744,"byte_end":98747,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98749,"byte_end":98777,"line_start":117,"line_end":117,"column_start":2,"column_end":30}},{"value":"/ assert!(static_ref[0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98779,"byte_end":98806,"line_start":118,"line_end":118,"column_start":2,"column_end":29}},{"value":"/ let _ = unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98808,"byte_end":98828,"line_start":119,"line_end":119,"column_start":2,"column_end":22}},{"value":"/   BitBox::from_raw(static_ref)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98830,"byte_end":98864,"line_start":120,"line_end":120,"column_start":2,"column_end":36}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98866,"byte_end":98872,"line_start":121,"line_end":121,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98874,"byte_end":98881,"line_start":122,"line_end":122,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98883,"byte_end":98886,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ [`::from_raw()`]: Self::from_raw","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98888,"byte_end":98924,"line_start":124,"line_end":124,"column_start":2,"column_end":38}},{"value":"/ [`::into_raw()`]: Self::into_raw","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98926,"byte_end":98962,"line_start":125,"line_end":125,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":98964,"byte_end":98973,"line_start":126,"line_end":126,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":99236,"byte_end":99244,"line_start":136,"line_end":136,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitBox<T, O>>::into_vec","value":"pub fn into_vec(Self) -> BitVec<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":99122,"byte_end":99131,"line_start":132,"line_end":132,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":99149,"byte_end":99179,"line_start":134,"line_end":134,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.into_bitvec()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":99181,"byte_end":99227,"line_start":135,"line_end":135,"column_start":2,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":99894,"byte_end":99902,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::boxed::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" An iterator over a `BitBox`.","sig":null,"attributes":[{"value":"* An iterator over a `BitBox`.\n\n## Original\n\n[`vec::IntoIter`](alloc::vec::IntoIter)\n**/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":99792,"byte_end":99882,"line_start":38,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100573,"byte_end":100584,"line_start":74,"line_end":74,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<T, O>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining unyielded bits as a bit-slice.","sig":null,"attributes":[{"value":"/ Views the remaining unyielded bits as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100412,"byte_end":100466,"line_start":68,"line_end":68,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100468,"byte_end":100471,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100473,"byte_end":100488,"line_start":70,"line_end":70,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100490,"byte_end":100493,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](alloc::vec::IntoIter::as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100495,"byte_end":100553,"line_start":72,"line_end":72,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100555,"byte_end":100564,"line_start":73,"line_end":73,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101025,"byte_end":101033,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<T, O>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100848,"byte_end":100857,"line_start":86,"line_end":86,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100875,"byte_end":100905,"line_start":88,"line_end":88,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100907,"byte_end":100953,"line_start":89,"line_end":89,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100955,"byte_end":101016,"line_start":90,"line_end":90,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101265,"byte_end":101280,"line_start":101,"line_end":101,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<T, O>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining unyielded bits as a mutable bit-slice.","sig":null,"attributes":[{"value":"/ Views the remaining unyielded bits as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101088,"byte_end":101150,"line_start":95,"line_end":95,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101152,"byte_end":101155,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101157,"byte_end":101172,"line_start":97,"line_end":97,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101174,"byte_end":101177,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](alloc::vec::IntoIter::as_mut_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101179,"byte_end":101245,"line_start":99,"line_end":99,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101247,"byte_end":101256,"line_start":100,"line_end":100,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101640,"byte_end":101652,"line_start":116,"line_end":116,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<T, O>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101459,"byte_end":101468,"line_start":111,"line_end":111,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101486,"byte_end":101516,"line_start":113,"line_end":113,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_mut_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101518,"byte_end":101568,"line_start":114,"line_end":114,"column_start":2,"column_end":52}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101570,"byte_end":101631,"line_start":115,"line_end":115,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84447,"byte_end":84453,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"BitBox","qualname":"::boxed::BitBox","value":"BitBox {  }","parent":null,"children":[{"krate":0,"index":1086}],"decl_id":null,"docs":"# Fixed-Size, Heap-Allocated, Bit Slice","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84367,"byte_end":84387,"line_start":41,"line_end":41,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85874,"byte_end":85887,"line_start":88,"line_end":88,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitBox<T, O>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<T, O>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies a bit-slice region into a new bit-box allocation.","sig":null,"attributes":[{"value":"/ Copies a bit-slice region into a new bit-box allocation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84650,"byte_end":84710,"line_start":57,"line_end":57,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84712,"byte_end":84715,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ The referent memory is `memcpy`d into the heap, exactly preserving the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84717,"byte_end":84791,"line_start":59,"line_end":59,"column_start":2,"column_end":76}},{"value":"/ original bit-slice’s memory layout and contents. This allows the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84793,"byte_end":84863,"line_start":60,"line_end":60,"column_start":2,"column_end":70}},{"value":"/ function to run as fast as possible, but misaligned source bit-slices","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84865,"byte_end":84938,"line_start":61,"line_end":61,"column_start":2,"column_end":75}},{"value":"/ may result in decreased performance or unexpected layout behavior during","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84940,"byte_end":85016,"line_start":62,"line_end":62,"column_start":2,"column_end":78}},{"value":"/ use. You can use [`.force_align()`] to ensure that the referent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85018,"byte_end":85085,"line_start":63,"line_end":63,"column_start":2,"column_end":69}},{"value":"/ bit-slice is aligned in memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85087,"byte_end":85122,"line_start":64,"line_end":64,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85124,"byte_end":85127,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85129,"byte_end":85141,"line_start":66,"line_end":66,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85143,"byte_end":85146,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ Bits in the allocation of the source bit-slice, but outside its own","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85148,"byte_end":85219,"line_start":68,"line_end":68,"column_start":2,"column_end":73}},{"value":"/ description of that memory, have an **unspecified**, but initialized,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85221,"byte_end":85294,"line_start":69,"line_end":69,"column_start":2,"column_end":75}},{"value":"/ value. You may not rely on their contents in any way, and you *should*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85296,"byte_end":85370,"line_start":70,"line_end":70,"column_start":2,"column_end":76}},{"value":"/ call [`.force_align()`] and/or [`.fill_uninitialized()`] if you are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85372,"byte_end":85443,"line_start":71,"line_end":71,"column_start":2,"column_end":73}},{"value":"/ going to inspect the underlying memory of the new allocation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85445,"byte_end":85510,"line_start":72,"line_end":72,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85512,"byte_end":85515,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85517,"byte_end":85532,"line_start":74,"line_end":74,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85534,"byte_end":85537,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85539,"byte_end":85550,"line_start":76,"line_end":76,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85552,"byte_end":85579,"line_start":77,"line_end":77,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85581,"byte_end":85584,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1011u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85586,"byte_end":85615,"line_start":79,"line_end":79,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85617,"byte_end":85657,"line_start":80,"line_end":80,"column_start":2,"column_end":42}},{"value":"/ let bb = BitBox::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85659,"byte_end":85707,"line_start":81,"line_end":81,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bb, bits[2 ..]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85709,"byte_end":85740,"line_start":82,"line_end":82,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85742,"byte_end":85749,"line_start":83,"line_end":83,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85751,"byte_end":85754,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ [`.fill_uninitialized()`]: Self::fill_uninitialized","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85756,"byte_end":85811,"line_start":85,"line_end":85,"column_start":2,"column_end":57}},{"value":"/ [`.force_align()`]: Self::force_align","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85813,"byte_end":85854,"line_start":86,"line_end":86,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85856,"byte_end":85865,"line_start":87,"line_end":87,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86569,"byte_end":86585,"line_start":114,"line_end":114,"column_start":9,"column_end":25},"name":"from_boxed_slice","qualname":"<BitBox<T, O>>::from_boxed_slice","value":"pub fn from_boxed_slice(Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox<T, O>`, in place.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox<T, O>`, in place.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":85980,"byte_end":86038,"line_start":92,"line_end":92,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86040,"byte_end":86043,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ This does not affect the referent buffer, and only transforms the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86045,"byte_end":86114,"line_start":94,"line_end":94,"column_start":2,"column_end":71}},{"value":"/ handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86116,"byte_end":86127,"line_start":95,"line_end":95,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86129,"byte_end":86132,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86134,"byte_end":86147,"line_start":97,"line_end":97,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86149,"byte_end":86152,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ This panics if the provided `boxed` slice is too long to view as a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86154,"byte_end":86224,"line_start":99,"line_end":99,"column_start":2,"column_end":72}},{"value":"/ bit-slice region.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86226,"byte_end":86247,"line_start":100,"line_end":100,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86249,"byte_end":86252,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86254,"byte_end":86269,"line_start":102,"line_end":102,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86271,"byte_end":86274,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86276,"byte_end":86287,"line_start":104,"line_end":104,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86289,"byte_end":86316,"line_start":105,"line_end":105,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86318,"byte_end":86321,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 40]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86323,"byte_end":86368,"line_start":107,"line_end":107,"column_start":2,"column_end":47}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86370,"byte_end":86400,"line_start":108,"line_end":108,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<u8>::from_boxed_slice(boxed);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86402,"byte_end":86453,"line_start":109,"line_end":109,"column_start":2,"column_end":53}},{"value":"/ assert_eq!(bb, bits![0; 320]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86455,"byte_end":86489,"line_start":110,"line_end":110,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(addr, bb.as_raw_slice().as_ptr());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86491,"byte_end":86540,"line_start":111,"line_end":111,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86542,"byte_end":86549,"line_start":112,"line_end":112,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86551,"byte_end":86560,"line_start":113,"line_end":113,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87676,"byte_end":87696,"line_start":144,"line_end":144,"column_start":9,"column_end":29},"name":"try_from_boxed_slice","qualname":"<BitBox<T, O>>::try_from_boxed_slice","value":"pub fn try_from_boxed_slice(Box<[T]>) -> Result<Self, Box<[T]>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to convert an ordinary boxed slice into a boxed bit-slice.","sig":null,"attributes":[{"value":"/ Attempts to convert an ordinary boxed slice into a boxed bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86719,"byte_end":86790,"line_start":119,"line_end":119,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86792,"byte_end":86795,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ This does not perform a copy or reällocation; it only attempts to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86797,"byte_end":86867,"line_start":121,"line_end":121,"column_start":2,"column_end":71}},{"value":"/ transform the handle. Because `Box<[T]>` can be longer than `BitBox`es,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86869,"byte_end":86944,"line_start":122,"line_end":122,"column_start":2,"column_end":77}},{"value":"/ it may fail, and will return the original handle if it does.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":86946,"byte_end":87010,"line_start":123,"line_end":123,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87012,"byte_end":87015,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ It is unlikely that you have a single `Box<[_]>` that is too large to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87017,"byte_end":87090,"line_start":125,"line_end":125,"column_start":2,"column_end":75}},{"value":"/ convert into a bit-box. You can find the length restrictions as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87092,"byte_end":87163,"line_start":126,"line_end":126,"column_start":2,"column_end":73}},{"value":"/ bit-slice associated constants [`MAX_BITS`] and [`MAX_ELTS`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87165,"byte_end":87230,"line_start":127,"line_end":127,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87232,"byte_end":87235,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87237,"byte_end":87252,"line_start":129,"line_end":129,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87254,"byte_end":87257,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87259,"byte_end":87270,"line_start":131,"line_end":131,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87272,"byte_end":87299,"line_start":132,"line_end":132,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87301,"byte_end":87304,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0u8; 40]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87306,"byte_end":87353,"line_start":134,"line_end":134,"column_start":2,"column_end":49}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87355,"byte_end":87385,"line_start":135,"line_end":135,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<u8>::try_from_boxed_slice(boxed).unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87387,"byte_end":87451,"line_start":136,"line_end":136,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bb, bits![0; 320]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87453,"byte_end":87487,"line_start":137,"line_end":137,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(addr, bb.as_raw_slice().as_ptr());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87489,"byte_end":87538,"line_start":138,"line_end":138,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87540,"byte_end":87547,"line_start":139,"line_end":139,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87549,"byte_end":87552,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87554,"byte_end":87604,"line_start":141,"line_end":141,"column_start":2,"column_end":52}},{"value":"/ [`MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87606,"byte_end":87656,"line_start":142,"line_end":142,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87658,"byte_end":87667,"line_start":143,"line_end":143,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88432,"byte_end":88448,"line_start":170,"line_end":170,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitBox<T, O>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the bit-box back into an ordinary boxed element slice.","sig":null,"attributes":[{"value":"/ Converts the bit-box back into an ordinary boxed element slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":87967,"byte_end":88034,"line_start":153,"line_end":153,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88036,"byte_end":88039,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ This does not touch the allocator or the buffer contents; it is purely a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88041,"byte_end":88117,"line_start":155,"line_end":155,"column_start":2,"column_end":78}},{"value":"/ handle transform.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88119,"byte_end":88140,"line_start":156,"line_end":156,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88142,"byte_end":88145,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88147,"byte_end":88162,"line_start":158,"line_end":158,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88164,"byte_end":88167,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88169,"byte_end":88180,"line_start":160,"line_end":160,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88182,"byte_end":88209,"line_start":161,"line_end":161,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88211,"byte_end":88214,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88216,"byte_end":88243,"line_start":163,"line_end":163,"column_start":2,"column_end":29}},{"value":"/ let addr = bb.as_raw_slice().as_ptr();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88245,"byte_end":88287,"line_start":164,"line_end":164,"column_start":2,"column_end":44}},{"value":"/ let boxed = bb.into_boxed_slice();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88289,"byte_end":88327,"line_start":165,"line_end":165,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(boxed[..], [0][..]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88329,"byte_end":88364,"line_start":166,"line_end":166,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(addr, boxed.as_ptr());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88366,"byte_end":88403,"line_start":167,"line_end":167,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88405,"byte_end":88412,"line_start":168,"line_end":168,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88414,"byte_end":88423,"line_start":169,"line_end":169,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89529,"byte_end":89540,"line_start":208,"line_end":208,"column_start":9,"column_end":20},"name":"into_bitvec","qualname":"<BitBox<T, O>>::into_bitvec","value":"pub fn into_bitvec(Self) -> BitVec<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Converts the bit-box into a bit-vector.","sig":null,"attributes":[{"value":"/ Converts the bit-box into a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88578,"byte_end":88621,"line_start":176,"line_end":176,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88623,"byte_end":88626,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ This uses the Rust allocator API, and does not guarantee whether or not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88628,"byte_end":88703,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ a reällocation occurs internally.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88705,"byte_end":88743,"line_start":179,"line_end":179,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88745,"byte_end":88748,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ The resulting bit-vector can be converted back into a bit-box via","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88750,"byte_end":88819,"line_start":181,"line_end":181,"column_start":2,"column_end":71}},{"value":"/ [`BitBox::into_boxed_bitslice`][0].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88821,"byte_end":88860,"line_start":182,"line_end":182,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88862,"byte_end":88865,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88867,"byte_end":88882,"line_start":184,"line_end":184,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88884,"byte_end":88887,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ [`slice::into_vec`](https://doc.rust-lang.org/std/primitive.slice.html#method.into_vec)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88889,"byte_end":88980,"line_start":186,"line_end":186,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88982,"byte_end":88985,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":88987,"byte_end":89009,"line_start":188,"line_end":188,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89011,"byte_end":89014,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ The original function is implemented in an `impl<T> [T]` block, despite","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89016,"byte_end":89091,"line_start":190,"line_end":190,"column_start":2,"column_end":77}},{"value":"/ taking a `Box<[T]>` receiver. Since `BitBox` cannot be used as an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89093,"byte_end":89162,"line_start":191,"line_end":191,"column_start":2,"column_end":71}},{"value":"/ explicit receiver outside its own `impl` blocks, the method is relocated","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89164,"byte_end":89240,"line_start":192,"line_end":192,"column_start":2,"column_end":78}},{"value":"/ here.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89242,"byte_end":89251,"line_start":193,"line_end":193,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89253,"byte_end":89256,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89258,"byte_end":89273,"line_start":195,"line_end":195,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89275,"byte_end":89278,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89280,"byte_end":89291,"line_start":197,"line_end":197,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89293,"byte_end":89320,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89322,"byte_end":89325,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89327,"byte_end":89363,"line_start":200,"line_end":200,"column_start":2,"column_end":38}},{"value":"/ let bv = bb.into_bitvec();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89365,"byte_end":89395,"line_start":201,"line_end":201,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89397,"byte_end":89400,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bitvec![0, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89402,"byte_end":89445,"line_start":203,"line_end":203,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89447,"byte_end":89454,"line_start":204,"line_end":204,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89456,"byte_end":89459,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::vec::BitVec::into_boxed_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89461,"byte_end":89509,"line_start":206,"line_end":206,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":89511,"byte_end":89520,"line_start":207,"line_end":207,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90321,"byte_end":90332,"line_start":230,"line_end":230,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitBox<T, O>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-box as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-box as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90253,"byte_end":90301,"line_start":228,"line_end":228,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90303,"byte_end":90312,"line_start":229,"line_end":229,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90488,"byte_end":90503,"line_start":236,"line_end":236,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitBox<T, O>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-box as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-box as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90412,"byte_end":90468,"line_start":234,"line_end":234,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90470,"byte_end":90479,"line_start":235,"line_end":235,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90824,"byte_end":90836,"line_start":245,"line_end":245,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitBox<T, O>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-box as a slice of its underlying memory elements.","sig":null,"attributes":[{"value":"/ Views the bit-box as a slice of its underlying memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90591,"byte_end":90658,"line_start":240,"line_end":240,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90660,"byte_end":90663,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ Because bit-boxes uniquely own their buffer, they can safely view the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90665,"byte_end":90738,"line_start":242,"line_end":242,"column_start":2,"column_end":75}},{"value":"/ underlying buffer without dealing with contending neighbors.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90740,"byte_end":90804,"line_start":243,"line_end":243,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90806,"byte_end":90815,"line_start":244,"line_end":244,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91231,"byte_end":91247,"line_start":256,"line_end":256,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitBox<T, O>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-box as a mutable slice of its underlying memory elements.","sig":null,"attributes":[{"value":"/ Views the bit-box as a mutable slice of its underlying memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":90990,"byte_end":91065,"line_start":251,"line_end":251,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91067,"byte_end":91070,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ Because bit-boxes uniquely own their buffer, they can safely view the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91072,"byte_end":91145,"line_start":253,"line_end":253,"column_start":2,"column_end":75}},{"value":"/ underlying buffer without dealing with contending neighbors.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91147,"byte_end":91211,"line_start":254,"line_end":254,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91213,"byte_end":91222,"line_start":255,"line_end":255,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92777,"byte_end":92795,"line_start":294,"line_end":294,"column_start":9,"column_end":27},"name":"fill_uninitialized","qualname":"<BitBox<T, O>>::fill_uninitialized","value":"pub fn fill_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the unused bits outside the `BitBox` buffer to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the unused bits outside the `BitBox` buffer to a fixed value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91411,"byte_end":91481,"line_start":262,"line_end":262,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91483,"byte_end":91486,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits that the allocated buffer owns but which","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91488,"byte_end":91562,"line_start":264,"line_end":264,"column_start":2,"column_end":76}},{"value":"/ are outside the `self.as_bitslice()` view. `bitvec` guarantees that all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91564,"byte_end":91639,"line_start":265,"line_end":265,"column_start":2,"column_end":77}},{"value":"/ owned bits are initialized to *some* value, but does not guarantee","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91641,"byte_end":91711,"line_start":266,"line_end":266,"column_start":2,"column_end":72}},{"value":"/ *which* value. This method can be used to make all such unused bits have","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91713,"byte_end":91789,"line_start":267,"line_end":267,"column_start":2,"column_end":78}},{"value":"/ a known value after the call, so that viewing the underlying memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91791,"byte_end":91862,"line_start":268,"line_end":268,"column_start":2,"column_end":73}},{"value":"/ directly has consistent results.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91864,"byte_end":91900,"line_start":269,"line_end":269,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91902,"byte_end":91905,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ Note that the crate implementation guarantees that all bits owned by its","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91907,"byte_end":91983,"line_start":271,"line_end":271,"column_start":2,"column_end":78}},{"value":"/ handles are stably initialized according to the language and compiler","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":91985,"byte_end":92058,"line_start":272,"line_end":272,"column_start":2,"column_end":75}},{"value":"/ rules! `bitvec` will never cause UB by using uninitialized memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92060,"byte_end":92130,"line_start":273,"line_end":273,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92132,"byte_end":92135,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92137,"byte_end":92152,"line_start":275,"line_end":275,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92154,"byte_end":92157,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92159,"byte_end":92170,"line_start":277,"line_end":277,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92172,"byte_end":92199,"line_start":278,"line_end":278,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92201,"byte_end":92204,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ let bits = 0b1011_0101u8.view_bits::<Msb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92206,"byte_end":92255,"line_start":280,"line_end":280,"column_start":2,"column_end":51}},{"value":"/ let mut bb = BitBox::from_bitslice(&bits[2 .. 6]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92257,"byte_end":92311,"line_start":281,"line_end":281,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(bb.count_ones(), 3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92313,"byte_end":92348,"line_start":282,"line_end":282,"column_start":2,"column_end":37}},{"value":"/ // Remember, the two bits on each edge are unspecified, and cannot be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92350,"byte_end":92423,"line_start":283,"line_end":283,"column_start":2,"column_end":75}},{"value":"/ // observed! They must be masked away for the test to be meaningful.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92425,"byte_end":92497,"line_start":284,"line_end":284,"column_start":2,"column_end":74}},{"value":"/ assert_eq!(bb.as_raw_slice()[0] & 0x3C, 0b00_1101_00u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92499,"byte_end":92559,"line_start":285,"line_end":285,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92561,"byte_end":92564,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ bb.fill_uninitialized(false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92566,"byte_end":92599,"line_start":287,"line_end":287,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bb.as_raw_slice(), &[0b00_1101_00u8]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92601,"byte_end":92654,"line_start":288,"line_end":288,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92656,"byte_end":92659,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ bb.fill_uninitialized(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92661,"byte_end":92693,"line_start":290,"line_end":290,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bb.as_raw_slice(), &[0b11_1101_11u8]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92695,"byte_end":92748,"line_start":291,"line_end":291,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92750,"byte_end":92757,"line_start":292,"line_end":292,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":92759,"byte_end":92768,"line_start":293,"line_end":293,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94512,"byte_end":94523,"line_start":338,"line_end":338,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitBox<T, O>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the allocated buffer has no dead bits between the start of\n the buffer and the start of the live bit-slice.","sig":null,"attributes":[{"value":"/ Ensures that the allocated buffer has no dead bits between the start of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93111,"byte_end":93186,"line_start":305,"line_end":305,"column_start":2,"column_end":77}},{"value":"/ the buffer and the start of the live bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93188,"byte_end":93239,"line_start":306,"line_end":306,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93241,"byte_end":93244,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ This is useful for ensuring a consistent memory layout in bit-boxes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93246,"byte_end":93317,"line_start":308,"line_end":308,"column_start":2,"column_end":73}},{"value":"/ created by cloning an arbitrary bit-slice into the heap. As bit-slices","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93319,"byte_end":93393,"line_start":309,"line_end":309,"column_start":2,"column_end":76}},{"value":"/ can begin and end anywhere in memory, the [`::from_bitslice()`] function","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93395,"byte_end":93471,"line_start":310,"line_end":310,"column_start":2,"column_end":78}},{"value":"/ does not attempt to normalize them and only does a fast element-wise","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93473,"byte_end":93545,"line_start":311,"line_end":311,"column_start":2,"column_end":74}},{"value":"/ copy when creating the bit-box.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93547,"byte_end":93582,"line_start":312,"line_end":312,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93584,"byte_end":93587,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ The value of dead bits that are in the allocation but not in the live","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93589,"byte_end":93662,"line_start":314,"line_end":314,"column_start":2,"column_end":75}},{"value":"/ region are *initialized*, but do not have a *specified* value. After","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93664,"byte_end":93736,"line_start":315,"line_end":315,"column_start":2,"column_end":74}},{"value":"/ calling this method, you should use [`.fill_uninitialized()`] to set the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93738,"byte_end":93814,"line_start":316,"line_end":316,"column_start":2,"column_end":78}},{"value":"/ excess bits in the buffer to a fixed value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93816,"byte_end":93863,"line_start":317,"line_end":317,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93865,"byte_end":93868,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93870,"byte_end":93885,"line_start":319,"line_end":319,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93887,"byte_end":93890,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93892,"byte_end":93903,"line_start":321,"line_end":321,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93905,"byte_end":93932,"line_start":322,"line_end":322,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93934,"byte_end":93937,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ let bits = &0b10_1101_01u8.view_bits::<Msb0>()[2 .. 6];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":93939,"byte_end":93998,"line_start":324,"line_end":324,"column_start":2,"column_end":61}},{"value":"/ let mut bb = BitBox::from_bitslice(bits);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94000,"byte_end":94045,"line_start":325,"line_end":325,"column_start":2,"column_end":47}},{"value":"/ // Remember, the two bits on each edge are unspecified, and cannot be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94047,"byte_end":94120,"line_start":326,"line_end":326,"column_start":2,"column_end":75}},{"value":"/ // observed! They must be masked away for the test to be meaningful.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94122,"byte_end":94194,"line_start":327,"line_end":327,"column_start":2,"column_end":74}},{"value":"/ assert_eq!(bb.as_raw_slice()[0] & 0x3C, 0b00_1101_00u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94196,"byte_end":94256,"line_start":328,"line_end":328,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94258,"byte_end":94261,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ bb.force_align();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94263,"byte_end":94284,"line_start":330,"line_end":330,"column_start":2,"column_end":23}},{"value":"/ bb.fill_uninitialized(false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94286,"byte_end":94319,"line_start":331,"line_end":331,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bb.as_raw_slice(), &[0b1101_0000u8]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94321,"byte_end":94373,"line_start":332,"line_end":332,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94375,"byte_end":94382,"line_start":333,"line_end":333,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94384,"byte_end":94387,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ [`::from_bitslice()`]: Self::from_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94389,"byte_end":94435,"line_start":335,"line_end":335,"column_start":2,"column_end":48}},{"value":"/ [`.fill_uninitialized()`]: Self::fill_uninitialized","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94437,"byte_end":94492,"line_start":336,"line_end":336,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":94494,"byte_end":94503,"line_start":337,"line_end":337,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1110},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1126},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1144},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1238},{"krate":0,"index":1245},{"krate":0,"index":1251},{"krate":0,"index":1257},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1276},{"krate":0,"index":1285},{"krate":0,"index":1297},{"krate":0,"index":1303},{"krate":0,"index":1309},{"krate":0,"index":1313},{"krate":0,"index":1319},{"krate":0,"index":1324},{"krate":0,"index":1328},{"krate":0,"index":1331},{"krate":0,"index":1334},{"krate":0,"index":5512},{"krate":0,"index":5517},{"krate":0,"index":5522},{"krate":0,"index":5527},{"krate":0,"index":5532},{"krate":0,"index":1335},{"krate":0,"index":1346},{"krate":0,"index":1361},{"krate":0,"index":1370},{"krate":0,"index":1376},{"krate":0,"index":1381},{"krate":0,"index":1387},{"krate":0,"index":1394}],"decl_id":null,"docs":"# Memory Region Description","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119728,"byte_end":119735,"line_start":74,"line_end":74,"column_start":2,"column_end":9},"name":"Enclave","qualname":"::domain::BitDomain::Enclave","value":"BitDomain::Enclave(Reference)","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" Indicates that a bit-slice’s contents are entirely in the interior\n indices of a single memory element.","sig":null,"attributes":[{"value":"/ Indicates that a bit-slice’s contents are entirely in the interior","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119535,"byte_end":119607,"line_start":70,"line_end":70,"column_start":2,"column_end":72}},{"value":"/ indices of a single memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119609,"byte_end":119648,"line_start":71,"line_end":71,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119650,"byte_end":119653,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ The contained value is always the bit-slice that created this view.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119655,"byte_end":119726,"line_start":73,"line_end":73,"column_start":2,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":1234},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":120132,"byte_end":120138,"line_start":81,"line_end":81,"column_start":2,"column_end":8},"name":"Region","qualname":"::domain::BitDomain::Region","value":"BitDomain::Region { head, body, tail }","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" Indicates that a bit-slice’s contents touch an element edge.","sig":null,"attributes":[{"value":"/ Indicates that a bit-slice’s contents touch an element edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119772,"byte_end":119838,"line_start":75,"line_end":75,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119840,"byte_end":119843,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ This splits the bit-slice into three partitions, each of which may be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119845,"byte_end":119918,"line_start":77,"line_end":77,"column_start":2,"column_end":75}},{"value":"/ empty: two partially-occupied edge elements, with their original type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119920,"byte_end":119993,"line_start":78,"line_end":78,"column_start":2,"column_end":75}},{"value":"/ status, and one interior span, which is known to not have any other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119995,"byte_end":120066,"line_start":79,"line_end":79,"column_start":2,"column_end":73}},{"value":"/ aliases derived from the bit-slice that created this view.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":120068,"byte_end":120130,"line_start":80,"line_end":80,"column_start":2,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1226},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":119330,"byte_end":119339,"line_start":62,"line_end":62,"column_start":10,"column_end":19},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, M = Const, T = usize, O = Lsb0> where M: Mutability,\n    T: 'a + BitStore, O: BitOrder, Address<M, BitSlice<T, O>>: Referential,\n    Address<M, BitSlice<T::Unalias, O>>: Referential {\n    Enclave(Reference),\n    Region {\n            head: Reference,\n            body: Reference,\n            tail: Reference,\n        },\n}","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1234}],"decl_id":null,"docs":"# Bit-Slice Partitioning","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121877,"byte_end":121884,"line_start":127,"line_end":127,"column_start":9,"column_end":16},"name":"enclave","qualname":"<BitDomain>::enclave","value":"pub fn enclave(Self) -> Option<Reference>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to unpack the bit-domain as an [`Enclave`] variant. This is\n just a shorthand for explicit destructuring.","sig":null,"attributes":[{"value":"/ Attempts to unpack the bit-domain as an [`Enclave`] variant. This is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121698,"byte_end":121770,"line_start":122,"line_end":122,"column_start":2,"column_end":74}},{"value":"/ just a shorthand for explicit destructuring.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121772,"byte_end":121820,"line_start":123,"line_end":123,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121822,"byte_end":121825,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`Enclave`]: Self::Enclave","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121827,"byte_end":121857,"line_start":125,"line_end":125,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121859,"byte_end":121868,"line_start":126,"line_end":126,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122188,"byte_end":122194,"line_start":139,"line_end":139,"column_start":9,"column_end":15},"name":"region","qualname":"<BitDomain>::region","value":"pub fn region(Self) -> Option<(Reference, Reference, Reference)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to unpack the bit-domain as a [`Region`] variant. This is just\n a shorthand for explicit destructuring.","sig":null,"attributes":[{"value":"/ Attempts to unpack the bit-domain as a [`Region`] variant. This is just","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122013,"byte_end":122088,"line_start":134,"line_end":134,"column_start":2,"column_end":77}},{"value":"/ a shorthand for explicit destructuring.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122090,"byte_end":122133,"line_start":135,"line_end":135,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122135,"byte_end":122138,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ [`Region`]: Self::Region","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122140,"byte_end":122168,"line_start":137,"line_end":137,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122170,"byte_end":122179,"line_start":138,"line_end":138,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124506,"byte_end":124513,"line_start":240,"line_end":240,"column_start":2,"column_end":9},"name":"Enclave","qualname":"::domain::Domain::Enclave","value":"Domain::Enclave(PartialElement)","parent":{"krate":0,"index":1264},"children":[],"decl_id":null,"docs":" Indicates that a bit-slice’s contents are entirely in the interior\n indices of a single memory element.","sig":null,"attributes":[{"value":"/ Indicates that a bit-slice’s contents are entirely in the interior","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124163,"byte_end":124235,"line_start":234,"line_end":234,"column_start":2,"column_end":72}},{"value":"/ indices of a single memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124237,"byte_end":124276,"line_start":235,"line_end":235,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124278,"byte_end":124281,"line_start":236,"line_end":236,"column_start":2,"column_end":5}},{"value":"/ The contained reference is only able to observe the bits governed by the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124283,"byte_end":124359,"line_start":237,"line_end":237,"column_start":2,"column_end":78}},{"value":"/ generating bit-slice. Other handles to the element may exist, and may","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124361,"byte_end":124434,"line_start":238,"line_end":238,"column_start":2,"column_end":75}},{"value":"/ write to bits outside the range that this reference can observe.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124436,"byte_end":124504,"line_start":239,"line_end":239,"column_start":2,"column_end":70}}]},{"kind":"StructVariant","id":{"krate":0,"index":1272},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124905,"byte_end":124911,"line_start":247,"line_end":247,"column_start":2,"column_end":8},"name":"Region","qualname":"::domain::Domain::Region","value":"Domain::Region { head, body, tail }","parent":{"krate":0,"index":1264},"children":[],"decl_id":null,"docs":" Indicates that a bit-slice’s contents touch an element edge.","sig":null,"attributes":[{"value":"/ Indicates that a bit-slice’s contents touch an element edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124545,"byte_end":124611,"line_start":241,"line_end":241,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124613,"byte_end":124616,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ This splits the bit-slice into three partitions, each of which may be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124618,"byte_end":124691,"line_start":243,"line_end":243,"column_start":2,"column_end":75}},{"value":"/ empty: two partially-occupied edge elements, with their original type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124693,"byte_end":124766,"line_start":244,"line_end":244,"column_start":2,"column_end":75}},{"value":"/ status, and one interior span, which is known not to have any other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124768,"byte_end":124839,"line_start":245,"line_end":245,"column_start":2,"column_end":73}},{"value":"/ aliases derived from the bit-slice that created this view.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":124841,"byte_end":124903,"line_start":246,"line_end":246,"column_start":2,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1264},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":123980,"byte_end":123986,"line_start":226,"line_end":226,"column_start":10,"column_end":16},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, M = Const, T = usize, O = Lsb0> where M: Mutability,\n    T: 'a + BitStore, O: BitOrder, Address<M, T>: Referential,\n    Address<M, [T::Unalias]>: SliceReferential {\n    Enclave(PartialElement),\n    Region {\n            head: Option<PartialElement>,\n            body: Reference,\n            tail: Option<PartialElement>,\n        },\n}","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1272}],"decl_id":null,"docs":"# Bit-Slice Element Partitioning","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126016,"byte_end":126023,"line_start":278,"line_end":278,"column_start":9,"column_end":16},"name":"enclave","qualname":"<Domain>::enclave","value":"pub fn enclave(Self) -> Option<PartialElement>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to unpack the bit-domain as an [`Enclave`] variant. This is\n just a shorthand for explicit destructuring.","sig":null,"attributes":[{"value":"/ Attempts to unpack the bit-domain as an [`Enclave`] variant. This is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125837,"byte_end":125909,"line_start":273,"line_end":273,"column_start":2,"column_end":74}},{"value":"/ just a shorthand for explicit destructuring.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125911,"byte_end":125959,"line_start":274,"line_end":274,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125961,"byte_end":125964,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ [`Enclave`]: Self::Enclave","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125966,"byte_end":125996,"line_start":276,"line_end":276,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125998,"byte_end":126007,"line_start":277,"line_end":277,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126322,"byte_end":126328,"line_start":290,"line_end":290,"column_start":9,"column_end":15},"name":"region","qualname":"<Domain>::region","value":"pub fn region(Self)\n-> Option<(Option<PartialElement>, Reference, Option<PartialElement>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to unpack the bit-domain as a [`Region`] variant. This is just\n a shorthand for explicit destructuring.","sig":null,"attributes":[{"value":"/ Attempts to unpack the bit-domain as a [`Region`] variant. This is just","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126147,"byte_end":126222,"line_start":285,"line_end":285,"column_start":2,"column_end":77}},{"value":"/ a shorthand for explicit destructuring.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126224,"byte_end":126267,"line_start":286,"line_end":286,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126269,"byte_end":126272,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ [`Region`]: Self::Region","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126274,"byte_end":126302,"line_start":288,"line_end":288,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126304,"byte_end":126313,"line_start":289,"line_end":289,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126768,"byte_end":126783,"line_start":308,"line_end":308,"column_start":9,"column_end":24},"name":"into_bit_domain","qualname":"<Domain>::into_bit_domain","value":"pub fn into_bit_domain(Self) -> BitDomain where\nAddress<M, BitSlice<T, O>>: Referential,\nAddress<M, BitSlice<T::Unalias, O>>: Referential, Reference: Default,\nReference: TryFrom<Reference>","parent":null,"children":[],"decl_id":null,"docs":" Converts the element-wise `Domain` into the equivalent `BitDomain`.","sig":null,"attributes":[{"value":"/ Converts the element-wise `Domain` into the equivalent `BitDomain`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126575,"byte_end":126646,"line_start":303,"line_end":303,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126648,"byte_end":126651,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ This transform replaces each memory reference with an equivalent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126653,"byte_end":126721,"line_start":305,"line_end":305,"column_start":2,"column_end":70}},{"value":"/ `BitSlice` reference.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126723,"byte_end":126748,"line_start":306,"line_end":306,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":126750,"byte_end":126759,"line_start":307,"line_end":307,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":135443,"byte_end":135457,"line_start":688,"line_end":688,"column_start":12,"column_end":26},"name":"PartialElement","qualname":"::domain::PartialElement","value":"PartialElement {  }","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":"# Partially-Owned Memory Element","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137286,"byte_end":137296,"line_start":756,"line_end":756,"column_start":9,"column_end":19},"name":"load_value","qualname":"<PartialElement>::load_value","value":"pub fn load_value(&Self) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Fetches the value stored through `self` and masks away extra bits.","sig":null,"attributes":[{"value":"/ Fetches the value stored through `self` and masks away extra bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137062,"byte_end":137132,"line_start":749,"line_end":749,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137134,"byte_end":137137,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137139,"byte_end":137153,"line_start":751,"line_end":751,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137155,"byte_end":137158,"line_start":752,"line_end":752,"column_start":2,"column_end":5}},{"value":"/ A bit-map containing any bits set to `1` in the governed bits. All other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137160,"byte_end":137236,"line_start":753,"line_end":753,"column_start":2,"column_end":78}},{"value":"/ bits are cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137238,"byte_end":137266,"line_start":754,"line_end":754,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137268,"byte_end":137277,"line_start":755,"line_end":755,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137536,"byte_end":137540,"line_start":766,"line_end":766,"column_start":9,"column_end":13},"name":"head","qualname":"<PartialElement>::head","value":"pub fn head(&Self) -> BitIdx<T::Mem>","parent":null,"children":[],"decl_id":null,"docs":" Gets the starting index of the live bits in the element.\n","sig":null,"attributes":[{"value":"/ Gets the starting index of the live bits in the element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137424,"byte_end":137484,"line_start":763,"line_end":763,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137486,"byte_end":137495,"line_start":764,"line_end":764,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137497,"byte_end":137527,"line_start":765,"line_end":765,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137695,"byte_end":137699,"line_start":773,"line_end":773,"column_start":9,"column_end":13},"name":"tail","qualname":"<PartialElement>::tail","value":"pub fn tail(&Self) -> BitEnd<T::Mem>","parent":null,"children":[],"decl_id":null,"docs":" Gets the ending index of the live bits in the element.\n","sig":null,"attributes":[{"value":"/ Gets the ending index of the live bits in the element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137585,"byte_end":137643,"line_start":770,"line_end":770,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137645,"byte_end":137654,"line_start":771,"line_end":771,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137656,"byte_end":137686,"line_start":772,"line_end":772,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137911,"byte_end":137917,"line_start":781,"line_end":781,"column_start":9,"column_end":15},"name":"bounds","qualname":"<PartialElement>::bounds","value":"pub fn bounds(&Self) -> (BitIdx<T::Mem>, BitEnd<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Gets the semantic head and tail indices that constrain which bits of the\n referent element may be accessed.\n","sig":null,"attributes":[{"value":"/ Gets the semantic head and tail indices that constrain which bits of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137744,"byte_end":137820,"line_start":777,"line_end":777,"column_start":2,"column_end":78}},{"value":"/ referent element may be accessed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137822,"byte_end":137859,"line_start":778,"line_end":778,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137861,"byte_end":137870,"line_start":779,"line_end":779,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137872,"byte_end":137902,"line_start":780,"line_end":780,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138092,"byte_end":138096,"line_start":788,"line_end":788,"column_start":9,"column_end":13},"name":"mask","qualname":"<PartialElement>::mask","value":"pub fn mask(&Self) -> BitMask<T::Mem>","parent":null,"children":[],"decl_id":null,"docs":" Gets the bit-mask over all accessible bits.\n","sig":null,"attributes":[{"value":"/ Gets the bit-mask over all accessible bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":137993,"byte_end":138040,"line_start":785,"line_end":785,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138042,"byte_end":138051,"line_start":786,"line_end":786,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138053,"byte_end":138083,"line_start":787,"line_end":787,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138235,"byte_end":138248,"line_start":794,"line_end":794,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<PartialElement>::into_bitslice","value":"pub fn into_bitslice(Self) -> Reference where\nAddress<M, BitSlice<T, O>>: Referential","parent":null,"children":[],"decl_id":null,"docs":" Converts the partial element into a bit-slice over its governed bits.\n","sig":null,"attributes":[{"value":"/ Converts the partial element into a bit-slice over its governed bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138142,"byte_end":138215,"line_start":792,"line_end":792,"column_start":2,"column_end":75}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138217,"byte_end":138226,"line_start":793,"line_end":793,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139098,"byte_end":139109,"line_start":827,"line_end":827,"column_start":9,"column_end":20},"name":"store_value","qualname":"<PartialElement>::store_value","value":"pub fn store_value(&mut Self, T::Mem) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Stores a value through `self` after masking away extra bits.","sig":null,"attributes":[{"value":"/ Stores a value through `self` after masking away extra bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138625,"byte_end":138689,"line_start":813,"line_end":813,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138691,"byte_end":138694,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138696,"byte_end":138713,"line_start":815,"line_end":815,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138715,"byte_end":138718,"line_start":816,"line_end":816,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138720,"byte_end":138737,"line_start":817,"line_end":817,"column_start":2,"column_end":19}},{"value":"/ - `value`: A bit-map which will be written into the governed bits. This","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138739,"byte_end":138814,"line_start":818,"line_end":818,"column_start":2,"column_end":77}},{"value":"/   is a bit-map store, not an integer store; the value will not be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138816,"byte_end":138885,"line_start":819,"line_end":819,"column_start":2,"column_end":71}},{"value":"/   shifted into position and will only be masked directly against the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138887,"byte_end":138959,"line_start":820,"line_end":820,"column_start":2,"column_end":74}},{"value":"/   bits that this partial-element governs.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138961,"byte_end":139006,"line_start":821,"line_end":821,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139008,"byte_end":139011,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139013,"byte_end":139027,"line_start":823,"line_end":823,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139029,"byte_end":139032,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ The previous value of the governed bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139034,"byte_end":139078,"line_start":825,"line_end":825,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139080,"byte_end":139089,"line_start":826,"line_end":826,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139480,"byte_end":139486,"line_start":841,"line_end":841,"column_start":9,"column_end":15},"name":"invert","qualname":"<PartialElement>::invert","value":"pub fn invert(&mut Self) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Inverts the value of each bit governed by the partial-element.","sig":null,"attributes":[{"value":"/ Inverts the value of each bit governed by the partial-element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139290,"byte_end":139356,"line_start":834,"line_end":834,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139358,"byte_end":139361,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139363,"byte_end":139377,"line_start":836,"line_end":836,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139379,"byte_end":139382,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ The previous value of the governed bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139384,"byte_end":139428,"line_start":838,"line_end":838,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139430,"byte_end":139439,"line_start":839,"line_end":839,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139441,"byte_end":139471,"line_start":840,"line_end":840,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139762,"byte_end":139767,"line_start":852,"line_end":852,"column_start":9,"column_end":14},"name":"clear","qualname":"<PartialElement>::clear","value":"pub fn clear(&mut Self) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits governed by the partial-element to `0`.","sig":null,"attributes":[{"value":"/ Clears all bits governed by the partial-element to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139579,"byte_end":139638,"line_start":845,"line_end":845,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139640,"byte_end":139643,"line_start":846,"line_end":846,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139645,"byte_end":139659,"line_start":847,"line_end":847,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139661,"byte_end":139664,"line_start":848,"line_end":848,"column_start":2,"column_end":5}},{"value":"/ The previous value of the governed bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139666,"byte_end":139710,"line_start":849,"line_end":849,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139712,"byte_end":139721,"line_start":850,"line_end":850,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139723,"byte_end":139753,"line_start":851,"line_end":851,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140040,"byte_end":140043,"line_start":863,"line_end":863,"column_start":9,"column_end":12},"name":"set","qualname":"<PartialElement>::set","value":"pub fn set(&mut Self) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits governed by the partial-element to `1`.","sig":null,"attributes":[{"value":"/ Sets all bits governed by the partial-element to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139859,"byte_end":139916,"line_start":856,"line_end":856,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139918,"byte_end":139921,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139923,"byte_end":139937,"line_start":858,"line_end":858,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139939,"byte_end":139942,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ The previous value of the governed bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139944,"byte_end":139988,"line_start":860,"line_end":860,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":139990,"byte_end":139999,"line_start":861,"line_end":861,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140001,"byte_end":140031,"line_start":862,"line_end":862,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140586,"byte_end":140605,"line_start":884,"line_end":884,"column_start":9,"column_end":28},"name":"store_value_aliased","qualname":"<PartialElement>::store_value_aliased","value":"pub fn store_value_aliased(&Self, T::Mem) -> T::Mem","parent":null,"children":[],"decl_id":null,"docs":" Performs a store operation on a partial-element whose bits might be\n observed by another handle.\n","sig":null,"attributes":[{"value":"/ Performs a store operation on a partial-element whose bits might be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140462,"byte_end":140533,"line_start":881,"line_end":881,"column_start":2,"column_end":73}},{"value":"/ observed by another handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140535,"byte_end":140566,"line_start":882,"line_end":882,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140568,"byte_end":140577,"line_start":883,"line_end":883,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1397},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1402},{"krate":0,"index":1405},{"krate":0,"index":1408},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1445},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1514},{"krate":0,"index":1527},{"krate":0,"index":1539},{"krate":0,"index":1551},{"krate":0,"index":1562},{"krate":0,"index":1573},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1594},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1603}],"decl_id":null,"docs":"# Bit-Field Memory Slots","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1514},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":147418,"byte_end":147426,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1521},{"krate":0,"index":1523},{"krate":0,"index":1525}],"decl_id":null,"docs":"# C-Style Bit-Field Access","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":147532,"byte_end":147536,"line_start":46,"line_end":46,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<I>(&Self) -> I where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Integer Loading","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":147430,"byte_end":147439,"line_start":43,"line_end":43,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":147441,"byte_end":147471,"line_start":44,"line_end":44,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148131,"byte_end":148136,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<I>(&mut Self, I) where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Integer Storing","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148028,"byte_end":148037,"line_start":69,"line_end":69,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148039,"byte_end":148069,"line_start":70,"line_end":70,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148713,"byte_end":148720,"line_start":96,"line_end":96,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<I>(&Self) -> I where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Little-Endian Integer Loading","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148820,"byte_end":148827,"line_start":100,"line_end":100,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<I>(&Self) -> I where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Big-Endian Integer Loading","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":148928,"byte_end":148936,"line_start":104,"line_end":104,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<I>(&mut Self, I) where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Little-Endian Integer Storing","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":149046,"byte_end":149054,"line_start":108,"line_end":108,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<I>(&mut Self, I) where I: Integral","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":"# Big-Endian Integer Storing","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1606},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1624},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1641},{"krate":0,"index":1644},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":5537},{"krate":0,"index":5541},{"krate":0,"index":5544},{"krate":0,"index":5546},{"krate":0,"index":5549},{"krate":0,"index":5551},{"krate":0,"index":5554},{"krate":0,"index":5558},{"krate":0,"index":5561},{"krate":0,"index":5563},{"krate":0,"index":5567},{"krate":0,"index":1658},{"krate":0,"index":1680},{"krate":0,"index":1683},{"krate":0,"index":1686},{"krate":0,"index":5570},{"krate":0,"index":5574},{"krate":0,"index":5577},{"krate":0,"index":5579},{"krate":0,"index":5582},{"krate":0,"index":5584},{"krate":0,"index":5587},{"krate":0,"index":5591},{"krate":0,"index":5594},{"krate":0,"index":5596},{"krate":0,"index":5600},{"krate":0,"index":1689},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":5603},{"krate":0,"index":5607},{"krate":0,"index":5610},{"krate":0,"index":5612},{"krate":0,"index":5615},{"krate":0,"index":5617},{"krate":0,"index":5620},{"krate":0,"index":5624},{"krate":0,"index":5627},{"krate":0,"index":5629},{"krate":0,"index":5633},{"krate":0,"index":1701},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1718},{"krate":0,"index":5636},{"krate":0,"index":5640},{"krate":0,"index":5643},{"krate":0,"index":5645},{"krate":0,"index":5648},{"krate":0,"index":5650},{"krate":0,"index":5653},{"krate":0,"index":5657},{"krate":0,"index":5660},{"krate":0,"index":5662},{"krate":0,"index":5666},{"krate":0,"index":1721},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":5669},{"krate":0,"index":5672},{"krate":0,"index":5675},{"krate":0,"index":5677},{"krate":0,"index":5680},{"krate":0,"index":5682},{"krate":0,"index":5685},{"krate":0,"index":5689},{"krate":0,"index":5692},{"krate":0,"index":5694},{"krate":0,"index":5698},{"krate":0,"index":1742},{"krate":0,"index":1750},{"krate":0,"index":1753},{"krate":0,"index":1756},{"krate":0,"index":5701},{"krate":0,"index":5704},{"krate":0,"index":5707},{"krate":0,"index":5709},{"krate":0,"index":5712},{"krate":0,"index":5714},{"krate":0,"index":5717},{"krate":0,"index":5721},{"krate":0,"index":5724},{"krate":0,"index":5726},{"krate":0,"index":5730},{"krate":0,"index":1759},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":1774},{"krate":0,"index":1777},{"krate":0,"index":1781},{"krate":0,"index":1785},{"krate":0,"index":1789}],"decl_id":null,"docs":"# Bit Indices","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5537},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":171708,"byte_end":171714,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":5539},{"krate":0,"index":5540}],"decl_id":null,"docs":"# Semantic Bit Index","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":171558,"byte_end":171578,"line_start":32,"line_end":32,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":1660},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172005,"byte_end":172008,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"MAX","qualname":"::index::BitIdx::<R>::MAX","value":"Self","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" The inclusive maximum index within an `R` element.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum index within an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":171939,"byte_end":171993,"line_start":47,"line_end":47,"column_start":2,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":1661},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172131,"byte_end":172134,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"MIN","qualname":"::index::BitIdx::<R>::MIN","value":"Self","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" The inclusive minimum index within an `R` element.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum index within an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172065,"byte_end":172119,"line_start":52,"line_end":52,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172580,"byte_end":172583,"line_start":70,"line_end":70,"column_start":9,"column_end":12},"name":"new","qualname":"<BitIdx<R>>::new","value":"pub fn new(u8) -> Result<Self, BitIdxError<R>>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good index into an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172186,"byte_end":172255,"line_start":58,"line_end":58,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172257,"byte_end":172260,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172262,"byte_end":172279,"line_start":60,"line_end":60,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172281,"byte_end":172284,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ - `idx`: The counter value to mark as an index. This must be in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172286,"byte_end":172357,"line_start":62,"line_end":62,"column_start":2,"column_end":73}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172359,"byte_end":172386,"line_start":63,"line_end":63,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172388,"byte_end":172391,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172393,"byte_end":172407,"line_start":65,"line_end":65,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172409,"byte_end":172412,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ This returns `idx`, either marked as a valid `BitIdx` or an invalid","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172414,"byte_end":172485,"line_start":67,"line_end":67,"column_start":2,"column_end":73}},{"value":"/ `BitIdxError` by whether it is within the valid range `0 .. R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172487,"byte_end":172560,"line_start":68,"line_end":68,"column_start":2,"column_end":75}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172562,"byte_end":172571,"line_start":69,"line_end":69,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173273,"byte_end":173286,"line_start":94,"line_end":94,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172751,"byte_end":172823,"line_start":77,"line_end":77,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172825,"byte_end":172828,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172830,"byte_end":172847,"line_start":79,"line_end":79,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172849,"byte_end":172852,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ - `idx`: The counter value to mark as an index. This must be in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172854,"byte_end":172925,"line_start":81,"line_end":81,"column_start":2,"column_end":73}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172927,"byte_end":172954,"line_start":82,"line_end":82,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172956,"byte_end":172959,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172961,"byte_end":172975,"line_start":84,"line_end":84,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172977,"byte_end":172980,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ This unconditionally marks `idx` as a valid bit-index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":172982,"byte_end":173040,"line_start":86,"line_end":86,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173042,"byte_end":173045,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173047,"byte_end":173060,"line_start":88,"line_end":88,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173062,"byte_end":173065,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ If the `idx` value is outside the valid range, then the program is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173067,"byte_end":173137,"line_start":90,"line_end":90,"column_start":2,"column_end":72}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173139,"byte_end":173212,"line_start":91,"line_end":91,"column_start":2,"column_end":75}},{"value":"/ value or specify a behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173214,"byte_end":173246,"line_start":92,"line_end":92,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173248,"byte_end":173257,"line_start":93,"line_end":93,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173592,"byte_end":173602,"line_start":110,"line_end":110,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdx<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the index wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the index wrapper, leaving the internal counter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173480,"byte_end":173540,"line_start":107,"line_end":107,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173542,"byte_end":173551,"line_start":108,"line_end":108,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173553,"byte_end":173583,"line_start":109,"line_end":109,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173940,"byte_end":173944,"line_start":125,"line_end":125,"column_start":9,"column_end":13},"name":"next","qualname":"<BitIdx<R>>::next","value":"pub fn next(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Increments an index counter, wrapping at the back edge of the register.","sig":null,"attributes":[{"value":"/ Increments an index counter, wrapping at the back edge of the register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173633,"byte_end":173708,"line_start":114,"line_end":114,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173710,"byte_end":173713,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173715,"byte_end":173732,"line_start":116,"line_end":116,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173734,"byte_end":173737,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to increment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173739,"byte_end":173776,"line_start":118,"line_end":118,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173778,"byte_end":173781,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173783,"byte_end":173797,"line_start":120,"line_end":120,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173799,"byte_end":173802,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The next index after `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173804,"byte_end":173844,"line_start":122,"line_end":122,"column_start":2,"column_end":42}},{"value":"/ - `.1`: Indicates whether the new index is in the next memory address.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173846,"byte_end":173920,"line_start":123,"line_end":123,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":173922,"byte_end":173931,"line_start":124,"line_end":124,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174417,"byte_end":174421,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"name":"prev","qualname":"<BitIdx<R>>::prev","value":"pub fn prev(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Decrements an index counter, wrapping at the front edge of the register.","sig":null,"attributes":[{"value":"/ Decrements an index counter, wrapping at the front edge of the register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174093,"byte_end":174169,"line_start":133,"line_end":133,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174171,"byte_end":174174,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174176,"byte_end":174193,"line_start":135,"line_end":135,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174195,"byte_end":174198,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to decrement.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174200,"byte_end":174237,"line_start":137,"line_end":137,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174239,"byte_end":174242,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174244,"byte_end":174258,"line_start":139,"line_end":139,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174260,"byte_end":174263,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The previous index before `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174265,"byte_end":174310,"line_start":141,"line_end":141,"column_start":2,"column_end":47}},{"value":"/ - `.1`: Indicates whether the new index is in the previous memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174312,"byte_end":174381,"line_start":142,"line_end":142,"column_start":2,"column_end":71}},{"value":"/   address.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174383,"byte_end":174397,"line_start":143,"line_end":143,"column_start":2,"column_end":16}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174399,"byte_end":174408,"line_start":144,"line_end":144,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174862,"byte_end":174870,"line_start":161,"line_end":161,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174567,"byte_end":174641,"line_start":153,"line_end":153,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174643,"byte_end":174646,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::at::<R>`], which is the only public, safe,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174648,"byte_end":174716,"line_start":155,"line_end":155,"column_start":2,"column_end":70}},{"value":"/ constructor for a position counter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174718,"byte_end":174757,"line_start":156,"line_end":156,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174759,"byte_end":174762,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`O::at::<R>`]: crate::order::BitOrder::at","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174764,"byte_end":174810,"line_start":158,"line_end":158,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174812,"byte_end":174821,"line_start":159,"line_end":159,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174823,"byte_end":174853,"line_start":160,"line_end":160,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175239,"byte_end":175245,"line_start":174,"line_end":174,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":174938,"byte_end":175010,"line_start":166,"line_end":166,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175012,"byte_end":175015,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::select::<R>`], which is the only public, safe,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175017,"byte_end":175089,"line_start":168,"line_end":168,"column_start":2,"column_end":74}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175091,"byte_end":175126,"line_start":169,"line_end":169,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175128,"byte_end":175131,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ [`O::select::<R>`]: crate::order::BitOrder::select","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175133,"byte_end":175187,"line_start":171,"line_end":171,"column_start":2,"column_end":56}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175189,"byte_end":175198,"line_start":172,"line_end":172,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175200,"byte_end":175230,"line_start":173,"line_end":173,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175524,"byte_end":175528,"line_start":186,"line_end":186,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175317,"byte_end":175378,"line_start":179,"line_end":179,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175380,"byte_end":175383,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175385,"byte_end":175431,"line_start":181,"line_end":181,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175433,"byte_end":175436,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175438,"byte_end":175472,"line_start":183,"line_end":183,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175474,"byte_end":175483,"line_start":184,"line_end":184,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175485,"byte_end":175515,"line_start":185,"line_end":185,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176502,"byte_end":176507,"line_start":217,"line_end":217,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitEnd<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all indices between an inclusive start and exclusive end\n point.","sig":null,"attributes":[{"value":"/ Iterates over all indices between an inclusive start and exclusive end","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175606,"byte_end":175680,"line_start":191,"line_end":191,"column_start":2,"column_end":76}},{"value":"/ point.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175682,"byte_end":175692,"line_start":192,"line_end":192,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175694,"byte_end":175697,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175699,"byte_end":175773,"line_start":194,"line_end":194,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogeneous ranges are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175775,"byte_end":175850,"line_start":195,"line_end":195,"column_start":2,"column_end":77}},{"value":"/ not supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175852,"byte_end":175923,"line_start":196,"line_end":196,"column_start":2,"column_end":73}},{"value":"/ [`Range<BitIdx<R>>`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175925,"byte_end":175950,"line_start":197,"line_end":197,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175952,"byte_end":175955,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175957,"byte_end":175973,"line_start":199,"line_end":199,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175975,"byte_end":175978,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":175980,"byte_end":176054,"line_start":201,"line_end":201,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176056,"byte_end":176093,"line_start":202,"line_end":202,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176095,"byte_end":176170,"line_start":203,"line_end":203,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176172,"byte_end":176217,"line_start":204,"line_end":204,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176219,"byte_end":176222,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176224,"byte_end":176237,"line_start":206,"line_end":206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176239,"byte_end":176242,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176244,"byte_end":176314,"line_start":208,"line_end":208,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176316,"byte_end":176319,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176321,"byte_end":176339,"line_start":210,"line_end":210,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176341,"byte_end":176344,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176346,"byte_end":176388,"line_start":212,"line_end":212,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176390,"byte_end":176393,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176395,"byte_end":176438,"line_start":214,"line_end":214,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitIdx<R>>`]: core::ops::Range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176440,"byte_end":176482,"line_start":215,"line_end":215,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176484,"byte_end":176493,"line_start":216,"line_end":216,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176893,"byte_end":176902,"line_start":231,"line_end":231,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitIdx<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible index values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible index values.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176829,"byte_end":176873,"line_start":229,"line_end":229,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":176875,"byte_end":176884,"line_start":230,"line_end":230,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5570},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180053,"byte_end":180064,"line_start":330,"line_end":330,"column_start":12,"column_end":23},"name":"BitIdxError","qualname":"::index::BitIdxError","value":"BitIdxError {  }","parent":null,"children":[{"krate":0,"index":5572},{"krate":0,"index":5573}],"decl_id":null,"docs":"# Bit Index Error","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179898,"byte_end":179918,"line_start":327,"line_end":327,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181009,"byte_end":181019,"line_start":374,"line_end":374,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdxError<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the error wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the error wrapper, leaving the internal counter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180897,"byte_end":180957,"line_start":371,"line_end":371,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180959,"byte_end":180968,"line_start":372,"line_end":372,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180970,"byte_end":181000,"line_start":373,"line_end":373,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5603},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181794,"byte_end":181800,"line_start":410,"line_end":410,"column_start":12,"column_end":18},"name":"BitEnd","qualname":"::index::BitEnd","value":"BitEnd {  }","parent":null,"children":[{"krate":0,"index":5605},{"krate":0,"index":5606}],"decl_id":null,"docs":"# One-Bit-After Tail Index","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181644,"byte_end":181664,"line_start":407,"line_end":407,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":1703},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182113,"byte_end":182116,"line_start":424,"line_end":424,"column_start":12,"column_end":15},"name":"MAX","qualname":"::index::BitEnd::<R>::MAX","value":"Self","parent":{"krate":0,"index":1701},"children":[],"decl_id":null,"docs":" The inclusive maximum tail within (or after) an `R` element.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum tail within (or after) an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182037,"byte_end":182101,"line_start":423,"line_end":423,"column_start":2,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":1704},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182262,"byte_end":182265,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"MIN","qualname":"::index::BitEnd::<R>::MIN","value":"Self","parent":{"krate":0,"index":1701},"children":[],"decl_id":null,"docs":" The inclusive minimum tail within (or after) an `R` element.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum tail within (or after) an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182186,"byte_end":182250,"line_start":428,"line_end":428,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182668,"byte_end":182671,"line_start":446,"line_end":446,"column_start":9,"column_end":12},"name":"new","qualname":"<BitEnd<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good tail of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good tail of an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182317,"byte_end":182383,"line_start":434,"line_end":434,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182385,"byte_end":182388,"line_start":435,"line_end":435,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182390,"byte_end":182407,"line_start":436,"line_end":436,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182409,"byte_end":182412,"line_start":437,"line_end":437,"column_start":2,"column_end":5}},{"value":"/ - `end`: The counter value to mark as a tail. This must be in the range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182414,"byte_end":182489,"line_start":438,"line_end":438,"column_start":2,"column_end":77}},{"value":"/   `0 ..= R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182491,"byte_end":182513,"line_start":439,"line_end":439,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182515,"byte_end":182518,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182520,"byte_end":182534,"line_start":441,"line_end":441,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182536,"byte_end":182539,"line_start":442,"line_end":442,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(end)` when it is in the valid range `0 ..= R::BITS`,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182541,"byte_end":182616,"line_start":443,"line_end":443,"column_start":2,"column_end":77}},{"value":"/ and `None` when it is not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182618,"byte_end":182648,"line_start":444,"line_end":444,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182650,"byte_end":182659,"line_start":445,"line_end":445,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183635,"byte_end":183645,"line_start":485,"line_end":485,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitEnd<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the tail wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the tail wrapper, leaving the internal counter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183524,"byte_end":183583,"line_start":482,"line_end":482,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183585,"byte_end":183594,"line_start":483,"line_end":483,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183596,"byte_end":183626,"line_start":484,"line_end":484,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184378,"byte_end":184388,"line_start":509,"line_end":509,"column_start":9,"column_end":19},"name":"range_from","qualname":"<BitEnd<R>>::range_from","value":"pub fn range_from(BitIdx<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all tail indices at and after an inclusive starting point.","sig":null,"attributes":[{"value":"/ Iterates over all tail indices at and after an inclusive starting point.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183676,"byte_end":183752,"line_start":489,"line_end":489,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183754,"byte_end":183757,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183759,"byte_end":183833,"line_start":491,"line_end":491,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogeneous ranges are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183835,"byte_end":183910,"line_start":492,"line_end":492,"column_start":2,"column_end":77}},{"value":"/ not yet supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183912,"byte_end":183987,"line_start":493,"line_end":493,"column_start":2,"column_end":77}},{"value":"/ [`Range<BitEnd<R>>`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":183989,"byte_end":184014,"line_start":494,"line_end":494,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184016,"byte_end":184019,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184021,"byte_end":184037,"line_start":496,"line_end":496,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184039,"byte_end":184042,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184044,"byte_end":184118,"line_start":498,"line_end":498,"column_start":2,"column_end":76}},{"value":"/   tail produced by the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184120,"byte_end":184156,"line_start":499,"line_end":499,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184158,"byte_end":184161,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184163,"byte_end":184176,"line_start":501,"line_end":501,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184178,"byte_end":184181,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from ..=","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184183,"byte_end":184247,"line_start":503,"line_end":503,"column_start":2,"column_end":66}},{"value":"/ Self::MAX`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184249,"byte_end":184264,"line_start":504,"line_end":504,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184266,"byte_end":184269,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184271,"byte_end":184314,"line_start":506,"line_end":506,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitEnd<R>>`]: core::ops::Range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184316,"byte_end":184358,"line_start":507,"line_end":507,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":184360,"byte_end":184369,"line_start":508,"line_end":508,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5636},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186805,"byte_end":186811,"line_start":600,"line_end":600,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":5638},{"krate":0,"index":5639}],"decl_id":null,"docs":"# Bit Position","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186604,"byte_end":186624,"line_start":596,"line_end":596,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":1723},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187127,"byte_end":187130,"line_start":614,"line_end":614,"column_start":12,"column_end":15},"name":"MAX","qualname":"::index::BitPos::<R>::MAX","value":"Self","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" The position value of the most significant bit in an `R` element.\n","sig":null,"attributes":[{"value":"/ The position value of the most significant bit in an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187046,"byte_end":187115,"line_start":613,"line_end":613,"column_start":2,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":1724},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187275,"byte_end":187278,"line_start":619,"line_end":619,"column_start":12,"column_end":15},"name":"MIN","qualname":"::index::BitPos::<R>::MIN","value":"Self","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" The position value of the least significant bit in an `R` element.\n","sig":null,"attributes":[{"value":"/ The position value of the least significant bit in an `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187193,"byte_end":187263,"line_start":618,"line_end":618,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187691,"byte_end":187694,"line_start":636,"line_end":636,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPos<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good position within an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187330,"byte_end":187404,"line_start":624,"line_end":624,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187406,"byte_end":187409,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187411,"byte_end":187428,"line_start":626,"line_end":626,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187430,"byte_end":187433,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ - `pos`: The counter value to mark as a position. This must be in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187435,"byte_end":187508,"line_start":628,"line_end":628,"column_start":2,"column_end":75}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187510,"byte_end":187537,"line_start":629,"line_end":629,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187539,"byte_end":187542,"line_start":630,"line_end":630,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187544,"byte_end":187558,"line_start":631,"line_end":631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187560,"byte_end":187563,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(pos)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187565,"byte_end":187639,"line_start":633,"line_end":633,"column_start":2,"column_end":76}},{"value":"/ and `None` when it is not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187641,"byte_end":187671,"line_start":634,"line_end":634,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187673,"byte_end":187682,"line_start":635,"line_end":635,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188365,"byte_end":188378,"line_start":661,"line_end":661,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good position within an `R`\n register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good position within an `R`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187826,"byte_end":187893,"line_start":643,"line_end":643,"column_start":2,"column_end":69}},{"value":"/ register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187895,"byte_end":187908,"line_start":644,"line_end":644,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187910,"byte_end":187913,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187915,"byte_end":187932,"line_start":646,"line_end":646,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187934,"byte_end":187937,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187939,"byte_end":188014,"line_start":648,"line_end":648,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188016,"byte_end":188043,"line_start":649,"line_end":649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188045,"byte_end":188048,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188050,"byte_end":188064,"line_start":651,"line_end":651,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188066,"byte_end":188069,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ This unconditionally marks `pos` as a valid bit-position.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188071,"byte_end":188132,"line_start":653,"line_end":653,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188134,"byte_end":188137,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188139,"byte_end":188152,"line_start":655,"line_end":655,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188154,"byte_end":188157,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ If the `pos` value is outside the valid range, then the program is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188159,"byte_end":188229,"line_start":657,"line_end":657,"column_start":2,"column_end":72}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188231,"byte_end":188304,"line_start":658,"line_end":658,"column_start":2,"column_end":75}},{"value":"/ value or specify a behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188306,"byte_end":188338,"line_start":659,"line_end":659,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188340,"byte_end":188349,"line_start":660,"line_end":660,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188690,"byte_end":188700,"line_start":677,"line_end":677,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitPos<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the position wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the position wrapper, leaving the internal counter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188575,"byte_end":188638,"line_start":674,"line_end":674,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188640,"byte_end":188649,"line_start":675,"line_end":675,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188651,"byte_end":188681,"line_start":676,"line_end":676,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188847,"byte_end":188853,"line_start":685,"line_end":685,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self`.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188731,"byte_end":188785,"line_start":681,"line_end":681,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188787,"byte_end":188790,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ This is always `1 << self.pos`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188792,"byte_end":188827,"line_start":683,"line_end":683,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188829,"byte_end":188838,"line_start":684,"line_end":684,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189142,"byte_end":189146,"line_start":696,"line_end":696,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188935,"byte_end":188996,"line_start":689,"line_end":689,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":188998,"byte_end":189001,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189003,"byte_end":189049,"line_start":691,"line_end":691,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189051,"byte_end":189054,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189056,"byte_end":189090,"line_start":693,"line_end":693,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189092,"byte_end":189101,"line_start":694,"line_end":694,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189103,"byte_end":189133,"line_start":695,"line_end":695,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5669},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190169,"byte_end":190175,"line_start":741,"line_end":741,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":5671}],"decl_id":null,"docs":"# One-Hot Bit Selection Mask","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189968,"byte_end":189988,"line_start":737,"line_end":737,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190644,"byte_end":190647,"line_start":762,"line_end":762,"column_start":9,"column_end":12},"name":"new","qualname":"<BitSel<R>>::new","value":"pub fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as a known-good selection in an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as a known-good selection in an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190295,"byte_end":190367,"line_start":751,"line_end":751,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190369,"byte_end":190372,"line_start":752,"line_end":752,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190374,"byte_end":190391,"line_start":753,"line_end":753,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190393,"byte_end":190396,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190398,"byte_end":190464,"line_start":755,"line_end":755,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190466,"byte_end":190469,"line_start":756,"line_end":756,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190471,"byte_end":190485,"line_start":757,"line_end":757,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190487,"byte_end":190490,"line_start":758,"line_end":758,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(sel)` when it is a power of two (exactly one bit set","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190492,"byte_end":190567,"line_start":759,"line_end":759,"column_start":2,"column_end":77}},{"value":"/ and all others cleared), and `None` when it is not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190569,"byte_end":190624,"line_start":760,"line_end":760,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190626,"byte_end":190635,"line_start":761,"line_end":761,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191314,"byte_end":191327,"line_start":785,"line_end":785,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as an assumed-good selection in an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as an assumed-good selection in an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190772,"byte_end":190847,"line_start":769,"line_end":769,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190849,"byte_end":190852,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190854,"byte_end":190871,"line_start":771,"line_end":771,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190873,"byte_end":190876,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190878,"byte_end":190944,"line_start":773,"line_end":773,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190946,"byte_end":190949,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190951,"byte_end":190965,"line_start":775,"line_end":775,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190967,"byte_end":190970,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ This unconditionally marks `sel` as a one-hot bit selector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190972,"byte_end":191035,"line_start":777,"line_end":777,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191037,"byte_end":191040,"line_start":778,"line_end":778,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191042,"byte_end":191055,"line_start":779,"line_end":779,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191057,"byte_end":191060,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ If the `sel` value has zero or multiple bits set, then it is invalid to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191062,"byte_end":191137,"line_start":781,"line_end":781,"column_start":2,"column_end":77}},{"value":"/ be used as a `BitSel` and the program is incorrect. Debug builds will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191139,"byte_end":191212,"line_start":782,"line_end":782,"column_start":2,"column_end":75}},{"value":"/ panic; release builds do not inspect the value or specify a behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191214,"byte_end":191287,"line_start":783,"line_end":783,"column_start":2,"column_end":75}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191289,"byte_end":191298,"line_start":784,"line_end":784,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191639,"byte_end":191649,"line_start":798,"line_end":798,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitSel<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the one-hot selection wrapper, leaving the internal mask.\n","sig":null,"attributes":[{"value":"/ Removes the one-hot selection wrapper, leaving the internal mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191518,"byte_end":191587,"line_start":795,"line_end":795,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191589,"byte_end":191598,"line_start":796,"line_end":796,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191600,"byte_end":191630,"line_start":797,"line_end":797,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191787,"byte_end":191791,"line_start":805,"line_end":805,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes a bit-mask for `self`. This is a type-cast.\n","sig":null,"attributes":[{"value":"/ Computes a bit-mask for `self`. This is a type-cast.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191679,"byte_end":191735,"line_start":802,"line_end":802,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191737,"byte_end":191746,"line_start":803,"line_end":803,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191748,"byte_end":191778,"line_start":804,"line_end":804,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191911,"byte_end":191920,"line_start":811,"line_end":811,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible selector values.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191844,"byte_end":191891,"line_start":809,"line_end":809,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":191893,"byte_end":191902,"line_start":810,"line_end":810,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5701},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192733,"byte_end":192740,"line_start":849,"line_end":849,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":5703}],"decl_id":null,"docs":"# Multi-Bit Selection Mask","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192582,"byte_end":192602,"line_start":846,"line_end":846,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":1761},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192927,"byte_end":192930,"line_start":860,"line_end":860,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":1759},"children":[],"decl_id":null,"docs":" A full bit-mask with every bit set.\n","sig":null,"attributes":[{"value":"/ A full bit-mask with every bit set.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192876,"byte_end":192915,"line_start":859,"line_end":859,"column_start":2,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":1762},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193020,"byte_end":193024,"line_start":862,"line_end":862,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":1759},"children":[],"decl_id":null,"docs":" An empty bit-mask with every bit cleared.\n","sig":null,"attributes":[{"value":"/ An empty bit-mask with every bit cleared.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192963,"byte_end":193008,"line_start":861,"line_end":861,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193737,"byte_end":193740,"line_start":888,"line_end":888,"column_start":9,"column_end":12},"name":"new","qualname":"<BitMask<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193059,"byte_end":193097,"line_start":864,"line_end":864,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193099,"byte_end":193102,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193104,"byte_end":193179,"line_start":866,"line_end":866,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and instead using it only as","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193181,"byte_end":193256,"line_start":867,"line_end":867,"column_start":2,"column_end":77}},{"value":"/ a bit-mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193258,"byte_end":193273,"line_start":868,"line_end":868,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193275,"byte_end":193278,"line_start":869,"line_end":869,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193280,"byte_end":193297,"line_start":870,"line_end":870,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193299,"byte_end":193302,"line_start":871,"line_end":871,"column_start":2,"column_end":5}},{"value":"/ - `mask`: Some integer to use as a bit-mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193304,"byte_end":193352,"line_start":872,"line_end":872,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193354,"byte_end":193357,"line_start":873,"line_end":873,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193359,"byte_end":193373,"line_start":874,"line_end":874,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193375,"byte_end":193378,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ The `mask` value wrapped as a bit-mask, with its numeric context","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193380,"byte_end":193448,"line_start":876,"line_end":876,"column_start":2,"column_end":70}},{"value":"/ discarded.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193450,"byte_end":193464,"line_start":877,"line_end":877,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193466,"byte_end":193469,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating [`BitSel`] values using its `Sum` implementation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193471,"byte_end":193544,"line_start":879,"line_end":879,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193546,"byte_end":193549,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193551,"byte_end":193564,"line_start":881,"line_end":881,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193566,"byte_end":193569,"line_start":882,"line_end":882,"column_start":2,"column_end":5}},{"value":"/ The `mask` value must be computed from a set of valid bit positions in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193571,"byte_end":193645,"line_start":883,"line_end":883,"column_start":2,"column_end":76}},{"value":"/ the caller’s context.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193647,"byte_end":193674,"line_start":884,"line_end":884,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193676,"byte_end":193679,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ [`BitSel`]: crate::index::BitSel","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193681,"byte_end":193717,"line_start":886,"line_end":886,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193719,"byte_end":193728,"line_start":887,"line_end":887,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193890,"byte_end":193900,"line_start":895,"line_end":895,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitMask<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the mask wrapper, leaving the internal value.\n","sig":null,"attributes":[{"value":"/ Removes the mask wrapper, leaving the internal value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193781,"byte_end":193838,"line_start":892,"line_end":892,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193840,"byte_end":193849,"line_start":893,"line_end":893,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193851,"byte_end":193881,"line_start":894,"line_end":894,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194201,"byte_end":194205,"line_start":910,"line_end":910,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(&Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests if a mask contains a given selector bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193931,"byte_end":193981,"line_start":899,"line_end":899,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193983,"byte_end":193986,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":193988,"byte_end":194005,"line_start":901,"line_end":901,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194007,"byte_end":194010,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The mask being tested.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194012,"byte_end":194049,"line_start":903,"line_end":903,"column_start":2,"column_end":39}},{"value":"/ - `sel`: A selector bit to test in `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194051,"byte_end":194097,"line_start":904,"line_end":904,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194099,"byte_end":194102,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194104,"byte_end":194118,"line_start":906,"line_end":906,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194120,"byte_end":194123,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ Whether `self` has set the bit that `sel` indicates.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194125,"byte_end":194181,"line_start":908,"line_end":908,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194183,"byte_end":194192,"line_start":909,"line_end":909,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194527,"byte_end":194533,"line_start":925,"line_end":925,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector bit into a mask.","sig":null,"attributes":[{"value":"/ Inserts a selector bit into a mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194277,"byte_end":194316,"line_start":914,"line_end":914,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194318,"byte_end":194321,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194323,"byte_end":194340,"line_start":916,"line_end":916,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194342,"byte_end":194345,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The mask being modified.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194347,"byte_end":194390,"line_start":918,"line_end":918,"column_start":2,"column_end":45}},{"value":"/ - `sel`: A selector bit to insert into `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194392,"byte_end":194442,"line_start":919,"line_end":919,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194444,"byte_end":194447,"line_start":920,"line_end":920,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194449,"byte_end":194463,"line_start":921,"line_end":921,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194465,"byte_end":194468,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ The `sel` bit is set in the mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194470,"byte_end":194507,"line_start":923,"line_end":923,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194509,"byte_end":194518,"line_start":924,"line_end":924,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194854,"byte_end":194861,"line_start":940,"line_end":940,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194592,"byte_end":194645,"line_start":929,"line_end":929,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194647,"byte_end":194650,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194652,"byte_end":194669,"line_start":931,"line_end":931,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194671,"byte_end":194674,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ - `self`: The original mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194676,"byte_end":194708,"line_start":933,"line_end":933,"column_start":2,"column_end":34}},{"value":"/ - `sel`: The selector bit being added into the mask.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194710,"byte_end":194766,"line_start":934,"line_end":934,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194768,"byte_end":194771,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194773,"byte_end":194787,"line_start":936,"line_end":936,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194789,"byte_end":194792,"line_start":937,"line_end":937,"column_start":2,"column_end":5}},{"value":"/ A new bit-mask with `sel` activated.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194794,"byte_end":194834,"line_start":938,"line_end":938,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194836,"byte_end":194845,"line_start":939,"line_end":939,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1793},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1811},{"krate":0,"index":5733},{"krate":0,"index":5735},{"krate":0,"index":5737},{"krate":0,"index":1812},{"krate":0,"index":5739},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":5741},{"krate":0,"index":5744},{"krate":0,"index":5747},{"krate":0,"index":5749},{"krate":0,"index":5752},{"krate":0,"index":5755},{"krate":0,"index":5757},{"krate":0,"index":5760},{"krate":0,"index":5764},{"krate":0,"index":5767},{"krate":0,"index":5769},{"krate":0,"index":5773},{"krate":0,"index":1823},{"krate":0,"index":5776},{"krate":0,"index":5778},{"krate":0,"index":5788},{"krate":0,"index":5791},{"krate":0,"index":5780},{"krate":0,"index":5782},{"krate":0,"index":5793},{"krate":0,"index":5796},{"krate":0,"index":5784},{"krate":0,"index":5786},{"krate":0,"index":5798},{"krate":0,"index":5801},{"krate":0,"index":5803},{"krate":0,"index":5805},{"krate":0,"index":5807},{"krate":0,"index":5810},{"krate":0,"index":5812},{"krate":0,"index":5814},{"krate":0,"index":5816},{"krate":0,"index":5819}],"decl_id":null,"docs":"# Memory Element Descriptions","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1807},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205141,"byte_end":205152,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::mem::BitRegister","value":"BitRegister: Unsigned + BitOps","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810}],"decl_id":null,"docs":"# Register Descriptions","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1808},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205258,"byte_end":205262,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitRegister::INDX","value":"u8","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205175,"byte_end":205250,"line_start":13,"line_end":13,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":1809},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205470,"byte_end":205474,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitRegister::MASK","value":"u8","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n This is the value with the least significant `INDX`-many bits set high.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205312,"byte_end":205385,"line_start":15,"line_end":15,"column_start":2,"column_end":75}},{"value":"/ This is the value with the least significant `INDX`-many bits set high.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205387,"byte_end":205462,"line_start":16,"line_end":16,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":1810},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205540,"byte_end":205543,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitRegister::ALL","value":"Self","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" The literal `!0`.\n","sig":null,"attributes":[{"value":"/ The literal `!0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205511,"byte_end":205532,"line_start":18,"line_end":18,"column_start":2,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":1814},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206101,"byte_end":206108,"line_start":46,"line_end":46,"column_start":14,"column_end":21},"name":"bits_of","qualname":"::mem::bits_of","value":"pub const fn bits_of<T>() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits in a value of type `T`.\n","sig":null,"attributes":[{"value":"/ Counts the number of bits in a value of type `T`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206034,"byte_end":206087,"line_start":45,"line_end":45,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1816},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206248,"byte_end":206252,"line_start":51,"line_end":51,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"# Bit Storage Calculator","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1818},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206501,"byte_end":206516,"line_start":62,"line_end":62,"column_start":14,"column_end":29},"name":"aligned_to_size","qualname":"::mem::aligned_to_size","value":"pub const fn aligned_to_size<T>() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a type has alignment equal to its size.\n","sig":null,"attributes":[{"value":"/ Tests if a type has alignment equal to its size.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206389,"byte_end":206441,"line_start":59,"line_end":59,"column_start":1,"column_end":53}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206457,"byte_end":206487,"line_start":61,"line_end":61,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1820},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206717,"byte_end":206726,"line_start":69,"line_end":69,"column_start":14,"column_end":23},"name":"layout_eq","qualname":"::mem::layout_eq","value":"pub const fn layout_eq<T, U>() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if two types have identical layouts (size and alignment are equal).\n","sig":null,"attributes":[{"value":"/ Tests if two types have identical layouts (size and alignment are equal).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206580,"byte_end":206657,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206673,"byte_end":206703,"line_start":68,"line_end":68,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5741},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":207016,"byte_end":207026,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"BitElement","qualname":"::mem::BitElement","value":"BitElement { elem }","parent":null,"children":[{"krate":0,"index":5743}],"decl_id":null,"docs":"# Unified Element Constructor","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":206857,"byte_end":206877,"line_start":75,"line_end":75,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":5743},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":207045,"byte_end":207049,"line_start":79,"line_end":79,"column_start":6,"column_end":10},"name":"elem","qualname":"::mem::BitElement::elem","value":"T","parent":{"krate":0,"index":5741},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1824},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","parent":null,"children":[{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1836},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":5821},{"krate":0,"index":5823},{"krate":0,"index":5825},{"krate":0,"index":5826},{"krate":0,"index":5828},{"krate":0,"index":5830},{"krate":0,"index":5831},{"krate":0,"index":5833},{"krate":0,"index":5836},{"krate":0,"index":5838},{"krate":0,"index":5839},{"krate":0,"index":5841},{"krate":0,"index":5843},{"krate":0,"index":5845},{"krate":0,"index":5847},{"krate":0,"index":5848},{"krate":0,"index":5850},{"krate":0,"index":5852},{"krate":0,"index":5853},{"krate":0,"index":5855},{"krate":0,"index":5858},{"krate":0,"index":5860},{"krate":0,"index":5861},{"krate":0,"index":5863},{"krate":0,"index":1858},{"krate":0,"index":1867},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1879},{"krate":0,"index":1881}],"decl_id":null,"docs":"# In-Element Bit Ordering","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1849},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209064,"byte_end":209072,"line_start":18,"line_end":18,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder: 'static","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854}],"decl_id":null,"docs":"# In-Element Bit Ordering","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211028,"byte_end":211030,"line_start":61,"line_end":61,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" Translates a semantic bit index into a real bit position.","sig":null,"attributes":[{"value":"/ Translates a semantic bit index into a real bit position.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209085,"byte_end":209146,"line_start":19,"line_end":19,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209148,"byte_end":209151,"line_start":20,"line_end":20,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209153,"byte_end":209228,"line_start":21,"line_end":21,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be correct.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209230,"byte_end":209292,"line_start":22,"line_end":22,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209294,"byte_end":209297,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ ## Type Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209299,"byte_end":209321,"line_start":24,"line_end":24,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209323,"byte_end":209326,"line_start":25,"line_end":25,"column_start":2,"column_end":5}},{"value":"/ - `R`: The memory element type that the index and position govern.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209328,"byte_end":209398,"line_start":26,"line_end":26,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209400,"byte_end":209403,"line_start":27,"line_end":27,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209405,"byte_end":209422,"line_start":28,"line_end":28,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209424,"byte_end":209427,"line_start":29,"line_end":29,"column_start":2,"column_end":5}},{"value":"/ - `index`: A semantic bit-index within some `R` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209429,"byte_end":209489,"line_start":30,"line_end":30,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209491,"byte_end":209494,"line_start":31,"line_end":31,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209496,"byte_end":209510,"line_start":32,"line_end":32,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209512,"byte_end":209515,"line_start":33,"line_end":33,"column_start":2,"column_end":5}},{"value":"/ The real position of the indexed bit within an `R` element. See the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209517,"byte_end":209588,"line_start":34,"line_end":34,"column_start":2,"column_end":73}},{"value":"/ `BitPos` documentation for what these positions are considered to mean.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209590,"byte_end":209665,"line_start":35,"line_end":35,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209667,"byte_end":209670,"line_start":36,"line_end":36,"column_start":2,"column_end":5}},{"value":"/ ## Requirements","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209672,"byte_end":209691,"line_start":37,"line_end":37,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209693,"byte_end":209696,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209698,"byte_end":209772,"line_start":39,"line_end":39,"column_start":2,"column_end":76}},{"value":"/ input and output values, for all possible `R` type parameters:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209774,"byte_end":209840,"line_start":40,"line_end":40,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209842,"byte_end":209845,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ - Totality: The implementation must be able to accept every input in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209847,"byte_end":209919,"line_start":42,"line_end":42,"column_start":2,"column_end":74}},{"value":"/   [`BitIdx::<R>::range_all()`], and produce some `BitPos` value for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209921,"byte_end":209992,"line_start":43,"line_end":43,"column_start":2,"column_end":73}},{"value":"/   each.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":209994,"byte_end":210005,"line_start":44,"line_end":44,"column_start":2,"column_end":13}},{"value":"/ - Bijection: There must be an exactly one-to-one correspondence between","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210007,"byte_end":210082,"line_start":45,"line_end":45,"column_start":2,"column_end":77}},{"value":"/   input and output values. No input index may choose its output from a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210084,"byte_end":210158,"line_start":46,"line_end":46,"column_start":2,"column_end":76}},{"value":"/   set of more than one position, and no output position may be produced","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210160,"byte_end":210235,"line_start":47,"line_end":47,"column_start":2,"column_end":77}},{"value":"/   by more than one input index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210237,"byte_end":210272,"line_start":48,"line_end":48,"column_start":2,"column_end":37}},{"value":"/ - Purity: The translation from index to position must be consistent for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210274,"byte_end":210349,"line_start":49,"line_end":49,"column_start":2,"column_end":77}},{"value":"/   the lifetime of *at least* all data structures in the program. This","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210351,"byte_end":210424,"line_start":50,"line_end":50,"column_start":2,"column_end":75}},{"value":"/   function *may* refer to global state, but that state **must** be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210426,"byte_end":210496,"line_start":51,"line_end":51,"column_start":2,"column_end":72}},{"value":"/   immutable while any `bitvec` data structures exist, and must not be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210498,"byte_end":210571,"line_start":52,"line_end":52,"column_start":2,"column_end":75}},{"value":"/   used to violate the totality or bijection requirements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210573,"byte_end":210634,"line_start":53,"line_end":53,"column_start":2,"column_end":63}},{"value":"/ - Validity: The produced `BitPos` value must be within the valid range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210636,"byte_end":210710,"line_start":54,"line_end":54,"column_start":2,"column_end":76}},{"value":"/   of its type. This is enforced by [`BitPos::new`], but not by the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210712,"byte_end":210782,"line_start":55,"line_end":55,"column_start":2,"column_end":72}},{"value":"/   unsafe constructor [`BitPos::new_unchecked`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210784,"byte_end":210835,"line_start":56,"line_end":56,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210837,"byte_end":210840,"line_start":57,"line_end":57,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx::<R>::range_all()`]: crate::index::BitIdx::range_all","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210842,"byte_end":210907,"line_start":58,"line_end":58,"column_start":2,"column_end":67}},{"value":"/ [`BitPos::new`]: crate::index::BitPos::new","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210909,"byte_end":210955,"line_start":59,"line_end":59,"column_start":2,"column_end":48}},{"value":"/ [`BitPos::new_unchecked`]: crate::index::BitPos::new_unchecked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":210957,"byte_end":211023,"line_start":60,"line_end":60,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211427,"byte_end":211433,"line_start":71,"line_end":71,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" Produces a single-bit selection mask from a bit-index.","sig":null,"attributes":[{"value":"/ Produces a single-bit selection mask from a bit-index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211090,"byte_end":211148,"line_start":64,"line_end":64,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211150,"byte_end":211153,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ This is an optional function: it is implemented as, and must always be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211155,"byte_end":211229,"line_start":66,"line_end":66,"column_start":2,"column_end":76}},{"value":"/ exactly identical to, `BitOrder::at(index).select()`. If your ordering","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211231,"byte_end":211305,"line_start":67,"line_end":67,"column_start":2,"column_end":76}},{"value":"/ has a faster implementation, you may provide it, but it must be exactly","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211307,"byte_end":211382,"line_start":68,"line_end":68,"column_start":2,"column_end":77}},{"value":"/ numerically equivalent.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211384,"byte_end":211411,"line_start":69,"line_end":69,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211413,"byte_end":211422,"line_start":70,"line_end":70,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212374,"byte_end":212378,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\nimpl Into<Option<BitEnd<R>>>: Into<Option<BitEnd<R>>>>(impl Into<Option<BitIdx<R>>>,\nimpl Into<Option<BitEnd<R>>>) -> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" Produces a multi-bit selection mask from a range of bit-indices.","sig":null,"attributes":[{"value":"/ Produces a multi-bit selection mask from a range of bit-indices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211529,"byte_end":211597,"line_start":76,"line_end":76,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211599,"byte_end":211602,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ This is an optional function: it is implemented as, and must always be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211604,"byte_end":211678,"line_start":78,"line_end":78,"column_start":2,"column_end":76}},{"value":"/ exactly identical to,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211680,"byte_end":211705,"line_start":79,"line_end":79,"column_start":2,"column_end":27}},{"value":"/ `BitIdx::range(from, upto).map(BitOrder::select).sum()`. If your","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211707,"byte_end":211775,"line_start":80,"line_end":80,"column_start":2,"column_end":70}},{"value":"/ ordering has a faster implementation, you may provide it, but it must be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211777,"byte_end":211853,"line_start":81,"line_end":81,"column_start":2,"column_end":78}},{"value":"/ exactly numerically equivalent.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211855,"byte_end":211890,"line_start":82,"line_end":82,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211892,"byte_end":211895,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211897,"byte_end":211914,"line_start":84,"line_end":84,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211916,"byte_end":211919,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting value of the indices being selected.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211921,"byte_end":211994,"line_start":86,"line_end":86,"column_start":2,"column_end":75}},{"value":"/   Defaults to [`BitIdx::MIN`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":211996,"byte_end":212030,"line_start":87,"line_end":87,"column_start":2,"column_end":36}},{"value":"/ - `upto`: The exclusive ending value of the indices being selected.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212032,"byte_end":212103,"line_start":88,"line_end":88,"column_start":2,"column_end":73}},{"value":"/   Defaults to [`BitEnd::MAX`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212105,"byte_end":212139,"line_start":89,"line_end":89,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212141,"byte_end":212144,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212146,"byte_end":212160,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212162,"byte_end":212165,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ A selection mask with all bit-positions corresponding to `from .. upto`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212167,"byte_end":212242,"line_start":93,"line_end":93,"column_start":2,"column_end":77}},{"value":"/ selected.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212244,"byte_end":212257,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212259,"byte_end":212262,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ [`BitEnd::MAX`]: crate::index::BitEnd::MAX","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212264,"byte_end":212310,"line_start":96,"line_end":96,"column_start":2,"column_end":48}},{"value":"/ [`BitIdx::MIN`]: crate::index::BitIdx::MIN","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212312,"byte_end":212358,"line_start":97,"line_end":97,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212360,"byte_end":212369,"line_start":98,"line_end":98,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5821},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":212930,"byte_end":212934,"line_start":118,"line_end":118,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":"# Least-Significant-First Bit Traversal","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5843},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":213071,"byte_end":213075,"line_start":122,"line_end":122,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":"# Most-Significant-First Bit Traversal","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1879},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216414,"byte_end":216420,"line_start":239,"line_end":239,"column_start":8,"column_end":14},"name":"verify","qualname":"::order::verify","value":"pub fn verify<O>(bool) where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Complete `BitOrder` Verification","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216318,"byte_end":216327,"line_start":236,"line_end":236,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216328,"byte_end":216358,"line_start":237,"line_end":237,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1881},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216940,"byte_end":216955,"line_start":261,"line_end":261,"column_start":8,"column_end":23},"name":"verify_for_type","qualname":"::order::verify_for_type","value":"pub fn verify_for_type<R, O>(bool) where R: BitRegister, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Type `BitOrder` Verification","sig":null,"attributes":[{"value":"cfg(not(miri))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":216858,"byte_end":216875,"line_start":259,"line_end":259,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1887},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","parent":null,"children":[{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":2009},{"krate":0,"index":2222},{"krate":0,"index":2372},{"krate":0,"index":2655},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2923},{"krate":0,"index":2926},{"krate":0,"index":2929},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2936},{"krate":0,"index":2939},{"krate":0,"index":2942},{"krate":0,"index":2947},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2959},{"krate":0,"index":2963},{"krate":0,"index":2966},{"krate":0,"index":2969},{"krate":0,"index":2972},{"krate":0,"index":2975},{"krate":0,"index":2978},{"krate":0,"index":2981},{"krate":0,"index":2984},{"krate":0,"index":2987},{"krate":0,"index":2992},{"krate":0,"index":2997},{"krate":0,"index":3000},{"krate":0,"index":3003},{"krate":0,"index":3006},{"krate":0,"index":3009},{"krate":0,"index":3012},{"krate":0,"index":3015}],"decl_id":null,"docs":"# Raw Pointer Implementation","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1962},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230053,"byte_end":230068,"line_start":32,"line_end":32,"column_start":8,"column_end":23},"name":"check_alignment","qualname":"::ptr::addr::check_alignment","value":"pub fn check_alignment<M, T>(Address<M, T>)\n-> Result<Address<M, T>, MisalignError<T>> where M: Mutability","parent":null,"children":[],"decl_id":null,"docs":" Ensures that an address is well-aligned to its referent type width.\n","sig":null,"attributes":[{"value":"/ Ensures that an address is well-aligned to its referent type width.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":229964,"byte_end":230035,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230036,"byte_end":230045,"line_start":31,"line_end":31,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":1966},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230463,"byte_end":230473,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"name":"Permission","qualname":"::ptr::addr::AddressExt::Permission","value":"type Permission: Mutability;","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" Tracks the original mutation capability of the source pointer.\n","sig":null,"attributes":[{"value":"/ Tracks the original mutation capability of the source pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230390,"byte_end":230456,"line_start":48,"line_end":48,"column_start":2,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":1967},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230536,"byte_end":230544,"line_start":51,"line_end":51,"column_start":7,"column_end":15},"name":"Referent","qualname":"::ptr::addr::AddressExt::Referent","value":"type Referent: Sized;","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The type to which the pointer points.\n","sig":null,"attributes":[{"value":"/ The type to which the pointer points.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":230488,"byte_end":230529,"line_start":50,"line_end":50,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":5865},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232554,"byte_end":232567,"line_start":126,"line_end":126,"column_start":12,"column_end":25},"name":"MisalignError","qualname":"::ptr::addr::MisalignError","value":"MisalignError {  }","parent":null,"children":[{"krate":0,"index":5867}],"decl_id":null,"docs":" The error produced when an address is insufficiently aligned to the width of\n its type.\n","sig":null,"attributes":[{"value":"/ The error produced when an address is insufficiently aligned to the width of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232387,"byte_end":232467,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/ its type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232468,"byte_end":232481,"line_start":124,"line_end":124,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2080},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234421,"byte_end":234427,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"BitRef","qualname":"::ptr::proxy::BitRef","value":"BitRef {  }","parent":null,"children":[{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087}],"decl_id":null,"docs":"# Proxy Bit-Reference","sig":null,"attributes":[{"value":"repr(C, align(8))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234297,"byte_end":234314,"line_start":44,"line_end":44,"column_start":41,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2092},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235338,"byte_end":235349,"line_start":84,"line_end":84,"column_start":16,"column_end":27},"name":"from_bitptr","qualname":"<BitRef>::from_bitptr","value":"pub unsafe fn from_bitptr(BitPtr<M, T, O>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234849,"byte_end":234903,"line_start":69,"line_end":69,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234905,"byte_end":234908,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ This reads through the pointer in order to cache the current bit value","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234910,"byte_end":234984,"line_start":71,"line_end":71,"column_start":2,"column_end":76}},{"value":"/ in the proxy.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234986,"byte_end":235003,"line_start":72,"line_end":72,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235005,"byte_end":235008,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235010,"byte_end":235025,"line_start":74,"line_end":74,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235027,"byte_end":235030,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ The syntax `unsafe { &* ptr }`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235032,"byte_end":235067,"line_start":76,"line_end":76,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235069,"byte_end":235072,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235074,"byte_end":235087,"line_start":78,"line_end":78,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235089,"byte_end":235092,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to (and is!) dereferencing a raw pointer. The pointer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235094,"byte_end":235170,"line_start":80,"line_end":80,"column_start":2,"column_end":78}},{"value":"/ must be well-constructed, refer to a live memory location in the program","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235172,"byte_end":235248,"line_start":81,"line_end":81,"column_start":2,"column_end":78}},{"value":"/ context, and not be aliased beyond its typing indicators.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235250,"byte_end":235311,"line_start":82,"line_end":82,"column_start":2,"column_end":63}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235313,"byte_end":235322,"line_start":83,"line_end":83,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235638,"byte_end":235649,"line_start":100,"line_end":100,"column_start":9,"column_end":20},"name":"into_bitptr","qualname":"<BitRef>::into_bitptr","value":"pub fn into_bitptr(Self) -> BitPtr<M, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Decays the bit-reference to an ordinary bit-pointer.","sig":null,"attributes":[{"value":"/ Decays the bit-reference to an ordinary bit-pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235473,"byte_end":235529,"line_start":93,"line_end":93,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235531,"byte_end":235534,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235536,"byte_end":235551,"line_start":95,"line_end":95,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235553,"byte_end":235556,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ The syntax `&val as *T`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235558,"byte_end":235586,"line_start":97,"line_end":97,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235588,"byte_end":235597,"line_start":98,"line_end":98,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":235599,"byte_end":235629,"line_start":99,"line_end":99,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236369,"byte_end":236376,"line_start":131,"line_end":131,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitRef>::replace","value":"pub fn replace(&mut Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the referenced bit, returning the previous value.","sig":null,"attributes":[{"value":"/ Moves `src` into the referenced bit, returning the previous value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236210,"byte_end":236280,"line_start":125,"line_end":125,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236282,"byte_end":236285,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236287,"byte_end":236302,"line_start":127,"line_end":127,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236304,"byte_end":236307,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ [`mem::replace`](core::mem::replace)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236309,"byte_end":236349,"line_start":129,"line_end":129,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236351,"byte_end":236360,"line_start":130,"line_end":130,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2099},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236573,"byte_end":236577,"line_start":141,"line_end":141,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitRef>::swap","value":"pub fn swap<T2, O2>(&mut Self, &mut BitRef<, Mut, T2, O2>) where T2: BitStore,\nO2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bit values of two proxies.","sig":null,"attributes":[{"value":"/ Swaps the bit values of two proxies.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236450,"byte_end":236490,"line_start":135,"line_end":135,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236492,"byte_end":236495,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236497,"byte_end":236512,"line_start":137,"line_end":137,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236514,"byte_end":236517,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ [`mem::swap`](core::mem::swap)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236519,"byte_end":236553,"line_start":139,"line_end":139,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236555,"byte_end":236564,"line_start":140,"line_end":140,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237013,"byte_end":237019,"line_start":155,"line_end":155,"column_start":9,"column_end":15},"name":"commit","qualname":"<BitRef>::commit","value":"pub fn commit(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Commits a bit into the proxied location.","sig":null,"attributes":[{"value":"/ Commits a bit into the proxied location.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236722,"byte_end":236766,"line_start":149,"line_end":149,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236768,"byte_end":236771,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236773,"byte_end":236841,"line_start":151,"line_end":151,"column_start":2,"column_end":70}},{"value":"/ bypassing the cache and destroying the proxy. This eliminates the second","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236843,"byte_end":236919,"line_start":152,"line_end":152,"column_start":2,"column_end":78}},{"value":"/ write done in the destructor, and allows code to be slightly faster.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236921,"byte_end":236993,"line_start":153,"line_end":153,"column_start":2,"column_end":74}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236995,"byte_end":237004,"line_start":154,"line_end":154,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237277,"byte_end":237280,"line_start":167,"line_end":167,"column_start":9,"column_end":12},"name":"set","qualname":"<BitRef>::set","value":"pub fn set(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes `value` into the proxy.","sig":null,"attributes":[{"value":"/ Writes `value` into the proxy.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237111,"byte_end":237145,"line_start":162,"line_end":162,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237147,"byte_end":237150,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ This does not write into the proxied location; that is deferred until","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237152,"byte_end":237225,"line_start":164,"line_end":164,"column_start":2,"column_end":75}},{"value":"/ the proxy destructor runs.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237227,"byte_end":237257,"line_start":165,"line_end":165,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237259,"byte_end":237268,"line_start":166,"line_end":166,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243027,"byte_end":243038,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"BitPtrRange","qualname":"::ptr::range::BitPtrRange","value":"BitPtrRange { start, end }","parent":null,"children":[{"krate":0,"index":2286},{"krate":0,"index":2287}],"decl_id":null,"docs":"# Bit-Pointer Range","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":242951,"byte_end":242961,"line_start":39,"line_end":39,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2286},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243229,"byte_end":243234,"line_start":49,"line_end":49,"column_start":6,"column_end":11},"name":"start","qualname":"::ptr::range::BitPtrRange::start","value":"ptr::single::BitPtr<M, T, O>","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":" The lower, inclusive, bound of the range. The bit to which this points\n is considered live.\n","sig":null,"attributes":[{"value":"/ The lower, inclusive, bound of the range. The bit to which this points","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243124,"byte_end":243198,"line_start":47,"line_end":47,"column_start":2,"column_end":76}},{"value":"/ is considered live.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243200,"byte_end":243223,"line_start":48,"line_end":48,"column_start":2,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2287},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243810,"byte_end":243813,"line_start":59,"line_end":59,"column_start":6,"column_end":9},"name":"end","qualname":"::ptr::range::BitPtrRange::end","value":"ptr::single::BitPtr<M, T, O>","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":" The higher, exclusive, bound of the range. The bit to which this points\n is considered dead, and the pointer may be one bit beyond the bounds of\n an allocation region.","sig":null,"attributes":[{"value":"/ The higher, exclusive, bound of the range. The bit to which this points","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243254,"byte_end":243329,"line_start":50,"line_end":50,"column_start":2,"column_end":77}},{"value":"/ is considered dead, and the pointer may be one bit beyond the bounds of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243331,"byte_end":243406,"line_start":51,"line_end":51,"column_start":2,"column_end":77}},{"value":"/ an allocation region.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243408,"byte_end":243433,"line_start":52,"line_end":52,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243435,"byte_end":243438,"line_start":53,"line_end":53,"column_start":2,"column_end":5}},{"value":"/ Because Rust and LLVM both define the address of `base + (len * width)`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243440,"byte_end":243515,"line_start":54,"line_end":54,"column_start":2,"column_end":77}},{"value":"/ as being within the provenance of `base`, even though that address may","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243517,"byte_end":243591,"line_start":55,"line_end":55,"column_start":2,"column_end":76}},{"value":"/ itself be the base address of another region in a different provenance,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243593,"byte_end":243668,"line_start":56,"line_end":56,"column_start":2,"column_end":77}},{"value":"/ and bit-pointers are always composed of an ordinary memory address and a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243670,"byte_end":243746,"line_start":57,"line_end":57,"column_start":2,"column_end":78}},{"value":"/ bit-counter, the ending bit-pointer is always valid.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243748,"byte_end":243804,"line_start":58,"line_end":58,"column_start":2,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":2292},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244047,"byte_end":244052,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::ptr::range::BitPtrRange::<M, T, O>::EMPTY","value":"Self","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" The canonical empty range. All ranges with zero length (equal `.start`\n and `.end`) are equally empty.\n","sig":null,"attributes":[{"value":"/ The canonical empty range. All ranges with zero length (equal `.start`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243925,"byte_end":243999,"line_start":68,"line_end":68,"column_start":2,"column_end":76}},{"value":"/ and `.end`) are equally empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244001,"byte_end":244035,"line_start":69,"line_end":69,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244211,"byte_end":244221,"line_start":77,"line_end":77,"column_start":9,"column_end":19},"name":"from_range","qualname":"<BitPtrRange<M, T, O>>::from_range","value":"pub fn from_range(Range<BitPtr<M, T, O>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Explicitly converts a `Range<BitPtr>` into a `BitPtrRange`.\n","sig":null,"attributes":[{"value":"/ Explicitly converts a `Range<BitPtr>` into a `BitPtrRange`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244128,"byte_end":244191,"line_start":75,"line_end":75,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244193,"byte_end":244202,"line_start":76,"line_end":76,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244388,"byte_end":244398,"line_start":83,"line_end":83,"column_start":9,"column_end":19},"name":"into_range","qualname":"<BitPtrRange<M, T, O>>::into_range","value":"pub fn into_range(Self) -> Range<BitPtr<M, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly converts a `BitPtrRange` into a `Range<BitPtr>`.\n","sig":null,"attributes":[{"value":"/ Explicitly converts a `BitPtrRange` into a `Range<BitPtr>`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244305,"byte_end":244368,"line_start":81,"line_end":81,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244370,"byte_end":244379,"line_start":82,"line_end":82,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245107,"byte_end":245115,"line_start":113,"line_end":113,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitPtrRange<M, T, O>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the range is empty (the distance between bit-pointers is `0`).","sig":null,"attributes":[{"value":"/ Tests if the range is empty (the distance between bit-pointers is `0`).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244487,"byte_end":244562,"line_start":88,"line_end":88,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244564,"byte_end":244567,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244569,"byte_end":244584,"line_start":90,"line_end":90,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244586,"byte_end":244589,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`Range::is_empty`](core::ops::Range::is_empty)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244591,"byte_end":244642,"line_start":92,"line_end":92,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244644,"byte_end":244647,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244649,"byte_end":244664,"line_start":94,"line_end":94,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244666,"byte_end":244669,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244671,"byte_end":244682,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244684,"byte_end":244711,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244713,"byte_end":244746,"line_start":98,"line_end":98,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244748,"byte_end":244751,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244753,"byte_end":244772,"line_start":100,"line_end":100,"column_start":2,"column_end":21}},{"value":"/ let bp = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244774,"byte_end":244825,"line_start":101,"line_end":101,"column_start":2,"column_end":53}},{"value":"/ let mut range = BitPtrRange::from_range(bp .. bp.wrapping_add(1));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244827,"byte_end":244897,"line_start":102,"line_end":102,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244899,"byte_end":244902,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ assert!(!range.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244904,"byte_end":244935,"line_start":104,"line_end":104,"column_start":2,"column_end":33}},{"value":"/ assert_ne!(range.start, range.end);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244937,"byte_end":244976,"line_start":105,"line_end":105,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244978,"byte_end":244981,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ range.next();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":244983,"byte_end":245000,"line_start":107,"line_end":107,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245002,"byte_end":245005,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ assert!(range.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245007,"byte_end":245037,"line_start":109,"line_end":109,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(range.start, range.end);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245039,"byte_end":245078,"line_start":110,"line_end":110,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245080,"byte_end":245087,"line_start":111,"line_end":111,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245089,"byte_end":245098,"line_start":112,"line_end":112,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246421,"byte_end":246429,"line_start":156,"line_end":156,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitPtrRange<M, T, O>>::contains","value":"pub fn contains<M2, T2>(&Self, &BitPtr<M2, T2, O>) -> bool where\nM2: Mutability, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Tests if a given bit-pointer is contained within the range.","sig":null,"attributes":[{"value":"/ Tests if a given bit-pointer is contained within the range.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245163,"byte_end":245226,"line_start":117,"line_end":117,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245228,"byte_end":245231,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ Bit-pointer ordering is defined when the types have the same exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245233,"byte_end":245303,"line_start":119,"line_end":119,"column_start":2,"column_end":72}},{"value":"/ `BitOrder` type parameter and the same `BitStore::Mem` associated type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245305,"byte_end":245379,"line_start":120,"line_end":120,"column_start":2,"column_end":76}},{"value":"/ (but are free to differ in alias condition!). Inclusion in a range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245381,"byte_end":245451,"line_start":121,"line_end":121,"column_start":2,"column_end":72}},{"value":"/ occurs when the bit-pointer is not strictly less than the range start,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245453,"byte_end":245527,"line_start":122,"line_end":122,"column_start":2,"column_end":76}},{"value":"/ and is strictly less than the range end.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245529,"byte_end":245573,"line_start":123,"line_end":123,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245575,"byte_end":245578,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245580,"byte_end":245595,"line_start":125,"line_end":125,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245597,"byte_end":245600,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ [`Range::contains`](core::ops::Range::contains)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245602,"byte_end":245653,"line_start":127,"line_end":127,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245655,"byte_end":245658,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245660,"byte_end":245675,"line_start":129,"line_end":129,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245677,"byte_end":245680,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245682,"byte_end":245693,"line_start":131,"line_end":131,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245695,"byte_end":245722,"line_start":132,"line_end":132,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245724,"byte_end":245757,"line_start":133,"line_end":133,"column_start":2,"column_end":35}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245759,"byte_end":245784,"line_start":134,"line_end":134,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245786,"byte_end":245789,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245791,"byte_end":245811,"line_start":136,"line_end":136,"column_start":2,"column_end":22}},{"value":"/ let bp = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245813,"byte_end":245864,"line_start":137,"line_end":137,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245866,"byte_end":245869,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ let mut range = BitPtrRange::from_range(bp .. bp.wrapping_add(16));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245871,"byte_end":245942,"line_start":139,"line_end":139,"column_start":2,"column_end":73}},{"value":"/ range.nth(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245944,"byte_end":245961,"line_start":140,"line_end":140,"column_start":2,"column_end":19}},{"value":"/ range.nth_back(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245963,"byte_end":245985,"line_start":141,"line_end":141,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245987,"byte_end":245990,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ assert!(bp < range.start);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":245992,"byte_end":246022,"line_start":143,"line_end":143,"column_start":2,"column_end":32}},{"value":"/ assert!(!range.contains(&bp));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246024,"byte_end":246058,"line_start":144,"line_end":144,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246060,"byte_end":246063,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ let mid = bp.wrapping_add(8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246065,"byte_end":246098,"line_start":146,"line_end":146,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246100,"byte_end":246103,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ let same_mem = mid.cast::<Cell<u16>>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246105,"byte_end":246148,"line_start":148,"line_end":148,"column_start":2,"column_end":45}},{"value":"/ assert!(range.contains(&mid));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246150,"byte_end":246184,"line_start":149,"line_end":149,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246186,"byte_end":246193,"line_start":150,"line_end":150,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246195,"byte_end":246198,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ Casting to a different `BitStore` type whose `Mem` parameter differs","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246200,"byte_end":246272,"line_start":152,"line_end":152,"column_start":2,"column_end":74}},{"value":"/ from the range always results in a `false` response, even if the pointer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246274,"byte_end":246350,"line_start":153,"line_end":153,"column_start":2,"column_end":78}},{"value":"/ being tested is numerically within the range.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246352,"byte_end":246401,"line_start":154,"line_end":154,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":246403,"byte_end":246412,"line_start":155,"line_end":155,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2487},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252027,"byte_end":252033,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"BitPtr","qualname":"::ptr::single::BitPtr","value":"BitPtr {  }","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493}],"decl_id":null,"docs":"# Single-Bit Pointer","sig":null,"attributes":[{"value":"repr(C, packed)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":251948,"byte_end":251966,"line_start":59,"line_end":59,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":2498},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252731,"byte_end":252739,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"DANGLING","qualname":"::ptr::single::BitPtr::<M, T, O>::DANGLING","value":"Self","parent":{"krate":0,"index":2494},"children":[],"decl_id":null,"docs":" The canonical dangling pointer. This selects the starting bit of the\n canonical dangling pointer for `T`.\n","sig":null,"attributes":[{"value":"/ The canonical dangling pointer. This selects the starting bit of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252606,"byte_end":252678,"line_start":85,"line_end":85,"column_start":2,"column_end":74}},{"value":"/ canonical dangling pointer for `T`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252680,"byte_end":252719,"line_start":86,"line_end":86,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254269,"byte_end":254272,"line_start":128,"line_end":128,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPtr<M, T, O>>::new","value":"pub fn new(Address<M, T>, BitIdx<T::Mem>) -> Result<Self, MisalignError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to construct a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Tries to construct a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253154,"byte_end":253227,"line_start":102,"line_end":102,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253229,"byte_end":253232,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253234,"byte_end":253251,"line_start":104,"line_end":104,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253253,"byte_end":253256,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ - `ptr`: The address of a memory element. `Address` wraps raw pointers","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253258,"byte_end":253332,"line_start":106,"line_end":106,"column_start":2,"column_end":76}},{"value":"/   or references, and enforces that they are not null. `BitPtr`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253334,"byte_end":253400,"line_start":107,"line_end":107,"column_start":2,"column_end":68}},{"value":"/   additionally requires that the address be well-aligned to its type;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253402,"byte_end":253475,"line_start":108,"line_end":108,"column_start":2,"column_end":75}},{"value":"/   misaligned addresses cause this to return an error.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253477,"byte_end":253534,"line_start":109,"line_end":109,"column_start":2,"column_end":59}},{"value":"/ - `bit`: The index of the selected bit within `*ptr`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253536,"byte_end":253593,"line_start":110,"line_end":110,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253595,"byte_end":253598,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253600,"byte_end":253614,"line_start":112,"line_end":112,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253616,"byte_end":253619,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ This returns an error if `ptr` is not aligned to `T`; otherwise, it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253621,"byte_end":253692,"line_start":114,"line_end":114,"column_start":2,"column_end":73}},{"value":"/ returns a new bit-pointer structure to the given element and bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253694,"byte_end":253763,"line_start":115,"line_end":115,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253765,"byte_end":253768,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ You should typically prefer to use constructors that take directly from","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253770,"byte_end":253845,"line_start":117,"line_end":117,"column_start":2,"column_end":77}},{"value":"/ a memory reference or pointer, such as the `TryFrom<*T>`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253847,"byte_end":253907,"line_start":118,"line_end":118,"column_start":2,"column_end":62}},{"value":"/ implementations, the `From<&/mut T>` implementations, or the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253909,"byte_end":253973,"line_start":119,"line_end":119,"column_start":2,"column_end":66}},{"value":"/ [`::from_ref()`], [`::from_mut()`], [`::from_slice()`], or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":253975,"byte_end":254037,"line_start":120,"line_end":120,"column_start":2,"column_end":64}},{"value":"/ [`::from_slice_mut()`] functions.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254039,"byte_end":254076,"line_start":121,"line_end":121,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254078,"byte_end":254081,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ [`::from_mut()`]: Self::from_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254083,"byte_end":254119,"line_start":123,"line_end":123,"column_start":2,"column_end":38}},{"value":"/ [`::from_ref()`]: Self::from_ref","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254121,"byte_end":254157,"line_start":124,"line_end":124,"column_start":2,"column_end":38}},{"value":"/ [`::from_slice()`]: Self::from_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254159,"byte_end":254199,"line_start":125,"line_end":125,"column_start":2,"column_end":42}},{"value":"/ [`::from_slice_mut()`]: Self::from_slice_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254201,"byte_end":254249,"line_start":126,"line_end":126,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254251,"byte_end":254260,"line_start":127,"line_end":127,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255281,"byte_end":255294,"line_start":163,"line_end":163,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPtr<M, T, O>>::new_unchecked","value":"pub unsafe fn new_unchecked(Address<M, T>, BitIdx<T::Mem>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an address and head index, without checking\n the address for validity.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an address and head index, without checking","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254439,"byte_end":254513,"line_start":139,"line_end":139,"column_start":2,"column_end":76}},{"value":"/ the address for validity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254515,"byte_end":254544,"line_start":140,"line_end":140,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254546,"byte_end":254549,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254551,"byte_end":254568,"line_start":142,"line_end":142,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254570,"byte_end":254573,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ - `addr`: The memory address to use in the bit-pointer. See the Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254575,"byte_end":254649,"line_start":144,"line_end":144,"column_start":2,"column_end":76}},{"value":"/   section.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254651,"byte_end":254665,"line_start":145,"line_end":145,"column_start":2,"column_end":16}},{"value":"/ - `head`: The index of the bit in `*addr` that this bit-pointer selects.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254667,"byte_end":254743,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254745,"byte_end":254748,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254750,"byte_end":254764,"line_start":148,"line_end":148,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254766,"byte_end":254769,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ A new bit-pointer composed of the parameters. No validity checking is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254771,"byte_end":254844,"line_start":150,"line_end":150,"column_start":2,"column_end":75}},{"value":"/ performed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254846,"byte_end":254860,"line_start":151,"line_end":151,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254862,"byte_end":254865,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254867,"byte_end":254880,"line_start":153,"line_end":153,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254882,"byte_end":254885,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ The `Address` type imposes a non-null requirement. `BitPtr` additionally","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254887,"byte_end":254963,"line_start":155,"line_end":155,"column_start":2,"column_end":78}},{"value":"/ requires that `addr` is well-aligned for `T`, and presumes that the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":254965,"byte_end":255036,"line_start":156,"line_end":156,"column_start":2,"column_end":73}},{"value":"/ caller has ensured this with [`bv_ptr::check_alignment`][0]. If this is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255038,"byte_end":255113,"line_start":157,"line_end":157,"column_start":2,"column_end":77}},{"value":"/ not the case, then the program is incorrect, and subsequent behavior is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255115,"byte_end":255190,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ not specified.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255192,"byte_end":255210,"line_start":159,"line_end":159,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255212,"byte_end":255215,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::ptr::check_alignment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255217,"byte_end":255254,"line_start":161,"line_end":161,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255256,"byte_end":255265,"line_start":162,"line_end":162,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255561,"byte_end":255568,"line_start":181,"line_end":181,"column_start":9,"column_end":16},"name":"address","qualname":"<BitPtr<M, T, O>>::address","value":"pub fn address(Self) -> Address<M, T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the address of the base storage element.\n","sig":null,"attributes":[{"value":"/ Gets the address of the base storage element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255492,"byte_end":255541,"line_start":179,"line_end":179,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255543,"byte_end":255552,"line_start":180,"line_end":180,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255706,"byte_end":255709,"line_start":187,"line_end":187,"column_start":9,"column_end":12},"name":"bit","qualname":"<BitPtr<M, T, O>>::bit","value":"pub fn bit(Self) -> BitIdx<T::Mem>","parent":null,"children":[],"decl_id":null,"docs":" Gets the `BitIdx` that selects the bit within the memory element.\n","sig":null,"attributes":[{"value":"/ Gets the `BitIdx` that selects the bit within the memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255617,"byte_end":255686,"line_start":185,"line_end":185,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255688,"byte_end":255697,"line_start":186,"line_end":186,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":256075,"byte_end":256084,"line_start":203,"line_end":203,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtr<M, T, O>>::raw_parts","value":"pub fn raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a bit-pointer into its element address and bit index.","sig":null,"attributes":[{"value":"/ Decomposes a bit-pointer into its element address and bit index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255752,"byte_end":255820,"line_start":191,"line_end":191,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255822,"byte_end":255825,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255827,"byte_end":255844,"line_start":193,"line_end":193,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255846,"byte_end":255849,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255851,"byte_end":255863,"line_start":195,"line_end":195,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255865,"byte_end":255868,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255870,"byte_end":255884,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255886,"byte_end":255889,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The memory address in which the referent bit is located.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255891,"byte_end":255959,"line_start":199,"line_end":199,"column_start":2,"column_end":70}},{"value":"/ - `.1`: The index of the referent bit in `*.0` according to the `O` type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":255961,"byte_end":256037,"line_start":200,"line_end":200,"column_start":2,"column_end":78}},{"value":"/   parameter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":256039,"byte_end":256055,"line_start":201,"line_end":201,"column_start":2,"column_end":18}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":256057,"byte_end":256066,"line_start":202,"line_end":202,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258158,"byte_end":258166,"line_start":266,"line_end":266,"column_start":9,"column_end":17},"name":"to_const","qualname":"<BitPtr<M, T, O>>::to_const","value":"pub fn to_const(Self) -> BitPtr<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Removes write permissions from a bit-pointer.\n","sig":null,"attributes":[{"value":"/ Removes write permissions from a bit-pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258089,"byte_end":258138,"line_start":264,"line_end":264,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258140,"byte_end":258149,"line_start":265,"line_end":265,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258495,"byte_end":258501,"line_start":285,"line_end":285,"column_start":16,"column_end":22},"name":"to_mut","qualname":"<BitPtr<M, T, O>>::to_mut","value":"pub unsafe fn to_mut(Self) -> BitPtr<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Adds write permissions to a bit-pointer.","sig":null,"attributes":[{"value":"/ Adds write permissions to a bit-pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258335,"byte_end":258379,"line_start":279,"line_end":279,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258381,"byte_end":258384,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258386,"byte_end":258399,"line_start":281,"line_end":281,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258401,"byte_end":258404,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ This pointer must have been derived from a `*mut` pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258406,"byte_end":258468,"line_start":283,"line_end":283,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":258470,"byte_end":258479,"line_start":284,"line_end":284,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259260,"byte_end":259268,"line_start":324,"line_end":324,"column_start":9,"column_end":17},"name":"from_ref","qualname":"<BitPtr<Const, T, O>>::from_ref","value":"pub fn from_ref(&T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` to the zeroth bit in a single element.\n","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` to the zeroth bit in a single element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259176,"byte_end":259240,"line_start":322,"line_end":322,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259242,"byte_end":259251,"line_start":323,"line_end":323,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259760,"byte_end":259770,"line_start":336,"line_end":336,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitPtr<Const, T, O>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` to the zeroth bit in the zeroth element of a\n slice.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` to the zeroth bit in the zeroth element of a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259353,"byte_end":259423,"line_start":328,"line_end":328,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259425,"byte_end":259435,"line_start":329,"line_end":329,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259437,"byte_end":259440,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ This method is distinct from `Self::from_ref(&elem[0])`, because it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259442,"byte_end":259513,"line_start":331,"line_end":331,"column_start":2,"column_end":73}},{"value":"/ ensures that the returned bit-pointer has provenance over the entire","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259515,"byte_end":259587,"line_start":332,"line_end":332,"column_start":2,"column_end":74}},{"value":"/ slice. Indexing within a slice narrows the provenance range, and makes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259589,"byte_end":259663,"line_start":333,"line_end":333,"column_start":2,"column_end":76}},{"value":"/ departure from the subslice, *even within the original slice*, illegal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259665,"byte_end":259740,"line_start":334,"line_end":334,"column_start":2,"column_end":77}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259742,"byte_end":259751,"line_start":335,"line_end":335,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260006,"byte_end":260013,"line_start":345,"line_end":345,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Const, T, O>>::pointer","value":"pub fn pointer(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw pointer to the memory element containing the selected bit.\n","sig":null,"attributes":[{"value":"/ Gets a raw pointer to the memory element containing the selected bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259881,"byte_end":259954,"line_start":342,"line_end":342,"column_start":2,"column_end":75}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259956,"byte_end":259965,"line_start":343,"line_end":343,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259967,"byte_end":259997,"line_start":344,"line_end":344,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260228,"byte_end":260236,"line_start":357,"line_end":357,"column_start":9,"column_end":17},"name":"from_mut","qualname":"<BitPtr<Mut, T, O>>::from_mut","value":"pub fn from_mut(&mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a mutable `BitPtr` to the zeroth bit in a single element.\n","sig":null,"attributes":[{"value":"/ Constructs a mutable `BitPtr` to the zeroth bit in a single element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260136,"byte_end":260208,"line_start":355,"line_end":355,"column_start":2,"column_end":74}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260210,"byte_end":260219,"line_start":356,"line_end":356,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260744,"byte_end":260758,"line_start":369,"line_end":369,"column_start":9,"column_end":23},"name":"from_mut_slice","qualname":"<BitPtr<Mut, T, O>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` to the zeroth bit in the zeroth element of a\n mutable slice.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` to the zeroth bit in the zeroth element of a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260325,"byte_end":260395,"line_start":361,"line_end":361,"column_start":2,"column_end":72}},{"value":"/ mutable slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260397,"byte_end":260415,"line_start":362,"line_end":362,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260417,"byte_end":260420,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ This method is distinct from `Self::from_mut(&mut elem[0])`, because it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260422,"byte_end":260497,"line_start":364,"line_end":364,"column_start":2,"column_end":77}},{"value":"/ ensures that the returned bit-pointer has provenance over the entire","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260499,"byte_end":260571,"line_start":365,"line_end":365,"column_start":2,"column_end":74}},{"value":"/ slice. Indexing within a slice narrows the provenance range, and makes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260573,"byte_end":260647,"line_start":366,"line_end":366,"column_start":2,"column_end":76}},{"value":"/ departure from the subslice, *even within the original slice*, illegal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260649,"byte_end":260724,"line_start":367,"line_end":367,"column_start":2,"column_end":77}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260726,"byte_end":260735,"line_start":368,"line_end":368,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261296,"byte_end":261310,"line_start":383,"line_end":383,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitPtr<Mut, T, O>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a mutable `BitPtr` to the zeroth bit in the zeroth element of\n a slice.","sig":null,"attributes":[{"value":"/ Constructs a mutable `BitPtr` to the zeroth bit in the zeroth element of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260877,"byte_end":260953,"line_start":375,"line_end":375,"column_start":2,"column_end":78}},{"value":"/ a slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260955,"byte_end":260967,"line_start":376,"line_end":376,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260969,"byte_end":260972,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ This method is distinct from `Self::from_mut(&mut elem[0])`, because it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260974,"byte_end":261049,"line_start":378,"line_end":378,"column_start":2,"column_end":77}},{"value":"/ ensures that the returned bit-pointer has provenance over the entire","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261051,"byte_end":261123,"line_start":379,"line_end":379,"column_start":2,"column_end":74}},{"value":"/ slice. Indexing within a slice narrows the provenance range, and makes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261125,"byte_end":261199,"line_start":380,"line_end":380,"column_start":2,"column_end":76}},{"value":"/ departure from the subslice, *even within the original slice*, illegal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261201,"byte_end":261276,"line_start":381,"line_end":381,"column_start":2,"column_end":77}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261278,"byte_end":261287,"line_start":382,"line_end":382,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261555,"byte_end":261562,"line_start":392,"line_end":392,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Mut, T, O>>::pointer","value":"pub fn pointer(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw pointer to the memory location containing the selected bit.\n","sig":null,"attributes":[{"value":"/ Gets a raw pointer to the memory location containing the selected bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261429,"byte_end":261503,"line_start":389,"line_end":389,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261505,"byte_end":261514,"line_start":390,"line_end":390,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261516,"byte_end":261546,"line_start":391,"line_end":391,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262109,"byte_end":262116,"line_start":414,"line_end":414,"column_start":9,"column_end":16},"name":"is_null","qualname":"<BitPtr<M, T, O>>::is_null","value":"pub fn is_null(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a bit-pointer is the null value.","sig":null,"attributes":[{"value":"/ Tests if a bit-pointer is the null value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261736,"byte_end":261781,"line_start":404,"line_end":404,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261783,"byte_end":261786,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ This is always false, as a `BitPtr` is a `NonNull` internally. Use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261788,"byte_end":261858,"line_start":406,"line_end":406,"column_start":2,"column_end":72}},{"value":"/ `Option<BitPtr>` to express the potential for a null pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261860,"byte_end":261925,"line_start":407,"line_end":407,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261927,"byte_end":261930,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261932,"byte_end":261947,"line_start":409,"line_end":409,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261949,"byte_end":261952,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ [`pointer::is_null`](https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261954,"byte_end":262047,"line_start":411,"line_end":411,"column_start":2,"column_end":95}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262049,"byte_end":262058,"line_start":412,"line_end":412,"column_start":2,"column_end":11}},{"value":"deprecated = \"`BitPtr` is never null\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262060,"byte_end":262100,"line_start":413,"line_end":413,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262724,"byte_end":262728,"line_start":431,"line_end":431,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitPtr<M, T, O>>::cast","value":"pub fn cast<U>(Self) -> BitPtr<M, U, O> where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Casts to a `BitPtr` with a different storage parameter.","sig":null,"attributes":[{"value":"/ Casts to a `BitPtr` with a different storage parameter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262146,"byte_end":262205,"line_start":418,"line_end":418,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262207,"byte_end":262210,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ This is not free! In order to maintain value integrity, it encodes a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262212,"byte_end":262284,"line_start":420,"line_end":420,"column_start":2,"column_end":74}},{"value":"/ `BitSpan` encoded descriptor with its value, casts that, then decodes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262286,"byte_end":262359,"line_start":421,"line_end":421,"column_start":2,"column_end":75}},{"value":"/ into a `BitPtr` of the target type. If `T` and `U` have different","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262361,"byte_end":262430,"line_start":422,"line_end":422,"column_start":2,"column_end":71}},{"value":"/ `::Mem` associated types, then this may change the selected bit in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262432,"byte_end":262502,"line_start":423,"line_end":423,"column_start":2,"column_end":72}},{"value":"/ memory. This is an unavoidable cost of the addressing and encoding","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262504,"byte_end":262574,"line_start":424,"line_end":424,"column_start":2,"column_end":72}},{"value":"/ schemes.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262576,"byte_end":262588,"line_start":425,"line_end":425,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262590,"byte_end":262593,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262595,"byte_end":262610,"line_start":427,"line_end":427,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262612,"byte_end":262615,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ [`pointer::cast`](https://doc.rust-lang.org/std/primitive.pointer.html#method.cast)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262617,"byte_end":262704,"line_start":429,"line_end":429,"column_start":2,"column_end":89}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262706,"byte_end":262715,"line_start":430,"line_end":430,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263472,"byte_end":263484,"line_start":453,"line_end":453,"column_start":9,"column_end":21},"name":"to_raw_parts","qualname":"<BitPtr<M, T, O>>::to_raw_parts","value":"pub fn to_raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a bit-pointer into its address and head-index components.","sig":null,"attributes":[{"value":"/ Decomposes a bit-pointer into its address and head-index components.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262916,"byte_end":262988,"line_start":438,"line_end":438,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262990,"byte_end":262993,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":262995,"byte_end":263010,"line_start":440,"line_end":440,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263012,"byte_end":263015,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ [`pointer::to_raw_parts`](https://doc.rust-lang.org/std/primitive.pointer.html#method.to_raw_parts)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263017,"byte_end":263120,"line_start":442,"line_end":442,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263122,"byte_end":263125,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263127,"byte_end":263149,"line_start":444,"line_end":444,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263151,"byte_end":263154,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ The original method is unstable as of 1.54.0; however, because `BitPtr`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263156,"byte_end":263231,"line_start":446,"line_end":446,"column_start":2,"column_end":77}},{"value":"/ already has a similar API, the name is optimistically stabilized here.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263233,"byte_end":263307,"line_start":447,"line_end":447,"column_start":2,"column_end":76}},{"value":"/ Prefer [`.raw_parts()`] until the original inherent stabilizes.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263309,"byte_end":263376,"line_start":448,"line_end":448,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263378,"byte_end":263381,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ [`.raw_parts()`]: Self::raw_parts","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263383,"byte_end":263420,"line_start":450,"line_end":450,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263422,"byte_end":263431,"line_start":451,"line_end":451,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263433,"byte_end":263463,"line_start":452,"line_end":452,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264971,"byte_end":264977,"line_start":496,"line_end":496,"column_start":16,"column_end":22},"name":"as_ref","qualname":"<BitPtr<M, T, O>>::as_ref","value":"pub unsafe fn as_ref<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263552,"byte_end":263603,"line_start":457,"line_end":457,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263605,"byte_end":263608,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` guarantees that it is non-null and well-aligned, this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263610,"byte_end":263684,"line_start":459,"line_end":459,"column_start":2,"column_end":76}},{"value":"/ never returns `None`. However, this is still unsafe to call on any","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263686,"byte_end":263756,"line_start":460,"line_end":460,"column_start":2,"column_end":72}},{"value":"/ bit-pointers created from conjured values rather than known references.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263758,"byte_end":263833,"line_start":461,"line_end":461,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263835,"byte_end":263838,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263840,"byte_end":263855,"line_start":463,"line_end":463,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263857,"byte_end":263860,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263862,"byte_end":263953,"line_start":465,"line_end":465,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263955,"byte_end":263958,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263960,"byte_end":263982,"line_start":467,"line_end":467,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263984,"byte_end":263987,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":263989,"byte_end":264059,"line_start":469,"line_end":469,"column_start":2,"column_end":72}},{"value":"/ implements `Deref<Target = bool>`, and can be converted to `&bool` with","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264061,"byte_end":264136,"line_start":470,"line_end":470,"column_start":2,"column_end":77}},{"value":"/ a reborrow `&*`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264138,"byte_end":264158,"line_start":471,"line_end":471,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264160,"byte_end":264163,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264165,"byte_end":264178,"line_start":473,"line_end":473,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264180,"byte_end":264183,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264185,"byte_end":264260,"line_start":475,"line_end":475,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer in order to create the proxy. As","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264262,"byte_end":264334,"line_start":476,"line_end":476,"column_start":2,"column_end":74}},{"value":"/ such, you must ensure the following conditions are met:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264336,"byte_end":264395,"line_start":477,"line_end":477,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264397,"byte_end":264400,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferenceable as defined in the standard library","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264402,"byte_end":264478,"line_start":479,"line_end":479,"column_start":2,"column_end":78}},{"value":"/   documentation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264480,"byte_end":264499,"line_start":480,"line_end":480,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264501,"byte_end":264563,"line_start":481,"line_end":481,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264565,"byte_end":264641,"line_start":482,"line_end":482,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264643,"byte_end":264717,"line_start":483,"line_end":483,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264719,"byte_end":264722,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264724,"byte_end":264739,"line_start":485,"line_end":485,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264741,"byte_end":264744,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264746,"byte_end":264757,"line_start":487,"line_end":487,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264759,"byte_end":264786,"line_start":488,"line_end":488,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264788,"byte_end":264791,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264793,"byte_end":264812,"line_start":490,"line_end":490,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264814,"byte_end":264866,"line_start":491,"line_end":491,"column_start":2,"column_end":54}},{"value":"/ let val = unsafe { ptr.as_ref() }.unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264868,"byte_end":264915,"line_start":492,"line_end":492,"column_start":2,"column_end":49}},{"value":"/ assert!(*val);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264917,"byte_end":264935,"line_start":493,"line_end":493,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264937,"byte_end":264944,"line_start":494,"line_end":494,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":264946,"byte_end":264955,"line_start":495,"line_end":495,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266835,"byte_end":266841,"line_start":545,"line_end":545,"column_start":16,"column_end":22},"name":"offset","qualname":"<BitPtr<M, T, O>>::offset","value":"pub unsafe fn offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit-pointer at a specified offset from the original.","sig":null,"attributes":[{"value":"/ Creates a new bit-pointer at a specified offset from the original.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265075,"byte_end":265145,"line_start":500,"line_end":500,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265147,"byte_end":265150,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265152,"byte_end":265184,"line_start":502,"line_end":502,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265186,"byte_end":265189,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265191,"byte_end":265206,"line_start":504,"line_end":504,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265208,"byte_end":265211,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265213,"byte_end":265304,"line_start":506,"line_end":506,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265306,"byte_end":265309,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265311,"byte_end":265324,"line_start":508,"line_end":508,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265326,"byte_end":265329,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ `BitPtr` is implemented with Rust raw pointers internally, and is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265331,"byte_end":265400,"line_start":510,"line_end":510,"column_start":2,"column_end":71}},{"value":"/ subject to all of Rust’s rules about provenance and permission tracking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265402,"byte_end":265480,"line_start":511,"line_end":511,"column_start":2,"column_end":78}},{"value":"/ You must abide by the safety rules established in the original method,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265482,"byte_end":265556,"line_start":512,"line_end":512,"column_start":2,"column_end":76}},{"value":"/ to which this internally delegates.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265558,"byte_end":265597,"line_start":513,"line_end":513,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265599,"byte_end":265602,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ Additionally, `bitvec` imposes its own rules: while Rust cannot observe","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265604,"byte_end":265679,"line_start":515,"line_end":515,"column_start":2,"column_end":77}},{"value":"/ provenance beyond an element or byte level, `bitvec` demands that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265681,"byte_end":265750,"line_start":516,"line_end":516,"column_start":2,"column_end":71}},{"value":"/ `&mut BitSlice` have exclusive view over all bits it observes. You must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265752,"byte_end":265827,"line_start":517,"line_end":517,"column_start":2,"column_end":77}},{"value":"/ not produce a bit-pointer that departs a `BitSlice` region and intrudes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265829,"byte_end":265904,"line_start":518,"line_end":518,"column_start":2,"column_end":77}},{"value":"/ on any `&mut BitSlice`’s handle, and you must not produce a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265906,"byte_end":265971,"line_start":519,"line_end":519,"column_start":2,"column_end":65}},{"value":"/ write-capable bit-pointer that intrudes on a `&BitSlice` handle that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":265973,"byte_end":266045,"line_start":520,"line_end":520,"column_start":2,"column_end":74}},{"value":"/ expects its contents to be immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266047,"byte_end":266088,"line_start":521,"line_end":521,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266090,"byte_end":266093,"line_start":522,"line_end":522,"column_start":2,"column_end":5}},{"value":"/ Note that it is illegal to *construct* a bit-pointer that invalidates","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266095,"byte_end":266168,"line_start":523,"line_end":523,"column_start":2,"column_end":75}},{"value":"/ any of these rules. If you wish to defer safety-checking to the point of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266170,"byte_end":266246,"line_start":524,"line_end":524,"column_start":2,"column_end":78}},{"value":"/ dereferencing, and allow the temporary construction *but not*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266248,"byte_end":266313,"line_start":525,"line_end":525,"column_start":2,"column_end":67}},{"value":"/ *dereference* of illegal `BitPtr`s, use [`.wrapping_offset()`] instead.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266315,"byte_end":266390,"line_start":526,"line_end":526,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266392,"byte_end":266395,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266397,"byte_end":266412,"line_start":528,"line_end":528,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266414,"byte_end":266417,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266419,"byte_end":266430,"line_start":530,"line_end":530,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266432,"byte_end":266459,"line_start":531,"line_end":531,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266461,"byte_end":266464,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ let data = 5u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266466,"byte_end":266485,"line_start":533,"line_end":533,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266487,"byte_end":266539,"line_start":534,"line_end":534,"column_start":2,"column_end":54}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266541,"byte_end":266553,"line_start":535,"line_end":535,"column_start":2,"column_end":14}},{"value":"/   assert!(ptr.read());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266555,"byte_end":266581,"line_start":536,"line_end":536,"column_start":2,"column_end":28}},{"value":"/   assert!(!ptr.offset(1).read());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266583,"byte_end":266620,"line_start":537,"line_end":537,"column_start":2,"column_end":39}},{"value":"/   assert!(ptr.offset(2).read());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266622,"byte_end":266658,"line_start":538,"line_end":538,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266660,"byte_end":266665,"line_start":539,"line_end":539,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266667,"byte_end":266674,"line_start":540,"line_end":540,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266676,"byte_end":266679,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ [`.wrapping_offset()`]: Self::wrapping_offset","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266681,"byte_end":266730,"line_start":542,"line_end":542,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266732,"byte_end":266741,"line_start":543,"line_end":543,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266743,"byte_end":266819,"line_start":544,"line_end":544,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269075,"byte_end":269090,"line_start":605,"line_end":605,"column_start":9,"column_end":24},"name":"wrapping_offset","qualname":"<BitPtr<M, T, O>>::wrapping_offset","value":"pub fn wrapping_offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit-pointer at a specified offset from the original.","sig":null,"attributes":[{"value":"/ Creates a new bit-pointer at a specified offset from the original.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":266973,"byte_end":267043,"line_start":550,"line_end":550,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267045,"byte_end":267048,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267050,"byte_end":267082,"line_start":552,"line_end":552,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267084,"byte_end":267087,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267089,"byte_end":267104,"line_start":554,"line_end":554,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267106,"byte_end":267109,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267111,"byte_end":267220,"line_start":556,"line_end":556,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267222,"byte_end":267225,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267227,"byte_end":267249,"line_start":558,"line_end":558,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267251,"byte_end":267254,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ `bitvec` makes it explicitly illegal to wrap a pointer around the high","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267256,"byte_end":267330,"line_start":560,"line_end":560,"column_start":2,"column_end":76}},{"value":"/ end of the address space, because it is incapable of representing a null","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267332,"byte_end":267408,"line_start":561,"line_end":561,"column_start":2,"column_end":78}},{"value":"/ pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267410,"byte_end":267422,"line_start":562,"line_end":562,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267424,"byte_end":267427,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ However, `<*T>::wrapping_offset` has additional properties as a result","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267429,"byte_end":267503,"line_start":564,"line_end":564,"column_start":2,"column_end":76}},{"value":"/ of its tolerance for wrapping the address space: it tolerates departing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267505,"byte_end":267580,"line_start":565,"line_end":565,"column_start":2,"column_end":77}},{"value":"/ a provenance region, and is not unsafe to use to *create* a bit-pointer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267582,"byte_end":267657,"line_start":566,"line_end":566,"column_start":2,"column_end":77}},{"value":"/ that is outside the bounds of its original provenance.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267659,"byte_end":267717,"line_start":567,"line_end":567,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267719,"byte_end":267722,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267724,"byte_end":267737,"line_start":569,"line_end":569,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267739,"byte_end":267742,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ This function is safe to use because the bit-pointers it creates defer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267744,"byte_end":267818,"line_start":571,"line_end":571,"column_start":2,"column_end":76}},{"value":"/ their provenance checks until the point of dereference. As such, you","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267820,"byte_end":267892,"line_start":572,"line_end":572,"column_start":2,"column_end":74}},{"value":"/ can safely use this to perform arbitrary pointer arithmetic that Rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267894,"byte_end":267967,"line_start":573,"line_end":573,"column_start":2,"column_end":75}},{"value":"/ considers illegal in ordinary arithmetic, as long as you do not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":267969,"byte_end":268036,"line_start":574,"line_end":574,"column_start":2,"column_end":69}},{"value":"/ dereference the bit-pointer until it has been brought in bounds of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268038,"byte_end":268112,"line_start":575,"line_end":575,"column_start":2,"column_end":76}},{"value":"/ originating provenance region.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268114,"byte_end":268148,"line_start":576,"line_end":576,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268150,"byte_end":268153,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ This means that, to the Rust rule engine,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268155,"byte_end":268200,"line_start":578,"line_end":578,"column_start":2,"column_end":47}},{"value":"/ `let z = x.wrapping_add(y as usize).wrapping_sub(x as usize);` is not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268202,"byte_end":268275,"line_start":579,"line_end":579,"column_start":2,"column_end":75}},{"value":"/ equivalent to `y`, but `z` is safe to construct, and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268277,"byte_end":268333,"line_start":580,"line_end":580,"column_start":2,"column_end":58}},{"value":"/ `z.wrapping_add(x as usize).wrapping_sub(y as usize)` produces a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268335,"byte_end":268403,"line_start":581,"line_end":581,"column_start":2,"column_end":70}},{"value":"/ bit-pointer that *is* equivalent to `x`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268405,"byte_end":268449,"line_start":582,"line_end":582,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268451,"byte_end":268454,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ See the documentation of the original method for more details about","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268456,"byte_end":268527,"line_start":584,"line_end":584,"column_start":2,"column_end":73}},{"value":"/ provenance regions, and the distinctions that the optimizer makes about","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268529,"byte_end":268604,"line_start":585,"line_end":585,"column_start":2,"column_end":77}},{"value":"/ them.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268606,"byte_end":268615,"line_start":586,"line_end":586,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268617,"byte_end":268620,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268622,"byte_end":268637,"line_start":588,"line_end":588,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268639,"byte_end":268642,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268644,"byte_end":268655,"line_start":590,"line_end":590,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268657,"byte_end":268684,"line_start":591,"line_end":591,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268686,"byte_end":268689,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ let data = 0u32;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268691,"byte_end":268711,"line_start":593,"line_end":593,"column_start":2,"column_end":22}},{"value":"/ let mut ptr = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268713,"byte_end":268769,"line_start":594,"line_end":594,"column_start":2,"column_end":58}},{"value":"/ let end = ptr.wrapping_offset(32);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268771,"byte_end":268809,"line_start":595,"line_end":595,"column_start":2,"column_end":40}},{"value":"/ while ptr < end {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268811,"byte_end":268832,"line_start":596,"line_end":596,"column_start":2,"column_end":23}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268834,"byte_end":268867,"line_start":597,"line_end":597,"column_start":2,"column_end":35}},{"value":"/   println!(\"{}\", unsafe { ptr.read() });","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268869,"byte_end":268913,"line_start":598,"line_end":598,"column_start":2,"column_end":46}},{"value":"/   # }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268915,"byte_end":268924,"line_start":599,"line_end":599,"column_start":2,"column_end":11}},{"value":"/   ptr = ptr.wrapping_offset(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268926,"byte_end":268961,"line_start":600,"line_end":600,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268963,"byte_end":268968,"line_start":601,"line_end":601,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268970,"byte_end":268977,"line_start":602,"line_end":602,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268979,"byte_end":268988,"line_start":603,"line_end":603,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":268990,"byte_end":269066,"line_start":604,"line_end":604,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271739,"byte_end":271750,"line_start":682,"line_end":682,"column_start":16,"column_end":27},"name":"offset_from","qualname":"<BitPtr<M, T, O>>::offset_from","value":"pub unsafe fn offset_from<U>(Self, BitPtr<M, U, O>) -> isize where\nU: BitStore<Mem = T::Mem>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the distance (in bits) between two bit-pointers.","sig":null,"attributes":[{"value":"/ Calculates the distance (in bits) between two bit-pointers.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269242,"byte_end":269305,"line_start":610,"line_end":610,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269307,"byte_end":269310,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ This method is the inverse of [`.offset()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269312,"byte_end":269360,"line_start":612,"line_end":612,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269362,"byte_end":269365,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269367,"byte_end":269382,"line_start":614,"line_end":614,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269384,"byte_end":269387,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset_from)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269389,"byte_end":269490,"line_start":616,"line_end":616,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269492,"byte_end":269495,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269497,"byte_end":269519,"line_start":618,"line_end":618,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269521,"byte_end":269524,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ The base pointer may have a different `BitStore` type parameter, as long","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269526,"byte_end":269602,"line_start":620,"line_end":620,"column_start":2,"column_end":78}},{"value":"/ as they share an underlying memory type. This is necessary in order to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269604,"byte_end":269678,"line_start":621,"line_end":621,"column_start":2,"column_end":76}},{"value":"/ accommodate aliasing markers introduced between when an origin pointer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269680,"byte_end":269754,"line_start":622,"line_end":622,"column_start":2,"column_end":76}},{"value":"/ was taken and when `self` compared against it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269756,"byte_end":269806,"line_start":623,"line_end":623,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269808,"byte_end":269811,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269813,"byte_end":269826,"line_start":625,"line_end":625,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269828,"byte_end":269831,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ Both `self` and `origin` **must** be drawn from the same provenance","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269833,"byte_end":269904,"line_start":627,"line_end":627,"column_start":2,"column_end":73}},{"value":"/ region. This means that they must be created from the same Rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269906,"byte_end":269973,"line_start":628,"line_end":628,"column_start":2,"column_end":69}},{"value":"/ allocation, whether with `let` or the allocator API, and must be in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":269975,"byte_end":270050,"line_start":629,"line_end":629,"column_start":2,"column_end":77}},{"value":"/ (inclusive) range `base ..= base + len`. The first bit past the end of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270052,"byte_end":270126,"line_start":630,"line_end":630,"column_start":2,"column_end":76}},{"value":"/ a region can be addressed, just not dereferenced.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270128,"byte_end":270181,"line_start":631,"line_end":631,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270183,"byte_end":270186,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ See the original `<*T>::offset_from` for more details on region safety.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270188,"byte_end":270263,"line_start":633,"line_end":633,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270265,"byte_end":270268,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270270,"byte_end":270285,"line_start":635,"line_end":635,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270287,"byte_end":270290,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270292,"byte_end":270303,"line_start":637,"line_end":637,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270305,"byte_end":270332,"line_start":638,"line_end":638,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270334,"byte_end":270337,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ let data = 0u32;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270339,"byte_end":270359,"line_start":640,"line_end":640,"column_start":2,"column_end":22}},{"value":"/ let base = BitPtr::<_, _, Lsb0>::from_ref(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270361,"byte_end":270414,"line_start":641,"line_end":641,"column_start":2,"column_end":55}},{"value":"/ let low = unsafe { base.add(10) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270416,"byte_end":270454,"line_start":642,"line_end":642,"column_start":2,"column_end":40}},{"value":"/ let high = unsafe { low.add(15) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270456,"byte_end":270494,"line_start":643,"line_end":643,"column_start":2,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270496,"byte_end":270508,"line_start":644,"line_end":644,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(high.offset_from(low), 15);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270510,"byte_end":270554,"line_start":645,"line_end":645,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(low.offset_from(high), -15);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270556,"byte_end":270601,"line_start":646,"line_end":646,"column_start":2,"column_end":47}},{"value":"/   assert_eq!(low.offset(15), high);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270603,"byte_end":270642,"line_start":647,"line_end":647,"column_start":2,"column_end":41}},{"value":"/   assert_eq!(high.offset(-15), low);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270644,"byte_end":270684,"line_start":648,"line_end":648,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270686,"byte_end":270691,"line_start":649,"line_end":649,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270693,"byte_end":270700,"line_start":650,"line_end":650,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270702,"byte_end":270705,"line_start":651,"line_end":651,"column_start":2,"column_end":5}},{"value":"/ While this method is safe to *construct* bit-pointers that depart a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270707,"byte_end":270778,"line_start":652,"line_end":652,"column_start":2,"column_end":73}},{"value":"/ provenance region, it remains illegal to *dereference* those pointers!","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270780,"byte_end":270854,"line_start":653,"line_end":653,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270856,"byte_end":270859,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ This usage is incorrect, and a program that contains it is not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270861,"byte_end":270927,"line_start":655,"line_end":655,"column_start":2,"column_end":68}},{"value":"/ well-formed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270929,"byte_end":270945,"line_start":656,"line_end":656,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270947,"byte_end":270950,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270952,"byte_end":270970,"line_start":658,"line_end":658,"column_start":2,"column_end":20}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":270972,"byte_end":270999,"line_start":659,"line_end":659,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271001,"byte_end":271004,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ let a = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271006,"byte_end":271022,"line_start":661,"line_end":661,"column_start":2,"column_end":18}},{"value":"/ let b = !0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271024,"byte_end":271041,"line_start":662,"line_end":662,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271043,"byte_end":271046,"line_start":663,"line_end":663,"column_start":2,"column_end":5}},{"value":"/ let a_ptr = BitPtr::<_, _, Lsb0>::from_ref(&a);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271048,"byte_end":271099,"line_start":664,"line_end":664,"column_start":2,"column_end":53}},{"value":"/ let b_ptr = BitPtr::<_, _, Lsb0>::from_ref(&b);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271101,"byte_end":271152,"line_start":665,"line_end":665,"column_start":2,"column_end":53}},{"value":"/ let diff = (b_ptr.pointer() as isize)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271154,"byte_end":271195,"line_start":666,"line_end":666,"column_start":2,"column_end":43}},{"value":"/   .wrapping_sub(a_ptr.pointer() as isize)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271197,"byte_end":271242,"line_start":667,"line_end":667,"column_start":2,"column_end":47}},{"value":"/   // Remember: raw pointers are byte-stepped,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271244,"byte_end":271293,"line_start":668,"line_end":668,"column_start":2,"column_end":51}},{"value":"/   // but bit-pointers are bit-stepped.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271295,"byte_end":271337,"line_start":669,"line_end":669,"column_start":2,"column_end":44}},{"value":"/   .wrapping_mul(8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271339,"byte_end":271362,"line_start":670,"line_end":670,"column_start":2,"column_end":25}},{"value":"/ // This pointer to `b` has `a`’s provenance:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271364,"byte_end":271414,"line_start":671,"line_end":671,"column_start":2,"column_end":50}},{"value":"/ let b_ptr_2 = a_ptr.wrapping_offset(diff);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271416,"byte_end":271462,"line_start":672,"line_end":672,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271464,"byte_end":271467,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ // They are *arithmetically* equal:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271469,"byte_end":271508,"line_start":674,"line_end":674,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(b_ptr, b_ptr_2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271510,"byte_end":271541,"line_start":675,"line_end":675,"column_start":2,"column_end":33}},{"value":"/ // But it is still undefined behavior to cross provenances!","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271543,"byte_end":271606,"line_start":676,"line_end":676,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(0, unsafe { b_ptr_2.offset_from(b_ptr) });","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271608,"byte_end":271665,"line_start":677,"line_end":677,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271667,"byte_end":271674,"line_start":678,"line_end":678,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271676,"byte_end":271679,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ [`.offset()`]: Self::offset","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271681,"byte_end":271712,"line_start":680,"line_end":680,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":271714,"byte_end":271723,"line_start":681,"line_end":681,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272496,"byte_end":272499,"line_start":706,"line_end":706,"column_start":16,"column_end":19},"name":"add","qualname":"<BitPtr<M, T, O>>::add","value":"pub unsafe fn add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adjusts a bit-pointer upwards in memory. This is equivalent to\n `.offset(count as isize)`.","sig":null,"attributes":[{"value":"/ Adjusts a bit-pointer upwards in memory. This is equivalent to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272077,"byte_end":272143,"line_start":692,"line_end":692,"column_start":2,"column_end":68}},{"value":"/ `.offset(count as isize)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272145,"byte_end":272175,"line_start":693,"line_end":693,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272177,"byte_end":272180,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272182,"byte_end":272214,"line_start":695,"line_end":695,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272216,"byte_end":272219,"line_start":696,"line_end":696,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272221,"byte_end":272236,"line_start":697,"line_end":697,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272238,"byte_end":272241,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ [`pointer::add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.add)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272243,"byte_end":272328,"line_start":699,"line_end":699,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272330,"byte_end":272333,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272335,"byte_end":272348,"line_start":701,"line_end":701,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272350,"byte_end":272353,"line_start":702,"line_end":702,"column_start":2,"column_end":5}},{"value":"/ See [`.offset()`](Self::offset).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272355,"byte_end":272391,"line_start":703,"line_end":703,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272393,"byte_end":272402,"line_start":704,"line_end":704,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272404,"byte_end":272480,"line_start":705,"line_end":705,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273003,"byte_end":273006,"line_start":724,"line_end":724,"column_start":16,"column_end":19},"name":"sub","qualname":"<BitPtr<M, T, O>>::sub","value":"pub unsafe fn sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adjusts a bit-pointer downwards in memory. This is equivalent to\n `.offset((count as isize).wrapping_neg())`.","sig":null,"attributes":[{"value":"/ Adjusts a bit-pointer downwards in memory. This is equivalent to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272565,"byte_end":272633,"line_start":710,"line_end":710,"column_start":2,"column_end":70}},{"value":"/ `.offset((count as isize).wrapping_neg())`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272635,"byte_end":272682,"line_start":711,"line_end":711,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272684,"byte_end":272687,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272689,"byte_end":272721,"line_start":713,"line_end":713,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272723,"byte_end":272726,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272728,"byte_end":272743,"line_start":715,"line_end":715,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272745,"byte_end":272748,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ [`pointer::sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.sub)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272750,"byte_end":272835,"line_start":717,"line_end":717,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272837,"byte_end":272840,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272842,"byte_end":272855,"line_start":719,"line_end":719,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272857,"byte_end":272860,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ See [`.offset()`](Self::offset).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272862,"byte_end":272898,"line_start":721,"line_end":721,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272900,"byte_end":272909,"line_start":722,"line_end":722,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":272911,"byte_end":272987,"line_start":723,"line_end":723,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273572,"byte_end":273584,"line_start":742,"line_end":742,"column_start":9,"column_end":21},"name":"wrapping_add","qualname":"<BitPtr<M, T, O>>::wrapping_add","value":"pub fn wrapping_add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adjusts a bit-pointer upwards in memory, using wrapping semantics. This\n is equivalent to `.wrapping_offset(count as isize)`.","sig":null,"attributes":[{"value":"/ Adjusts a bit-pointer upwards in memory, using wrapping semantics. This","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273089,"byte_end":273164,"line_start":728,"line_end":728,"column_start":2,"column_end":77}},{"value":"/ is equivalent to `.wrapping_offset(count as isize)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273166,"byte_end":273222,"line_start":729,"line_end":729,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273224,"byte_end":273227,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273229,"byte_end":273261,"line_start":731,"line_end":731,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273263,"byte_end":273266,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273268,"byte_end":273283,"line_start":733,"line_end":733,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273285,"byte_end":273288,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273290,"byte_end":273393,"line_start":735,"line_end":735,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273395,"byte_end":273398,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273400,"byte_end":273413,"line_start":737,"line_end":737,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273415,"byte_end":273418,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ See [`.wrapping_offset()`](Self::wrapping_offset).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273420,"byte_end":273474,"line_start":739,"line_end":739,"column_start":2,"column_end":56}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273476,"byte_end":273485,"line_start":740,"line_end":740,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273487,"byte_end":273563,"line_start":741,"line_end":741,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274166,"byte_end":274178,"line_start":761,"line_end":761,"column_start":9,"column_end":21},"name":"wrapping_sub","qualname":"<BitPtr<M, T, O>>::wrapping_sub","value":"pub fn wrapping_sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adjusts a bit-pointer downwards in memory, using wrapping semantics.\n This is equivalent to\n `.wrapping_offset((count as isize).wrapping_neg())`.","sig":null,"attributes":[{"value":"/ Adjusts a bit-pointer downwards in memory, using wrapping semantics.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273659,"byte_end":273731,"line_start":746,"line_end":746,"column_start":2,"column_end":74}},{"value":"/ This is equivalent to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273733,"byte_end":273758,"line_start":747,"line_end":747,"column_start":2,"column_end":27}},{"value":"/ `.wrapping_offset((count as isize).wrapping_neg())`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273760,"byte_end":273816,"line_start":748,"line_end":748,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273818,"byte_end":273821,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273823,"byte_end":273855,"line_start":750,"line_end":750,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273857,"byte_end":273860,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273862,"byte_end":273877,"line_start":752,"line_end":752,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273879,"byte_end":273882,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273884,"byte_end":273987,"line_start":754,"line_end":754,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273989,"byte_end":273992,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":273994,"byte_end":274007,"line_start":756,"line_end":756,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274009,"byte_end":274012,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ See [`.wrapping_offset()`](Self::wrapping_offset).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274014,"byte_end":274068,"line_start":758,"line_end":758,"column_start":2,"column_end":56}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274070,"byte_end":274079,"line_start":759,"line_end":759,"column_start":2,"column_end":11}},{"value":"must_use = \"returns a new bit-pointer rather than modifying its argument\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274081,"byte_end":274157,"line_start":760,"line_end":760,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2542},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274511,"byte_end":274515,"line_start":775,"line_end":775,"column_start":16,"column_end":20},"name":"read","qualname":"<BitPtr<M, T, O>>::read","value":"pub unsafe fn read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self`.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274270,"byte_end":274301,"line_start":765,"line_end":765,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274303,"byte_end":274306,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274308,"byte_end":274323,"line_start":767,"line_end":767,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274325,"byte_end":274328,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274330,"byte_end":274417,"line_start":769,"line_end":769,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274419,"byte_end":274422,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274424,"byte_end":274437,"line_start":771,"line_end":771,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274439,"byte_end":274442,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read`](crate::ptr::read).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274444,"byte_end":274484,"line_start":773,"line_end":773,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274486,"byte_end":274495,"line_start":774,"line_end":774,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275186,"byte_end":275199,"line_start":795,"line_end":795,"column_start":16,"column_end":29},"name":"read_volatile","qualname":"<BitPtr<M, T, O>>::read_volatile","value":"pub unsafe fn read_volatile(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self` using a volatile load.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self` using a volatile load.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274598,"byte_end":274651,"line_start":779,"line_end":779,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274653,"byte_end":274656,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ Prefer using a crate such as [`voladdress`][0] to manage volatile I/O","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274658,"byte_end":274731,"line_start":781,"line_end":781,"column_start":2,"column_end":75}},{"value":"/ and use `bitvec` only on the local objects it provides. Individual I/O","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274733,"byte_end":274807,"line_start":782,"line_end":782,"column_start":2,"column_end":76}},{"value":"/ operations for individual bits are likely not the behavior you want.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274809,"byte_end":274881,"line_start":783,"line_end":783,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274883,"byte_end":274886,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274888,"byte_end":274903,"line_start":785,"line_end":785,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274905,"byte_end":274908,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":274910,"byte_end":275015,"line_start":787,"line_end":787,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275017,"byte_end":275020,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275022,"byte_end":275035,"line_start":789,"line_end":789,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275037,"byte_end":275040,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_volatile`](crate::ptr::read_volatile).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275042,"byte_end":275100,"line_start":791,"line_end":791,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275102,"byte_end":275105,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ [0]: https://docs.rs/voladdress/later/voladdress","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275107,"byte_end":275159,"line_start":793,"line_end":793,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275161,"byte_end":275170,"line_start":794,"line_end":794,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275903,"byte_end":275917,"line_start":815,"line_end":815,"column_start":16,"column_end":30},"name":"read_unaligned","qualname":"<BitPtr<M, T, O>>::read_unaligned","value":"pub unsafe fn read_unaligned(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self` using an unaligned memory access.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self` using an unaligned memory access.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275282,"byte_end":275346,"line_start":799,"line_end":799,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275348,"byte_end":275351,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ `BitPtr` forbids unaligned addresses. If you have such an address, you","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275353,"byte_end":275427,"line_start":801,"line_end":801,"column_start":2,"column_end":76}},{"value":"/ must perform your memory accesses on the raw element, and only use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275429,"byte_end":275499,"line_start":802,"line_end":802,"column_start":2,"column_end":72}},{"value":"/ `bitvec` on a well-aligned stack temporary. This method should never be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275501,"byte_end":275576,"line_start":803,"line_end":803,"column_start":2,"column_end":77}},{"value":"/ necessary.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275578,"byte_end":275592,"line_start":804,"line_end":804,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275594,"byte_end":275597,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275599,"byte_end":275614,"line_start":806,"line_end":806,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275616,"byte_end":275619,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_unaligned`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275621,"byte_end":275728,"line_start":808,"line_end":808,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275730,"byte_end":275733,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275735,"byte_end":275748,"line_start":810,"line_end":810,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275750,"byte_end":275753,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_unaligned`](crate::ptr::read_unaligned)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275755,"byte_end":275814,"line_start":812,"line_end":812,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275816,"byte_end":275825,"line_start":813,"line_end":813,"column_start":2,"column_end":11}},{"value":"deprecated = \"`BitPtr` does not have unaligned addresses\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":275827,"byte_end":275887,"line_start":814,"line_end":814,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2545},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276539,"byte_end":276546,"line_start":835,"line_end":835,"column_start":16,"column_end":23},"name":"copy_to","qualname":"<BitPtr<M, T, O>>::copy_to","value":"pub unsafe fn copy_to<T2, O2>(Self, BitPtr<Mut, T2, O2>, usize) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276001,"byte_end":276074,"line_start":819,"line_end":819,"column_start":2,"column_end":75}},{"value":"/ may overlap.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276076,"byte_end":276092,"line_start":820,"line_end":820,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276094,"byte_end":276097,"line_start":821,"line_end":821,"column_start":2,"column_end":5}},{"value":"/ Note that overlap is only defined when `O` and `O2` are the same type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276099,"byte_end":276173,"line_start":822,"line_end":822,"column_start":2,"column_end":76}},{"value":"/ If they differ, then `bitvec` does not define overlap, and assumes that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276175,"byte_end":276250,"line_start":823,"line_end":823,"column_start":2,"column_end":77}},{"value":"/ they are wholly discrete in memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276252,"byte_end":276291,"line_start":824,"line_end":824,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276293,"byte_end":276296,"line_start":825,"line_end":825,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276298,"byte_end":276313,"line_start":826,"line_end":826,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276315,"byte_end":276318,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276320,"byte_end":276413,"line_start":828,"line_end":828,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276415,"byte_end":276418,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276420,"byte_end":276433,"line_start":830,"line_end":830,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276435,"byte_end":276438,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`](crate::ptr::copy).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276440,"byte_end":276480,"line_start":832,"line_end":832,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276482,"byte_end":276491,"line_start":833,"line_end":833,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276493,"byte_end":276523,"line_start":834,"line_end":834,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277099,"byte_end":277121,"line_start":855,"line_end":855,"column_start":16,"column_end":38},"name":"copy_to_nonoverlapping","qualname":"<BitPtr<M, T, O>>::copy_to_nonoverlapping","value":"pub unsafe fn copy_to_nonoverlapping<T2, O2>(Self, BitPtr<Mut, T2, O2>, usize)\nwhere T2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276694,"byte_end":276767,"line_start":843,"line_end":843,"column_start":2,"column_end":75}},{"value":"/ may *not* overlap.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276769,"byte_end":276791,"line_start":844,"line_end":844,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276793,"byte_end":276796,"line_start":845,"line_end":845,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276798,"byte_end":276813,"line_start":846,"line_end":846,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276815,"byte_end":276818,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276820,"byte_end":276943,"line_start":848,"line_end":848,"column_start":2,"column_end":125}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276945,"byte_end":276948,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276950,"byte_end":276963,"line_start":850,"line_end":850,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276965,"byte_end":276968,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`](crate::ptr::copy_nonoverlapping).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":276970,"byte_end":277040,"line_start":852,"line_end":852,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277042,"byte_end":277051,"line_start":853,"line_end":853,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277053,"byte_end":277083,"line_start":854,"line_end":854,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279455,"byte_end":279467,"line_start":924,"line_end":924,"column_start":9,"column_end":21},"name":"align_offset","qualname":"<BitPtr<M, T, O>>::align_offset","value":"pub fn align_offset(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the offset (in bits) that needs to be applied to the\n bit-pointer in order to make it aligned to the given *byte* alignment.","sig":null,"attributes":[{"value":"/ Computes the offset (in bits) that needs to be applied to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277293,"byte_end":277358,"line_start":866,"line_end":866,"column_start":2,"column_end":67}},{"value":"/ bit-pointer in order to make it aligned to the given *byte* alignment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277360,"byte_end":277434,"line_start":867,"line_end":867,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277436,"byte_end":277439,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ “Alignment” here means that the bit-pointer selects the starting bit of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277441,"byte_end":277520,"line_start":869,"line_end":869,"column_start":2,"column_end":77}},{"value":"/ a memory location whose address satisfies the requested alignment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277522,"byte_end":277592,"line_start":870,"line_end":870,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277594,"byte_end":277597,"line_start":871,"line_end":871,"column_start":2,"column_end":5}},{"value":"/ `align` is measured in **bytes**. If you wish to align your bit-pointer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277599,"byte_end":277674,"line_start":872,"line_end":872,"column_start":2,"column_end":77}},{"value":"/ to a specific fraction (½, ¼, or ⅛ of one byte), please file an issue","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277676,"byte_end":277753,"line_start":873,"line_end":873,"column_start":2,"column_end":75}},{"value":"/ and I will work on adding this functionality.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277755,"byte_end":277804,"line_start":874,"line_end":874,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277806,"byte_end":277809,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277811,"byte_end":277826,"line_start":876,"line_end":876,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277828,"byte_end":277831,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ [`pointer::align_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277833,"byte_end":277936,"line_start":878,"line_end":878,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277938,"byte_end":277941,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277943,"byte_end":277955,"line_start":880,"line_end":880,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277957,"byte_end":277960,"line_start":881,"line_end":881,"column_start":2,"column_end":5}},{"value":"/ If the base-element address of the bit-pointer is already aligned to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":277962,"byte_end":278034,"line_start":882,"line_end":882,"column_start":2,"column_end":74}},{"value":"/ `align`, then this will return the bit-offset required to select the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278036,"byte_end":278108,"line_start":883,"line_end":883,"column_start":2,"column_end":74}},{"value":"/ first bit of the successor element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278110,"byte_end":278149,"line_start":884,"line_end":884,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278151,"byte_end":278154,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ If it is not possible to align the bit-pointer, then the implementation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278156,"byte_end":278231,"line_start":886,"line_end":886,"column_start":2,"column_end":77}},{"value":"/ returns `usize::MAX`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278233,"byte_end":278258,"line_start":887,"line_end":887,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278260,"byte_end":278263,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ The return value is measured in bits, not `T` elements or bytes. The","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278265,"byte_end":278337,"line_start":889,"line_end":889,"column_start":2,"column_end":74}},{"value":"/ only thing you can do with it is pass it into [`.add()`] or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278339,"byte_end":278402,"line_start":890,"line_end":890,"column_start":2,"column_end":65}},{"value":"/ [`.wrapping_add()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278404,"byte_end":278428,"line_start":891,"line_end":891,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278430,"byte_end":278433,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ Note from the standard library: It is permissible for the implementation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278435,"byte_end":278511,"line_start":893,"line_end":893,"column_start":2,"column_end":78}},{"value":"/ to *always* return `usize::MAX`. Only your algorithm’s performance can","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278513,"byte_end":278589,"line_start":894,"line_end":894,"column_start":2,"column_end":76}},{"value":"/ depend on getting a usable offset here; it must be correct independently","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278591,"byte_end":278667,"line_start":895,"line_end":895,"column_start":2,"column_end":78}},{"value":"/ of this function providing a useful value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278669,"byte_end":278715,"line_start":896,"line_end":896,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278717,"byte_end":278720,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278722,"byte_end":278735,"line_start":898,"line_end":898,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278737,"byte_end":278740,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ There are no guarantees whatsoëver that offsetting the bit-pointer will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278742,"byte_end":278818,"line_start":900,"line_end":900,"column_start":2,"column_end":77}},{"value":"/ not overflow or go beyond the allocation that the bit-pointer selects.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278820,"byte_end":278894,"line_start":901,"line_end":901,"column_start":2,"column_end":76}},{"value":"/ It is up to the caller to ensure that the returned offset is correct in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278896,"byte_end":278971,"line_start":902,"line_end":902,"column_start":2,"column_end":77}},{"value":"/ all terms other than alignment.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":278973,"byte_end":279008,"line_start":903,"line_end":903,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279010,"byte_end":279013,"line_start":904,"line_end":904,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279015,"byte_end":279028,"line_start":905,"line_end":905,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279030,"byte_end":279033,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ This method panics if `align` is not a power of two.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279035,"byte_end":279091,"line_start":907,"line_end":907,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279093,"byte_end":279096,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279098,"byte_end":279113,"line_start":909,"line_end":909,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279115,"byte_end":279118,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279120,"byte_end":279131,"line_start":911,"line_end":911,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279133,"byte_end":279160,"line_start":912,"line_end":912,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279162,"byte_end":279165,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279167,"byte_end":279191,"line_start":914,"line_end":914,"column_start":2,"column_end":26}},{"value":"/ let ptr = BitPtr::<_, _, Lsb0>::from_slice(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279193,"byte_end":279247,"line_start":915,"line_end":915,"column_start":2,"column_end":56}},{"value":"/ let ptr = unsafe { ptr.add(2) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279249,"byte_end":279285,"line_start":916,"line_end":916,"column_start":2,"column_end":38}},{"value":"/ let count = ptr.align_offset(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279287,"byte_end":279323,"line_start":917,"line_end":917,"column_start":2,"column_end":38}},{"value":"/ assert!(count >= 6);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279325,"byte_end":279349,"line_start":918,"line_end":918,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279351,"byte_end":279358,"line_start":919,"line_end":919,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279360,"byte_end":279363,"line_start":920,"line_end":920,"column_start":2,"column_end":5}},{"value":"/ [`.add()`]: Self::add","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279365,"byte_end":279390,"line_start":921,"line_end":921,"column_start":2,"column_end":27}},{"value":"/ [`.wrapping_add()`]: Self::wrapping_add","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279392,"byte_end":279435,"line_start":922,"line_end":922,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279437,"byte_end":279446,"line_start":923,"line_end":923,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281688,"byte_end":281694,"line_start":991,"line_end":991,"column_start":16,"column_end":22},"name":"as_mut","qualname":"<BitPtr<Mut, T, O>>::as_mut","value":"pub unsafe fn as_mut<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279919,"byte_end":279970,"line_start":944,"line_end":944,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279972,"byte_end":279975,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` guarantees that it is non-null and well-aligned, this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279977,"byte_end":280051,"line_start":946,"line_end":946,"column_start":2,"column_end":76}},{"value":"/ never returns `None`. However, this is still unsafe to call on any","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280053,"byte_end":280123,"line_start":947,"line_end":947,"column_start":2,"column_end":72}},{"value":"/ bit-pointers created from conjured values rather than known references.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280125,"byte_end":280200,"line_start":948,"line_end":948,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280202,"byte_end":280205,"line_start":949,"line_end":949,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280207,"byte_end":280222,"line_start":950,"line_end":950,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280224,"byte_end":280227,"line_start":951,"line_end":951,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280229,"byte_end":280320,"line_start":952,"line_end":952,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280322,"byte_end":280325,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280327,"byte_end":280349,"line_start":954,"line_end":954,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280351,"byte_end":280354,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280356,"byte_end":280426,"line_start":956,"line_end":956,"column_start":2,"column_end":72}},{"value":"/ implements `DerefMut<Target = bool>`, and can be converted to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280428,"byte_end":280493,"line_start":957,"line_end":957,"column_start":2,"column_end":67}},{"value":"/ `&mut bool` with a reborrow `&mut *`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280495,"byte_end":280536,"line_start":958,"line_end":958,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280538,"byte_end":280541,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ Writes to the proxy are not reflected in the proxied location until the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280543,"byte_end":280618,"line_start":960,"line_end":960,"column_start":2,"column_end":77}},{"value":"/ proxy is destroyed, either through `Drop` or its [`.commit()`] method.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280620,"byte_end":280694,"line_start":961,"line_end":961,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280696,"byte_end":280699,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280701,"byte_end":280714,"line_start":963,"line_end":963,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280716,"byte_end":280719,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280721,"byte_end":280796,"line_start":965,"line_end":965,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer in order to create the proxy. As","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280798,"byte_end":280870,"line_start":966,"line_end":966,"column_start":2,"column_end":74}},{"value":"/ such, you must ensure the following conditions are met:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280872,"byte_end":280931,"line_start":967,"line_end":967,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280933,"byte_end":280936,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferenceable as defined in the standard library","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":280938,"byte_end":281014,"line_start":969,"line_end":969,"column_start":2,"column_end":78}},{"value":"/   documentation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281016,"byte_end":281035,"line_start":970,"line_end":970,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281037,"byte_end":281099,"line_start":971,"line_end":971,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281101,"byte_end":281177,"line_start":972,"line_end":972,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281179,"byte_end":281253,"line_start":973,"line_end":973,"column_start":2,"column_end":76}},{"value":"/ - you must ensure that no other `bitvec` handle targets the referent bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281255,"byte_end":281331,"line_start":974,"line_end":974,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281333,"byte_end":281336,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281338,"byte_end":281353,"line_start":976,"line_end":976,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281355,"byte_end":281358,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281360,"byte_end":281371,"line_start":978,"line_end":978,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281373,"byte_end":281400,"line_start":979,"line_end":979,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281402,"byte_end":281405,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281407,"byte_end":281430,"line_start":981,"line_end":981,"column_start":2,"column_end":25}},{"value":"/ let ptr = BitPtr::<_, _, Lsb0>::from_mut(&mut data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281432,"byte_end":281488,"line_start":982,"line_end":982,"column_start":2,"column_end":58}},{"value":"/ let mut val = unsafe { ptr.as_mut() }.unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281490,"byte_end":281541,"line_start":983,"line_end":983,"column_start":2,"column_end":53}},{"value":"/ assert!(!*val);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281543,"byte_end":281562,"line_start":984,"line_end":984,"column_start":2,"column_end":21}},{"value":"/ *val = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281564,"byte_end":281580,"line_start":985,"line_end":985,"column_start":2,"column_end":18}},{"value":"/ assert!(*val);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281582,"byte_end":281600,"line_start":986,"line_end":986,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281602,"byte_end":281609,"line_start":987,"line_end":987,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281611,"byte_end":281614,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ [`.commit()`]: crate::ptr::BitRef::commit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281616,"byte_end":281661,"line_start":989,"line_end":989,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281663,"byte_end":281672,"line_start":990,"line_end":990,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282385,"byte_end":282394,"line_start":1015,"line_end":1015,"column_start":16,"column_end":25},"name":"copy_from","qualname":"<BitPtr<Mut, T, O>>::copy_from","value":"pub unsafe fn copy_from<T2, O2>(Self, BitPtr<Const, T2, O2>, usize) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from the region starting at `src` to the region\n starting at `self`.","sig":null,"attributes":[{"value":"/ Copies `count` bits from the region starting at `src` to the region","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281779,"byte_end":281850,"line_start":995,"line_end":995,"column_start":2,"column_end":73}},{"value":"/ starting at `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281852,"byte_end":281875,"line_start":996,"line_end":996,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281877,"byte_end":281880,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ The regions are free to overlap; the implementation will detect overlap","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281882,"byte_end":281957,"line_start":998,"line_end":998,"column_start":2,"column_end":77}},{"value":"/ and correctly avoid it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281959,"byte_end":281986,"line_start":999,"line_end":999,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281988,"byte_end":281991,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order from [`ptr::copy`]: `self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":281993,"byte_end":282068,"line_start":1001,"line_end":1001,"column_start":2,"column_end":77}},{"value":"/ is the destination, not the source.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282070,"byte_end":282109,"line_start":1002,"line_end":1002,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282111,"byte_end":282114,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282116,"byte_end":282131,"line_start":1004,"line_end":1004,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282133,"byte_end":282136,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282138,"byte_end":282235,"line_start":1006,"line_end":1006,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282237,"byte_end":282240,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282242,"byte_end":282255,"line_start":1008,"line_end":1008,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282257,"byte_end":282260,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282262,"byte_end":282284,"line_start":1010,"line_end":1010,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282286,"byte_end":282289,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282291,"byte_end":282326,"line_start":1012,"line_end":1012,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282328,"byte_end":282337,"line_start":1013,"line_end":1013,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282339,"byte_end":282369,"line_start":1014,"line_end":1014,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283306,"byte_end":283330,"line_start":1047,"line_end":1047,"column_start":16,"column_end":40},"name":"copy_from_nonoverlapping","qualname":"<BitPtr<Mut, T, O>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping<T2,\nO2>(Self, BitPtr<Const, T2, O2>, usize) where T2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from the region starting at `src` to the region\n starting at `self`.","sig":null,"attributes":[{"value":"/ Copies `count` bits from the region starting at `src` to the region","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282535,"byte_end":282606,"line_start":1026,"line_end":1026,"column_start":2,"column_end":73}},{"value":"/ starting at `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282608,"byte_end":282631,"line_start":1027,"line_end":1027,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282633,"byte_end":282636,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ Unlike [`.copy_from()`], the two regions may *not* overlap; this method","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282638,"byte_end":282713,"line_start":1029,"line_end":1029,"column_start":2,"column_end":77}},{"value":"/ does not attempt to detect overlap and thus may have a slight","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282715,"byte_end":282780,"line_start":1030,"line_end":1030,"column_start":2,"column_end":67}},{"value":"/ performance boost over the overlap-handling `.copy_from()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282782,"byte_end":282845,"line_start":1031,"line_end":1031,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282847,"byte_end":282850,"line_start":1032,"line_end":1032,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order from","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282852,"byte_end":282905,"line_start":1033,"line_end":1033,"column_start":2,"column_end":55}},{"value":"/ [`ptr::copy_nonoverlapping`]: `self` is the destination, not the source.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282907,"byte_end":282983,"line_start":1034,"line_end":1034,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282985,"byte_end":282988,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":282990,"byte_end":283005,"line_start":1036,"line_end":1036,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283007,"byte_end":283010,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from_nonoverlapping)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283012,"byte_end":283139,"line_start":1038,"line_end":1038,"column_start":2,"column_end":129}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283141,"byte_end":283144,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283146,"byte_end":283159,"line_start":1040,"line_end":1040,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283161,"byte_end":283164,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283166,"byte_end":283203,"line_start":1042,"line_end":1042,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283205,"byte_end":283208,"line_start":1043,"line_end":1043,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from()`]: Self::copy_from","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283210,"byte_end":283247,"line_start":1044,"line_end":1044,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283249,"byte_end":283258,"line_start":1045,"line_end":1045,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283260,"byte_end":283290,"line_start":1046,"line_end":1046,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2563},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283932,"byte_end":283945,"line_start":1073,"line_end":1073,"column_start":9,"column_end":22},"name":"drop_in_place","qualname":"<BitPtr<Mut, T, O>>::drop_in_place","value":"pub fn drop_in_place(Self)","parent":null,"children":[],"decl_id":null,"docs":" Runs the destructor of the referent value.","sig":null,"attributes":[{"value":"/ Runs the destructor of the referent value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283486,"byte_end":283532,"line_start":1058,"line_end":1058,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283534,"byte_end":283537,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ `bool` has no destructor; this function does nothing.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283539,"byte_end":283596,"line_start":1060,"line_end":1060,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283598,"byte_end":283601,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283603,"byte_end":283618,"line_start":1062,"line_end":1062,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283620,"byte_end":283623,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ [`pointer::drop_in_place`](https://doc.rust-lang.org/std/primitive.pointer.html#method.drop_in_place)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283625,"byte_end":283730,"line_start":1064,"line_end":1064,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283732,"byte_end":283735,"line_start":1065,"line_end":1065,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283737,"byte_end":283750,"line_start":1066,"line_end":1066,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283752,"byte_end":283755,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::drop_in_place`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283757,"byte_end":283788,"line_start":1068,"line_end":1068,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283790,"byte_end":283793,"line_start":1069,"line_end":1069,"column_start":2,"column_end":5}},{"value":"/ [`ptr::drop_in_place`]: crate::ptr::drop_in_place","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283795,"byte_end":283848,"line_start":1070,"line_end":1070,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283850,"byte_end":283859,"line_start":1071,"line_end":1071,"column_start":2,"column_end":11}},{"value":"deprecated = \"this has no effect, and should not be called\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283861,"byte_end":283923,"line_start":1072,"line_end":1072,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284241,"byte_end":284246,"line_start":1087,"line_end":1087,"column_start":16,"column_end":21},"name":"write","qualname":"<BitPtr<Mut, T, O>>::write","value":"pub unsafe fn write(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit into the given location.","sig":null,"attributes":[{"value":"/ Writes a new bit into the given location.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":283957,"byte_end":284002,"line_start":1075,"line_end":1075,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284004,"byte_end":284007,"line_start":1076,"line_end":1076,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284009,"byte_end":284024,"line_start":1077,"line_end":1077,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284026,"byte_end":284029,"line_start":1078,"line_end":1078,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284031,"byte_end":284120,"line_start":1079,"line_end":1079,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284122,"byte_end":284125,"line_start":1080,"line_end":1080,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284127,"byte_end":284140,"line_start":1081,"line_end":1081,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284142,"byte_end":284145,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284147,"byte_end":284170,"line_start":1083,"line_end":1083,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284172,"byte_end":284175,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write`]: crate::ptr::write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284177,"byte_end":284214,"line_start":1085,"line_end":1085,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284216,"byte_end":284225,"line_start":1086,"line_end":1086,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285588,"byte_end":285602,"line_start":1121,"line_end":1121,"column_start":16,"column_end":30},"name":"write_volatile","qualname":"<BitPtr<Mut, T, O>>::write_volatile","value":"pub unsafe fn write_volatile(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit using volatile I/O operations.","sig":null,"attributes":[{"value":"/ Writes a new bit using volatile I/O operations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284296,"byte_end":284347,"line_start":1091,"line_end":1091,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284349,"byte_end":284352,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ Because processors do not generally have single-bit read or write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284354,"byte_end":284423,"line_start":1093,"line_end":1093,"column_start":2,"column_end":71}},{"value":"/ instructions, this must perform a volatile read of the entire memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284425,"byte_end":284497,"line_start":1094,"line_end":1094,"column_start":2,"column_end":74}},{"value":"/ location, perform the write locally, then perform another volatile write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284499,"byte_end":284575,"line_start":1095,"line_end":1095,"column_start":2,"column_end":78}},{"value":"/ to the entire location. These three steps are guaranteed to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284577,"byte_end":284643,"line_start":1096,"line_end":1096,"column_start":2,"column_end":68}},{"value":"/ sequential with respect to each other, but are not guaranteed to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284645,"byte_end":284716,"line_start":1097,"line_end":1097,"column_start":2,"column_end":73}},{"value":"/ atomic.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284718,"byte_end":284729,"line_start":1098,"line_end":1098,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284731,"byte_end":284734,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are *only*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284736,"byte_end":284809,"line_start":1100,"line_end":1100,"column_start":2,"column_end":75}},{"value":"/ guaranteed not to be elided or reördered by the compiler across other","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284811,"byte_end":284885,"line_start":1101,"line_end":1101,"column_start":2,"column_end":75}},{"value":"/ I/O operations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284887,"byte_end":284906,"line_start":1102,"line_end":1102,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284908,"byte_end":284911,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ You should not use `bitvec` to act on volatile memory. You should use a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284913,"byte_end":284988,"line_start":1104,"line_end":1104,"column_start":2,"column_end":77}},{"value":"/ crate specialized for volatile I/O work, such as [`voladdr`], and use it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":284990,"byte_end":285066,"line_start":1105,"line_end":1105,"column_start":2,"column_end":78}},{"value":"/ to explicitly manage the I/O and ask it to perform `bitvec` work only on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285068,"byte_end":285144,"line_start":1106,"line_end":1106,"column_start":2,"column_end":78}},{"value":"/ the local snapshot of a volatile location.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285146,"byte_end":285192,"line_start":1107,"line_end":1107,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285194,"byte_end":285197,"line_start":1108,"line_end":1108,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285199,"byte_end":285214,"line_start":1109,"line_end":1109,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285216,"byte_end":285219,"line_start":1110,"line_end":1110,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285221,"byte_end":285328,"line_start":1111,"line_end":1111,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285330,"byte_end":285333,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285335,"byte_end":285348,"line_start":1113,"line_end":1113,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285350,"byte_end":285353,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_volatile`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285355,"byte_end":285387,"line_start":1115,"line_end":1115,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285389,"byte_end":285392,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_volatile`]: crate::ptr::write_volatile","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285394,"byte_end":285449,"line_start":1117,"line_end":1117,"column_start":2,"column_end":57}},{"value":"/ [`voladdr`]: https://docs.rs/voladdr/latest/voladdr","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285451,"byte_end":285506,"line_start":1118,"line_end":1118,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285508,"byte_end":285517,"line_start":1119,"line_end":1119,"column_start":2,"column_end":11}},{"value":"allow(clippy :: needless_borrow)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285519,"byte_end":285552,"line_start":1120,"line_end":1120,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286475,"byte_end":286490,"line_start":1146,"line_end":1146,"column_start":16,"column_end":31},"name":"write_unaligned","qualname":"<BitPtr<Mut, T, O>>::write_unaligned","value":"pub unsafe fn write_unaligned(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into memory, tolerating unaligned addresses.","sig":null,"attributes":[{"value":"/ Writes a bit into memory, tolerating unaligned addresses.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285789,"byte_end":285850,"line_start":1128,"line_end":1128,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285852,"byte_end":285855,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ `BitPtr` does not have unaligned addresses. `BitPtr` itself is capable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285857,"byte_end":285931,"line_start":1130,"line_end":1130,"column_start":2,"column_end":76}},{"value":"/ of operating on misaligned addresses, but elects to disallow use of them","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":285933,"byte_end":286009,"line_start":1131,"line_end":1131,"column_start":2,"column_end":78}},{"value":"/ in keeping with the rest of `bitvec`’s requirements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286011,"byte_end":286069,"line_start":1132,"line_end":1132,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286071,"byte_end":286074,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286076,"byte_end":286091,"line_start":1134,"line_end":1134,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286093,"byte_end":286096,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_unaligned`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_unaligned)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286098,"byte_end":286207,"line_start":1136,"line_end":1136,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286209,"byte_end":286212,"line_start":1137,"line_end":1137,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286214,"byte_end":286227,"line_start":1138,"line_end":1138,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286229,"byte_end":286232,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_unaligned`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286234,"byte_end":286267,"line_start":1140,"line_end":1140,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286269,"byte_end":286272,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_unaligned`]: crate::ptr::write_unaligned","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286274,"byte_end":286331,"line_start":1142,"line_end":1142,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286333,"byte_end":286342,"line_start":1143,"line_end":1143,"column_start":2,"column_end":11}},{"value":"allow(clippy :: needless_borrow)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286344,"byte_end":286377,"line_start":1144,"line_end":1144,"column_start":2,"column_end":35}},{"value":"deprecated = \"`BitPtr` does not have unaligned addresses\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286399,"byte_end":286459,"line_start":1145,"line_end":1145,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287012,"byte_end":287019,"line_start":1166,"line_end":1166,"column_start":16,"column_end":23},"name":"replace","qualname":"<BitPtr<Mut, T, O>>::replace","value":"pub unsafe fn replace(Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Replaces the bit at `*self` with a new value, returning the previous\n value.","sig":null,"attributes":[{"value":"/ Replaces the bit at `*self` with a new value, returning the previous","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286679,"byte_end":286751,"line_start":1153,"line_end":1153,"column_start":2,"column_end":74}},{"value":"/ value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286753,"byte_end":286763,"line_start":1154,"line_end":1154,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286765,"byte_end":286768,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286770,"byte_end":286785,"line_start":1156,"line_end":1156,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286787,"byte_end":286790,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ [`pointer::replace`](https://doc.rust-lang.org/std/primitive.pointer.html#method.replace)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286792,"byte_end":286885,"line_start":1158,"line_end":1158,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286887,"byte_end":286890,"line_start":1159,"line_end":1159,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286892,"byte_end":286905,"line_start":1160,"line_end":1160,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286907,"byte_end":286910,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::replace`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286912,"byte_end":286937,"line_start":1162,"line_end":1162,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286939,"byte_end":286942,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ [`ptr::replace`]: crate::ptr::replace","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286944,"byte_end":286985,"line_start":1164,"line_end":1164,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":286987,"byte_end":286996,"line_start":1165,"line_end":1165,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287372,"byte_end":287376,"line_start":1182,"line_end":1182,"column_start":16,"column_end":20},"name":"swap","qualname":"<BitPtr<Mut, T, O>>::swap","value":"pub unsafe fn swap<T2, O2>(Self, BitPtr<Mut, T2, O2>) where T2: BitStore,\nO2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two mutable locations.","sig":null,"attributes":[{"value":"/ Swaps the bits at two mutable locations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287094,"byte_end":287138,"line_start":1170,"line_end":1170,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287140,"byte_end":287143,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287145,"byte_end":287160,"line_start":1172,"line_end":1172,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287162,"byte_end":287165,"line_start":1173,"line_end":1173,"column_start":2,"column_end":5}},{"value":"/ [`pointer::swap`](https://doc.rust-lang.org/std/primitive.pointer.html#method.swap)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287167,"byte_end":287254,"line_start":1174,"line_end":1174,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287256,"byte_end":287259,"line_start":1175,"line_end":1175,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287261,"byte_end":287274,"line_start":1176,"line_end":1176,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287276,"byte_end":287279,"line_start":1177,"line_end":1177,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::swap`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287281,"byte_end":287303,"line_start":1178,"line_end":1178,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287305,"byte_end":287308,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ [`ptr::swap`]: crate::ptr::swap","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287310,"byte_end":287345,"line_start":1180,"line_end":1180,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287347,"byte_end":287356,"line_start":1181,"line_end":1181,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5899},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291629,"byte_end":291633,"line_start":1406,"line_end":1406,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::single::BitPtrError::Null","value":"BitPtrError::Null(NullPtrError)","parent":{"krate":0,"index":5897},"children":[],"decl_id":null,"docs":" Attempted to construct a bit-pointer with the null element address.\n","sig":null,"attributes":[{"value":"/ Attempted to construct a bit-pointer with the null element address.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291556,"byte_end":291627,"line_start":1405,"line_end":1405,"column_start":2,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5902},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291747,"byte_end":291757,"line_start":1409,"line_end":1409,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::single::BitPtrError::Misaligned","value":"BitPtrError::Misaligned(MisalignError<T>)","parent":{"krate":0,"index":5897},"children":[],"decl_id":null,"docs":" Attempted to construct a bit-pointer with an address not aligned for the\n element type.\n","sig":null,"attributes":[{"value":"/ Attempted to construct a bit-pointer with an address not aligned for the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291650,"byte_end":291726,"line_start":1407,"line_end":1407,"column_start":2,"column_end":78}},{"value":"/ element type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291728,"byte_end":291745,"line_start":1408,"line_end":1408,"column_start":2,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":5897},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291520,"byte_end":291531,"line_start":1402,"line_end":1402,"column_start":10,"column_end":21},"name":"BitPtrError","qualname":"::ptr::single::BitPtrError","value":"pub enum BitPtrError<T> where T: BitStore {\n    Null(NullPtrError),\n    Misaligned(MisalignError<T>),\n}","parent":null,"children":[{"krate":0,"index":5899},{"krate":0,"index":5902}],"decl_id":null,"docs":" Errors produced by invalid bit-pointer components.\n","sig":null,"attributes":[{"value":"/ Errors produced by invalid bit-pointer components.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291388,"byte_end":291442,"line_start":1400,"line_end":1400,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5936},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313653,"byte_end":313657,"line_start":791,"line_end":791,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::span::BitSpanError::Null","value":"BitSpanError::Null(NullPtrError)","parent":{"krate":0,"index":5934},"children":[],"decl_id":null,"docs":" A null pointer was provided.\n","sig":null,"attributes":[{"value":"/ A null pointer was provided.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313619,"byte_end":313651,"line_start":790,"line_end":790,"column_start":2,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5939},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313720,"byte_end":313730,"line_start":793,"line_end":793,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::span::BitSpanError::Misaligned","value":"BitSpanError::Misaligned(MisalignError<T>)","parent":{"krate":0,"index":5934},"children":[],"decl_id":null,"docs":" The base element pointer is not aligned.\n","sig":null,"attributes":[{"value":"/ The base element pointer is not aligned.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313674,"byte_end":313718,"line_start":792,"line_end":792,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5942},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313815,"byte_end":313822,"line_start":795,"line_end":795,"column_start":2,"column_end":9},"name":"TooLong","qualname":"::ptr::span::BitSpanError::TooLong","value":"BitSpanError::TooLong(usize)","parent":{"krate":0,"index":5934},"children":[],"decl_id":null,"docs":" The requested length exceeds the `BitSpan` length ceiling.\n","sig":null,"attributes":[{"value":"/ The requested length exceeds the `BitSpan` length ceiling.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313751,"byte_end":313813,"line_start":794,"line_end":794,"column_start":2,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5945},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313891,"byte_end":313898,"line_start":797,"line_end":797,"column_start":2,"column_end":9},"name":"TooHigh","qualname":"::ptr::span::BitSpanError::TooHigh","value":"BitSpanError::TooHigh(*const T)","parent":{"krate":0,"index":5934},"children":[],"decl_id":null,"docs":" The requested address is too high, and wraps to zero.\n","sig":null,"attributes":[{"value":"/ The requested address is too high, and wraps to zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313832,"byte_end":313889,"line_start":796,"line_end":796,"column_start":2,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":5934},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313582,"byte_end":313594,"line_start":787,"line_end":787,"column_start":10,"column_end":22},"name":"BitSpanError","qualname":"::ptr::span::BitSpanError","value":"pub enum BitSpanError<T> where T: BitStore {\n    Null(NullPtrError),\n    Misaligned(MisalignError<T>),\n    TooLong(usize),\n    TooHigh(*const T),\n}","parent":null,"children":[{"krate":0,"index":5936},{"krate":0,"index":5939},{"krate":0,"index":5942},{"krate":0,"index":5945}],"decl_id":null,"docs":" An error produced when creating `BitSpan` encoded references.\n","sig":null,"attributes":[{"value":"/ An error produced when creating `BitSpan` encoded references.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313446,"byte_end":313511,"line_start":785,"line_end":785,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2942},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223644,"byte_end":223648,"line_start":50,"line_end":50,"column_start":15,"column_end":19},"name":"copy","qualname":"::ptr::copy","value":"pub unsafe fn copy<T1, T2, O1,\nO2>(BitPtr<Const, T1, O1>, BitPtr<Mut, T2, O2>, usize) where O1: BitOrder,\nO2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"# Bit-wise `memcpy`","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":223576,"byte_end":223585,"line_start":48,"line_end":48,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2947},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224309,"byte_end":224328,"line_start":78,"line_end":78,"column_start":15,"column_end":34},"name":"copy_nonoverlapping","qualname":"::ptr::copy_nonoverlapping","value":"pub unsafe fn copy_nonoverlapping<T1, T2, O1,\nO2>(BitPtr<Const, T1, O1>, BitPtr<Mut, T2, O2>, usize) where O1: BitOrder,\nO2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"# Bit-wise `memcpy`","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224226,"byte_end":224235,"line_start":76,"line_end":76,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2952},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224718,"byte_end":224731,"line_start":96,"line_end":96,"column_start":15,"column_end":28},"name":"drop_in_place","qualname":"::ptr::drop_in_place","value":"pub unsafe fn drop_in_place<T, O>(BitPtr<Mut, T, O>) where T: BitStore,\nO: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Remote Destructor","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224578,"byte_end":224587,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"deprecated = \"this has no effect, and should not be called\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224641,"byte_end":224703,"line_start":95,"line_end":95,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":2955},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224858,"byte_end":224860,"line_start":105,"line_end":105,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"pub fn eq<T1, T2, O>(BitPtr<Const, T1, O>, BitPtr<Const, T2, O>) -> bool where\nT1: BitStore, T2: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Pointer Equality","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":224841,"byte_end":224850,"line_start":104,"line_end":104,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2959},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225102,"byte_end":225106,"line_start":120,"line_end":120,"column_start":8,"column_end":12},"name":"hash","qualname":"::ptr::hash","value":"pub fn hash<T, O, S>(BitPtr<Const, T, O>, &mut S) where T: BitStore,\nO: BitOrder, S: Hasher","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Pointer Hashing","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225010,"byte_end":225019,"line_start":117,"line_end":117,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225020,"byte_end":225050,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2963},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225316,"byte_end":225320,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"null","qualname":"::ptr::null","value":"pub fn null<T, O>() -> BitPtr<Const, T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Pointer Sentinel Value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225224,"byte_end":225233,"line_start":129,"line_end":129,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225234,"byte_end":225264,"line_start":130,"line_end":130,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2966},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225505,"byte_end":225513,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"null_mut","qualname":"::ptr::null_mut","value":"pub fn null_mut<T, O>() -> BitPtr<Mut, T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Pointer Sentinel Value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225409,"byte_end":225418,"line_start":140,"line_end":140,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225419,"byte_end":225449,"line_start":141,"line_end":141,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2969},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225699,"byte_end":225703,"line_start":154,"line_end":154,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"pub unsafe fn read<T, O>(BitPtr<Const, T, O>) -> bool where T: BitStore,\nO: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Read","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225600,"byte_end":225609,"line_start":151,"line_end":151,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225610,"byte_end":225640,"line_start":152,"line_end":152,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2972},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225986,"byte_end":226000,"line_start":167,"line_end":167,"column_start":15,"column_end":29},"name":"read_unaligned","qualname":"::ptr::read_unaligned","value":"pub unsafe fn read_unaligned<T, O>(BitPtr<Const, T, O>) -> bool where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Unaligned Read","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225795,"byte_end":225804,"line_start":162,"line_end":162,"column_start":1,"column_end":10}},{"value":"allow(deprecated)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225805,"byte_end":225825,"line_start":163,"line_end":163,"column_start":1,"column_end":21}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225826,"byte_end":225856,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"deprecated = \"`BitPtr` does not have unaligned addresses\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":225911,"byte_end":225971,"line_start":166,"line_end":166,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":2975},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226210,"byte_end":226223,"line_start":178,"line_end":178,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"pub unsafe fn read_volatile<T, O>(BitPtr<Const, T, O>) -> bool where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Volatile Read","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226102,"byte_end":226111,"line_start":175,"line_end":175,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226112,"byte_end":226142,"line_start":176,"line_end":176,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2978},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226426,"byte_end":226433,"line_start":189,"line_end":189,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"pub unsafe fn replace<T, O>(BitPtr<Mut, T, O>, bool) -> bool where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Replacement","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226324,"byte_end":226333,"line_start":186,"line_end":186,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226334,"byte_end":226364,"line_start":187,"line_end":187,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2981},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226648,"byte_end":226668,"line_start":200,"line_end":200,"column_start":8,"column_end":28},"name":"slice_from_raw_parts","qualname":"::ptr::slice_from_raw_parts","value":"pub fn slice_from_raw_parts<T, O>(BitPtr<Const, T, O>, usize)\n-> *const BitSlice<T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Pointer Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226540,"byte_end":226549,"line_start":197,"line_end":197,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226550,"byte_end":226580,"line_start":198,"line_end":198,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2984},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226929,"byte_end":226953,"line_start":214,"line_end":214,"column_start":8,"column_end":32},"name":"slice_from_raw_parts_mut","qualname":"::ptr::slice_from_raw_parts_mut","value":"pub fn slice_from_raw_parts_mut<T, O>(BitPtr<Mut, T, O>, usize)\n-> *mut BitSlice<T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Pointer Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226817,"byte_end":226826,"line_start":211,"line_end":211,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":226827,"byte_end":226857,"line_start":212,"line_end":212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2987},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227170,"byte_end":227174,"line_start":227,"line_end":227,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"pub unsafe fn swap<T1, T2, O1, O2>(BitPtr<Mut, T1, O1>, BitPtr<Mut, T2, O2>)\nwhere T1: BitStore, T2: BitStore, O1: BitOrder, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit Swap","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227102,"byte_end":227111,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2992},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227439,"byte_end":227458,"line_start":241,"line_end":241,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"pub unsafe fn swap_nonoverlapping<T1, T2, O1,\nO2>(BitPtr<Mut, T1, O1>, BitPtr<Mut, T2, O2>, usize) where O1: BitOrder,\nO2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"# Many-Bit Swap","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227356,"byte_end":227365,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2997},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227884,"byte_end":227889,"line_start":262,"line_end":262,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"pub unsafe fn write<T, O>(BitPtr<Mut, T, O>, bool) where T: BitStore,\nO: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Write","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227784,"byte_end":227793,"line_start":259,"line_end":259,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227794,"byte_end":227824,"line_start":260,"line_end":260,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3000},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228142,"byte_end":228153,"line_start":274,"line_end":274,"column_start":15,"column_end":26},"name":"write_bytes","qualname":"::ptr::write_bytes","value":"pub unsafe fn write_bytes<T, O>(BitPtr<Mut, T, O>, bool, usize) where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-wise `memset`","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":227991,"byte_end":228000,"line_start":270,"line_end":270,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228001,"byte_end":228031,"line_start":271,"line_end":271,"column_start":1,"column_end":31}},{"value":"deprecated = \"use `write_bits()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228032,"byte_end":228076,"line_start":272,"line_end":272,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":3003},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228479,"byte_end":228494,"line_start":290,"line_end":290,"column_start":15,"column_end":30},"name":"write_unaligned","qualname":"::ptr::write_unaligned","value":"pub unsafe fn write_unaligned<T, O>(BitPtr<Mut, T, O>, bool) where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Unaligned Write","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228287,"byte_end":228296,"line_start":285,"line_end":285,"column_start":1,"column_end":10}},{"value":"allow(deprecated)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228297,"byte_end":228317,"line_start":286,"line_end":286,"column_start":1,"column_end":21}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228318,"byte_end":228348,"line_start":287,"line_end":287,"column_start":1,"column_end":31}},{"value":"deprecated = \"`BitPtr` does not have unaligned addresses\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228404,"byte_end":228464,"line_start":289,"line_end":289,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":3006},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228715,"byte_end":228729,"line_start":301,"line_end":301,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"pub unsafe fn write_volatile<T, O>(BitPtr<Mut, T, O>, bool) where T: BitStore,\nO: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Single-Bit Volatile Write","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228606,"byte_end":228615,"line_start":298,"line_end":298,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228616,"byte_end":228646,"line_start":299,"line_end":299,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3009},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228974,"byte_end":228997,"line_start":314,"line_end":314,"column_start":8,"column_end":31},"name":"bitslice_from_raw_parts","qualname":"::ptr::bitslice_from_raw_parts","value":"pub fn bitslice_from_raw_parts<T, O>(BitPtr<Const, T, O>, usize)\n-> *const BitSlice<T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Slice Pointer Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228863,"byte_end":228872,"line_start":311,"line_end":311,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":228873,"byte_end":228903,"line_start":312,"line_end":312,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3012},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":229270,"byte_end":229297,"line_start":328,"line_end":328,"column_start":8,"column_end":35},"name":"bitslice_from_raw_parts_mut","qualname":"::ptr::bitslice_from_raw_parts_mut","value":"pub fn bitslice_from_raw_parts_mut<T, O>(BitPtr<Mut, T, O>, usize)\n-> *mut BitSlice<T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-Slice Pointer Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":229155,"byte_end":229164,"line_start":325,"line_end":325,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":229165,"byte_end":229195,"line_start":326,"line_end":326,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":3015},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":229529,"byte_end":229539,"line_start":341,"line_end":341,"column_start":15,"column_end":25},"name":"write_bits","qualname":"::ptr::write_bits","value":"pub unsafe fn write_bits<T, O>(BitPtr<Mut, T, O>, bool, usize) where\nT: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"# Bit-wise `memset`","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr.rs","byte_start":229455,"byte_end":229464,"line_start":339,"line_end":339,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3018},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","parent":null,"children":[{"krate":0,"index":3019},{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3046},{"krate":0,"index":3047},{"krate":0,"index":3049},{"krate":0,"index":3052},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3057},{"krate":0,"index":3060},{"krate":0,"index":3063},{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3080},{"krate":0,"index":3083},{"krate":0,"index":3086},{"krate":0,"index":3089},{"krate":0,"index":3092},{"krate":0,"index":3095},{"krate":0,"index":3393},{"krate":0,"index":3670},{"krate":0,"index":3771},{"krate":0,"index":3922},{"krate":0,"index":4154},{"krate":0,"index":4155},{"krate":0,"index":4156},{"krate":0,"index":4157},{"krate":0,"index":4163},{"krate":0,"index":4178},{"krate":0,"index":4193},{"krate":0,"index":4207},{"krate":0,"index":4214},{"krate":0,"index":4244},{"krate":0,"index":4249},{"krate":0,"index":4259},{"krate":0,"index":4264},{"krate":0,"index":4269},{"krate":0,"index":4274},{"krate":0,"index":4278}],"decl_id":null,"docs":"# Bit-Addressable Memory Regions","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374678,"byte_end":374681,"line_start":87,"line_end":87,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<T, O>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of bits in the bit-slice.","sig":null,"attributes":[{"value":"/ Gets the number of bits in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374344,"byte_end":374389,"line_start":72,"line_end":72,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374391,"byte_end":374394,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374396,"byte_end":374411,"line_start":74,"line_end":74,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374413,"byte_end":374416,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/std/primitive.slice.html#method.len)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374418,"byte_end":374499,"line_start":76,"line_end":76,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374501,"byte_end":374504,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374506,"byte_end":374521,"line_start":78,"line_end":78,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374523,"byte_end":374526,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374528,"byte_end":374539,"line_start":80,"line_end":80,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374541,"byte_end":374568,"line_start":81,"line_end":81,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374570,"byte_end":374573,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].len(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374575,"byte_end":374608,"line_start":83,"line_end":83,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits![0; 10].len(), 10);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374610,"byte_end":374649,"line_start":84,"line_end":84,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374651,"byte_end":374658,"line_start":85,"line_end":85,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374660,"byte_end":374669,"line_start":86,"line_end":86,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3237},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375078,"byte_end":375086,"line_start":106,"line_end":106,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<T, O>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the bit-slice is empty (length zero).","sig":null,"attributes":[{"value":"/ Tests if the bit-slice is empty (length zero).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374731,"byte_end":374781,"line_start":91,"line_end":91,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374783,"byte_end":374786,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374788,"byte_end":374803,"line_start":93,"line_end":93,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374805,"byte_end":374808,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374810,"byte_end":374901,"line_start":95,"line_end":95,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374903,"byte_end":374906,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374908,"byte_end":374923,"line_start":97,"line_end":97,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374925,"byte_end":374928,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374930,"byte_end":374941,"line_start":99,"line_end":99,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374943,"byte_end":374970,"line_start":100,"line_end":100,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374972,"byte_end":374975,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374977,"byte_end":375009,"line_start":102,"line_end":102,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits![0; 10].is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375011,"byte_end":375049,"line_start":103,"line_end":103,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375051,"byte_end":375058,"line_start":104,"line_end":104,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375060,"byte_end":375069,"line_start":105,"line_end":105,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3238},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375693,"byte_end":375698,"line_start":133,"line_end":133,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<T, O>>::first","value":"pub fn first(&Self) -> Option<BitRef<, Const, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the first bit of the bit-slice, or `None` if it is\n empty.","sig":null,"attributes":[{"value":"/ Gets a reference to the first bit of the bit-slice, or `None` if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375127,"byte_end":375201,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/ empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375203,"byte_end":375213,"line_start":111,"line_end":111,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375215,"byte_end":375218,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375220,"byte_end":375235,"line_start":113,"line_end":113,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375237,"byte_end":375240,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ [`slice::first`](https://doc.rust-lang.org/std/primitive.slice.html#method.first)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375242,"byte_end":375327,"line_start":115,"line_end":115,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375329,"byte_end":375332,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375334,"byte_end":375356,"line_start":117,"line_end":117,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375358,"byte_end":375361,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375363,"byte_end":375430,"line_start":119,"line_end":119,"column_start":2,"column_end":69}},{"value":"/ references to `bool`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375432,"byte_end":375457,"line_start":120,"line_end":120,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375459,"byte_end":375462,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375464,"byte_end":375479,"line_start":122,"line_end":122,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375481,"byte_end":375484,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375486,"byte_end":375497,"line_start":124,"line_end":124,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375499,"byte_end":375526,"line_start":125,"line_end":125,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375528,"byte_end":375531,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375533,"byte_end":375563,"line_start":127,"line_end":127,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits.first().as_deref(), Some(&true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375565,"byte_end":375618,"line_start":128,"line_end":128,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375620,"byte_end":375623,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375625,"byte_end":375664,"line_start":130,"line_end":130,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375666,"byte_end":375673,"line_start":131,"line_end":131,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375675,"byte_end":375684,"line_start":132,"line_end":132,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3239},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376473,"byte_end":376482,"line_start":164,"line_end":164,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<T, O>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitRef<, Mut, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the first bit of the bit-slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the first bit of the bit-slice, or `None` if","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375758,"byte_end":375834,"line_start":137,"line_end":137,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375836,"byte_end":375852,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375854,"byte_end":375857,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375859,"byte_end":375874,"line_start":140,"line_end":140,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375876,"byte_end":375879,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375881,"byte_end":375974,"line_start":142,"line_end":142,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375976,"byte_end":375979,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":375981,"byte_end":376003,"line_start":144,"line_end":144,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376005,"byte_end":376008,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376010,"byte_end":376077,"line_start":146,"line_end":146,"column_start":2,"column_end":69}},{"value":"/ references to `bool`. This must be bound as `mut` in order to write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376079,"byte_end":376150,"line_start":147,"line_end":147,"column_start":2,"column_end":73}},{"value":"/ through it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376152,"byte_end":376167,"line_start":148,"line_end":148,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376169,"byte_end":376172,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376174,"byte_end":376189,"line_start":150,"line_end":150,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376191,"byte_end":376194,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376196,"byte_end":376207,"line_start":152,"line_end":152,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376209,"byte_end":376236,"line_start":153,"line_end":153,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376238,"byte_end":376241,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376243,"byte_end":376274,"line_start":155,"line_end":155,"column_start":2,"column_end":33}},{"value":"/ if let Some(mut first) = bits.first_mut() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376276,"byte_end":376323,"line_start":156,"line_end":156,"column_start":2,"column_end":49}},{"value":"/   *first = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376325,"byte_end":376345,"line_start":157,"line_end":157,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376347,"byte_end":376352,"line_start":158,"line_end":158,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376354,"byte_end":376391,"line_start":159,"line_end":159,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376393,"byte_end":376396,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![mut].first_mut().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376398,"byte_end":376444,"line_start":161,"line_end":161,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376446,"byte_end":376453,"line_start":162,"line_end":162,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376455,"byte_end":376464,"line_start":163,"line_end":163,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377182,"byte_end":377193,"line_start":191,"line_end":191,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<T, O>>::split_first","value":"pub fn split_first(&Self) -> Option<(BitRef<, Const, T, O>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Splits the bit-slice into a reference to its first bit, and the rest of\n the bit-slice. Returns `None` when empty.","sig":null,"attributes":[{"value":"/ Splits the bit-slice into a reference to its first bit, and the rest of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376548,"byte_end":376623,"line_start":168,"line_end":168,"column_start":2,"column_end":77}},{"value":"/ the bit-slice. Returns `None` when empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376625,"byte_end":376670,"line_start":169,"line_end":169,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376672,"byte_end":376675,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376677,"byte_end":376692,"line_start":171,"line_end":171,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376694,"byte_end":376697,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_first)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376699,"byte_end":376796,"line_start":173,"line_end":173,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376798,"byte_end":376801,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376803,"byte_end":376825,"line_start":175,"line_end":175,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376827,"byte_end":376830,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376832,"byte_end":376899,"line_start":177,"line_end":177,"column_start":2,"column_end":69}},{"value":"/ references to `bool`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376901,"byte_end":376926,"line_start":178,"line_end":178,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376928,"byte_end":376931,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376933,"byte_end":376948,"line_start":180,"line_end":180,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376950,"byte_end":376953,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376955,"byte_end":376966,"line_start":182,"line_end":182,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376968,"byte_end":376995,"line_start":183,"line_end":183,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":376997,"byte_end":377000,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377002,"byte_end":377032,"line_start":185,"line_end":185,"column_start":2,"column_end":32}},{"value":"/ let (first, rest) = bits.split_first().unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377034,"byte_end":377086,"line_start":186,"line_end":186,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(first, &true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377088,"byte_end":377117,"line_start":187,"line_end":187,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377119,"byte_end":377153,"line_start":188,"line_end":188,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377155,"byte_end":377162,"line_start":189,"line_end":189,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377164,"byte_end":377173,"line_start":190,"line_end":190,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378162,"byte_end":378177,"line_start":227,"line_end":227,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<T, O>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitRef<, Mut, T::Alias, O>, &mut BitSlice<T::Alias, O>)>","parent":null,"children":[],"decl_id":null,"docs":" Splits the bit-slice into mutable references of its first bit, and the\n rest of the bit-slice. Returns `None` when empty.","sig":null,"attributes":[{"value":"/ Splits the bit-slice into mutable references of its first bit, and the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377401,"byte_end":377475,"line_start":201,"line_end":201,"column_start":2,"column_end":76}},{"value":"/ rest of the bit-slice. Returns `None` when empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377477,"byte_end":377530,"line_start":202,"line_end":202,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377532,"byte_end":377535,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377537,"byte_end":377552,"line_start":204,"line_end":204,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377554,"byte_end":377557,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_first_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377559,"byte_end":377664,"line_start":206,"line_end":206,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377666,"byte_end":377669,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377671,"byte_end":377693,"line_start":208,"line_end":208,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377695,"byte_end":377698,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377700,"byte_end":377767,"line_start":210,"line_end":210,"column_start":2,"column_end":69}},{"value":"/ references to `bool`. This must be bound as `mut` in order to write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377769,"byte_end":377840,"line_start":211,"line_end":211,"column_start":2,"column_end":73}},{"value":"/ through it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377842,"byte_end":377857,"line_start":212,"line_end":212,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377859,"byte_end":377862,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377864,"byte_end":377879,"line_start":214,"line_end":214,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377881,"byte_end":377884,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377886,"byte_end":377897,"line_start":216,"line_end":216,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377899,"byte_end":377926,"line_start":217,"line_end":217,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377928,"byte_end":377931,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377933,"byte_end":377964,"line_start":219,"line_end":219,"column_start":2,"column_end":33}},{"value":"/ if let Some((mut first, rest)) = bits.split_first_mut() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":377966,"byte_end":378027,"line_start":220,"line_end":220,"column_start":2,"column_end":63}},{"value":"/   *first = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378029,"byte_end":378049,"line_start":221,"line_end":221,"column_start":2,"column_end":22}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378051,"byte_end":378087,"line_start":222,"line_end":222,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378089,"byte_end":378094,"line_start":223,"line_end":223,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378096,"byte_end":378133,"line_start":224,"line_end":224,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378135,"byte_end":378142,"line_start":225,"line_end":225,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378144,"byte_end":378153,"line_start":226,"line_end":226,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379057,"byte_end":379067,"line_start":262,"line_end":262,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<T, O>>::split_last","value":"pub fn split_last(&Self) -> Option<(BitRef<, Const, T, O>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Splits the bit-slice into a reference to its last bit, and the rest of\n the bit-slice. Returns `None` when empty.","sig":null,"attributes":[{"value":"/ Splits the bit-slice into a reference to its last bit, and the rest of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378429,"byte_end":378503,"line_start":239,"line_end":239,"column_start":2,"column_end":76}},{"value":"/ the bit-slice. Returns `None` when empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378505,"byte_end":378550,"line_start":240,"line_end":240,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378552,"byte_end":378555,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378557,"byte_end":378572,"line_start":242,"line_end":242,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378574,"byte_end":378577,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378579,"byte_end":378674,"line_start":244,"line_end":244,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378676,"byte_end":378679,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378681,"byte_end":378703,"line_start":246,"line_end":246,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378705,"byte_end":378708,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378710,"byte_end":378777,"line_start":248,"line_end":248,"column_start":2,"column_end":69}},{"value":"/ references to `bool`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378779,"byte_end":378804,"line_start":249,"line_end":249,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378806,"byte_end":378809,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378811,"byte_end":378826,"line_start":251,"line_end":251,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378828,"byte_end":378831,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378833,"byte_end":378844,"line_start":253,"line_end":253,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378846,"byte_end":378873,"line_start":254,"line_end":254,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378875,"byte_end":378878,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378880,"byte_end":378910,"line_start":256,"line_end":256,"column_start":2,"column_end":32}},{"value":"/ let (last, rest) = bits.split_last().unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378912,"byte_end":378962,"line_start":257,"line_end":257,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(last, &true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378964,"byte_end":378992,"line_start":258,"line_end":258,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":378994,"byte_end":379028,"line_start":259,"line_end":259,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379030,"byte_end":379037,"line_start":260,"line_end":260,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379039,"byte_end":379048,"line_start":261,"line_end":261,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380034,"byte_end":380048,"line_start":298,"line_end":298,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<T, O>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitRef<, Mut, T::Alias, O>, &mut BitSlice<T::Alias, O>)>","parent":null,"children":[],"decl_id":null,"docs":" Splits the bit-slice into mutable references to its last bit, and the\n rest of the bit-slice. Returns `None` when empty.","sig":null,"attributes":[{"value":"/ Splits the bit-slice into mutable references to its last bit, and the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379279,"byte_end":379352,"line_start":272,"line_end":272,"column_start":2,"column_end":75}},{"value":"/ rest of the bit-slice. Returns `None` when empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379354,"byte_end":379407,"line_start":273,"line_end":273,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379409,"byte_end":379412,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379414,"byte_end":379429,"line_start":275,"line_end":275,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379431,"byte_end":379434,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379436,"byte_end":379539,"line_start":277,"line_end":277,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379541,"byte_end":379544,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379546,"byte_end":379568,"line_start":279,"line_end":279,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379570,"byte_end":379573,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379575,"byte_end":379642,"line_start":281,"line_end":281,"column_start":2,"column_end":69}},{"value":"/ references to `bool`. This must be bound as `mut` in order to write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379644,"byte_end":379715,"line_start":282,"line_end":282,"column_start":2,"column_end":73}},{"value":"/ through it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379717,"byte_end":379732,"line_start":283,"line_end":283,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379734,"byte_end":379737,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379739,"byte_end":379754,"line_start":285,"line_end":285,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379756,"byte_end":379759,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379761,"byte_end":379772,"line_start":287,"line_end":287,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379774,"byte_end":379801,"line_start":288,"line_end":288,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379803,"byte_end":379806,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379808,"byte_end":379839,"line_start":290,"line_end":290,"column_start":2,"column_end":33}},{"value":"/ if let Some((mut last, rest)) = bits.split_last_mut() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379841,"byte_end":379900,"line_start":291,"line_end":291,"column_start":2,"column_end":61}},{"value":"/   *last = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379902,"byte_end":379921,"line_start":292,"line_end":292,"column_start":2,"column_end":21}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379923,"byte_end":379959,"line_start":293,"line_end":293,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379961,"byte_end":379966,"line_start":294,"line_end":294,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":379968,"byte_end":380005,"line_start":295,"line_end":295,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380007,"byte_end":380014,"line_start":296,"line_end":296,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380016,"byte_end":380025,"line_start":297,"line_end":297,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380865,"byte_end":380869,"line_start":333,"line_end":333,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<T, O>>::last","value":"pub fn last(&Self) -> Option<BitRef<, Const, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the last bit of the bit-slice, or `None` if it is\n empty.","sig":null,"attributes":[{"value":"/ Gets a reference to the last bit of the bit-slice, or `None` if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380304,"byte_end":380377,"line_start":310,"line_end":310,"column_start":2,"column_end":75}},{"value":"/ empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380379,"byte_end":380389,"line_start":311,"line_end":311,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380391,"byte_end":380394,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380396,"byte_end":380411,"line_start":313,"line_end":313,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380413,"byte_end":380416,"line_start":314,"line_end":314,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/std/primitive.slice.html#method.last)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380418,"byte_end":380501,"line_start":315,"line_end":315,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380503,"byte_end":380506,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380508,"byte_end":380530,"line_start":317,"line_end":317,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380532,"byte_end":380535,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380537,"byte_end":380604,"line_start":319,"line_end":319,"column_start":2,"column_end":69}},{"value":"/ references to `bool`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380606,"byte_end":380631,"line_start":320,"line_end":320,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380633,"byte_end":380636,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380638,"byte_end":380653,"line_start":322,"line_end":322,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380655,"byte_end":380658,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380660,"byte_end":380671,"line_start":324,"line_end":324,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380673,"byte_end":380700,"line_start":325,"line_end":325,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380702,"byte_end":380705,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380707,"byte_end":380737,"line_start":327,"line_end":327,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits.last().as_deref(), Some(&true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380739,"byte_end":380791,"line_start":328,"line_end":328,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380793,"byte_end":380796,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380798,"byte_end":380836,"line_start":330,"line_end":330,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380838,"byte_end":380845,"line_start":331,"line_end":331,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":380847,"byte_end":380856,"line_start":332,"line_end":332,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381714,"byte_end":381722,"line_start":367,"line_end":367,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<T, O>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitRef<, Mut, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the last bit of the bit-slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the last bit of the bit-slice, or `None` if","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381006,"byte_end":381081,"line_start":340,"line_end":340,"column_start":2,"column_end":77}},{"value":"/ it is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381083,"byte_end":381099,"line_start":341,"line_end":341,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381101,"byte_end":381104,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381106,"byte_end":381121,"line_start":343,"line_end":343,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381123,"byte_end":381126,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381128,"byte_end":381219,"line_start":345,"line_end":345,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381221,"byte_end":381224,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381226,"byte_end":381248,"line_start":347,"line_end":347,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381250,"byte_end":381253,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ `bitvec` uses a custom structure for both read-only and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381255,"byte_end":381322,"line_start":349,"line_end":349,"column_start":2,"column_end":69}},{"value":"/ references to `bool`. This must be bound as `mut` in order to write","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381324,"byte_end":381395,"line_start":350,"line_end":350,"column_start":2,"column_end":73}},{"value":"/ through it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381397,"byte_end":381412,"line_start":351,"line_end":351,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381414,"byte_end":381417,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381419,"byte_end":381434,"line_start":353,"line_end":353,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381436,"byte_end":381439,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381441,"byte_end":381452,"line_start":355,"line_end":355,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381454,"byte_end":381481,"line_start":356,"line_end":356,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381483,"byte_end":381486,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381488,"byte_end":381519,"line_start":358,"line_end":358,"column_start":2,"column_end":33}},{"value":"/ if let Some(mut last) = bits.last_mut() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381521,"byte_end":381566,"line_start":359,"line_end":359,"column_start":2,"column_end":47}},{"value":"/   *last = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381568,"byte_end":381587,"line_start":360,"line_end":360,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381589,"byte_end":381594,"line_start":361,"line_end":361,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381596,"byte_end":381633,"line_start":362,"line_end":362,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381635,"byte_end":381638,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![mut].last_mut().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381640,"byte_end":381685,"line_start":364,"line_end":364,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381687,"byte_end":381694,"line_start":365,"line_end":365,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381696,"byte_end":381705,"line_start":366,"line_end":366,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3246},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382811,"byte_end":382814,"line_start":404,"line_end":404,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<T, O>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to a single bit or a subsection of the bit-slice,\n depending on the type of `index`.","sig":null,"attributes":[{"value":"/ Gets a reference to a single bit or a subsection of the bit-slice,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381865,"byte_end":381935,"line_start":374,"line_end":374,"column_start":2,"column_end":72}},{"value":"/ depending on the type of `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381937,"byte_end":381974,"line_start":375,"line_end":375,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381976,"byte_end":381979,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ - If given a `usize`, this produces a reference structure to the `bool`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":381981,"byte_end":382056,"line_start":377,"line_end":377,"column_start":2,"column_end":77}},{"value":"/   at the position.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382058,"byte_end":382080,"line_start":378,"line_end":378,"column_start":2,"column_end":24}},{"value":"/ - If given any form of range, this produces a smaller bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382082,"byte_end":382150,"line_start":379,"line_end":379,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382152,"byte_end":382155,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This returns `None` if the `index` departs the bounds of `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382157,"byte_end":382225,"line_start":381,"line_end":381,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382227,"byte_end":382230,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382232,"byte_end":382247,"line_start":383,"line_end":383,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382249,"byte_end":382252,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/std/primitive.slice.html#method.get)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382254,"byte_end":382335,"line_start":385,"line_end":385,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382337,"byte_end":382340,"line_start":386,"line_end":386,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382342,"byte_end":382364,"line_start":387,"line_end":387,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382366,"byte_end":382369,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ `BitSliceIndex` uses discrete types for immutable and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382371,"byte_end":382436,"line_start":389,"line_end":389,"column_start":2,"column_end":67}},{"value":"/ references, rather than a single referent type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382438,"byte_end":382489,"line_start":390,"line_end":390,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382491,"byte_end":382494,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382496,"byte_end":382511,"line_start":392,"line_end":392,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382513,"byte_end":382516,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382518,"byte_end":382529,"line_start":394,"line_end":394,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382531,"byte_end":382558,"line_start":395,"line_end":395,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382560,"byte_end":382563,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382565,"byte_end":382595,"line_start":397,"line_end":397,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits.get(1).as_deref(), Some(&true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382597,"byte_end":382649,"line_start":398,"line_end":398,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(bits.get(0 .. 2), Some(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382651,"byte_end":382703,"line_start":399,"line_end":399,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.get(3).is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382705,"byte_end":382740,"line_start":400,"line_end":400,"column_start":2,"column_end":37}},{"value":"/ assert!(bits.get(0 .. 4).is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382742,"byte_end":382782,"line_start":401,"line_end":401,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382784,"byte_end":382791,"line_start":402,"line_end":402,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382793,"byte_end":382802,"line_start":403,"line_end":403,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383822,"byte_end":383829,"line_start":439,"line_end":439,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<T, O>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to a single bit or a subsection of the\n bit-slice, depending on the type of `index`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to a single bit or a subsection of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382921,"byte_end":382988,"line_start":409,"line_end":409,"column_start":2,"column_end":69}},{"value":"/ bit-slice, depending on the type of `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":382990,"byte_end":383038,"line_start":410,"line_end":410,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383040,"byte_end":383043,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ - If given a `usize`, this produces a reference structure to the `bool`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383045,"byte_end":383120,"line_start":412,"line_end":412,"column_start":2,"column_end":77}},{"value":"/   at the position.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383122,"byte_end":383144,"line_start":413,"line_end":413,"column_start":2,"column_end":24}},{"value":"/ - If given any form of range, this produces a smaller bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383146,"byte_end":383214,"line_start":414,"line_end":414,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383216,"byte_end":383219,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ This returns `None` if the `index` departs the bounds of `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383221,"byte_end":383289,"line_start":416,"line_end":416,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383291,"byte_end":383294,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383296,"byte_end":383311,"line_start":418,"line_end":418,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383313,"byte_end":383316,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383318,"byte_end":383407,"line_start":420,"line_end":420,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383409,"byte_end":383412,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383414,"byte_end":383436,"line_start":422,"line_end":422,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383438,"byte_end":383441,"line_start":423,"line_end":423,"column_start":2,"column_end":5}},{"value":"/ `BitSliceIndex` uses discrete types for immutable and mutable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383443,"byte_end":383508,"line_start":424,"line_end":424,"column_start":2,"column_end":67}},{"value":"/ references, rather than a single referent type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383510,"byte_end":383561,"line_start":425,"line_end":425,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383563,"byte_end":383566,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383568,"byte_end":383583,"line_start":427,"line_end":427,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383585,"byte_end":383588,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383590,"byte_end":383601,"line_start":429,"line_end":429,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383603,"byte_end":383630,"line_start":430,"line_end":430,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383632,"byte_end":383635,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383637,"byte_end":383668,"line_start":432,"line_end":432,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383670,"byte_end":383673,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ *bits.get_mut(0).unwrap() = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383675,"byte_end":383712,"line_start":434,"line_end":434,"column_start":2,"column_end":39}},{"value":"/ bits.get_mut(1 ..).unwrap().fill(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383714,"byte_end":383757,"line_start":435,"line_end":435,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits, bits![1; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383759,"byte_end":383793,"line_start":436,"line_end":436,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383795,"byte_end":383802,"line_start":437,"line_end":437,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383804,"byte_end":383813,"line_start":438,"line_end":438,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3252},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385023,"byte_end":385036,"line_start":480,"line_end":480,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<T, O>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to a single bit or to a subsection of the bit-slice,\n without bounds checking.","sig":null,"attributes":[{"value":"/ Gets a reference to a single bit or to a subsection of the bit-slice,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":383942,"byte_end":384015,"line_start":444,"line_end":444,"column_start":2,"column_end":75}},{"value":"/ without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384017,"byte_end":384045,"line_start":445,"line_end":445,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384047,"byte_end":384050,"line_start":446,"line_end":446,"column_start":2,"column_end":5}},{"value":"/ This has the same arguments and behavior as [`.get()`], except that it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384052,"byte_end":384126,"line_start":447,"line_end":447,"column_start":2,"column_end":76}},{"value":"/ does not check that `index` is in bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384128,"byte_end":384173,"line_start":448,"line_end":448,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384175,"byte_end":384178,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384180,"byte_end":384195,"line_start":450,"line_end":450,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384197,"byte_end":384200,"line_start":451,"line_end":451,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384202,"byte_end":384303,"line_start":452,"line_end":452,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384305,"byte_end":384308,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384310,"byte_end":384323,"line_start":454,"line_end":454,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384325,"byte_end":384328,"line_start":455,"line_end":455,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `index` is within bounds (within the range `0 ..","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384330,"byte_end":384403,"line_start":456,"line_end":456,"column_start":2,"column_end":75}},{"value":"/ self.len()`), or this method will introduce memory safety and/or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384405,"byte_end":384473,"line_start":457,"line_end":457,"column_start":2,"column_end":70}},{"value":"/ undefined behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384475,"byte_end":384498,"line_start":458,"line_end":458,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384500,"byte_end":384503,"line_start":459,"line_end":459,"column_start":2,"column_end":5}},{"value":"/ It is library-level undefined behavior to index beyond the length of any","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384505,"byte_end":384581,"line_start":460,"line_end":460,"column_start":2,"column_end":78}},{"value":"/ bit-slice, even if you **know** that the offset remains within an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384583,"byte_end":384652,"line_start":461,"line_end":461,"column_start":2,"column_end":71}},{"value":"/ allocation as measured by Rust or LLVM.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384654,"byte_end":384697,"line_start":462,"line_end":462,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384699,"byte_end":384702,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384704,"byte_end":384719,"line_start":464,"line_end":464,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384721,"byte_end":384724,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384726,"byte_end":384737,"line_start":466,"line_end":466,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384739,"byte_end":384766,"line_start":467,"line_end":467,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384768,"byte_end":384771,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0001_0010u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384773,"byte_end":384802,"line_start":469,"line_end":469,"column_start":2,"column_end":31}},{"value":"/ let bits = &data.view_bits::<Lsb0>()[.. 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384804,"byte_end":384851,"line_start":470,"line_end":470,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384853,"byte_end":384856,"line_start":471,"line_end":471,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384858,"byte_end":384870,"line_start":472,"line_end":472,"column_start":2,"column_end":14}},{"value":"/   assert!(bits.get_unchecked(1));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384872,"byte_end":384909,"line_start":473,"line_end":473,"column_start":2,"column_end":39}},{"value":"/   assert!(bits.get_unchecked(4));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384911,"byte_end":384948,"line_start":474,"line_end":474,"column_start":2,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384950,"byte_end":384955,"line_start":475,"line_end":475,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384957,"byte_end":384964,"line_start":476,"line_end":476,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384966,"byte_end":384969,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384971,"byte_end":384996,"line_start":478,"line_end":478,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":384998,"byte_end":385007,"line_start":479,"line_end":479,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3255},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386317,"byte_end":386334,"line_start":522,"line_end":522,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<T, O>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to a single bit or a subsection of the\n bit-slice, depending on the type of `index`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to a single bit or a subsection of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385145,"byte_end":385212,"line_start":485,"line_end":485,"column_start":2,"column_end":69}},{"value":"/ bit-slice, depending on the type of `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385214,"byte_end":385262,"line_start":486,"line_end":486,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385264,"byte_end":385267,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ This has the same arguments and behavior as [`.get_mut()`], except that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385269,"byte_end":385344,"line_start":488,"line_end":488,"column_start":2,"column_end":77}},{"value":"/ it does not check that `index` is in bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385346,"byte_end":385394,"line_start":489,"line_end":489,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385396,"byte_end":385399,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385401,"byte_end":385416,"line_start":491,"line_end":491,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385418,"byte_end":385421,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385423,"byte_end":385532,"line_start":493,"line_end":493,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385534,"byte_end":385537,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385539,"byte_end":385552,"line_start":495,"line_end":495,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385554,"byte_end":385557,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `index` is within bounds (within the range `0 ..","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385559,"byte_end":385632,"line_start":497,"line_end":497,"column_start":2,"column_end":75}},{"value":"/ self.len()`), or this method will introduce memory safety and/or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385634,"byte_end":385702,"line_start":498,"line_end":498,"column_start":2,"column_end":70}},{"value":"/ undefined behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385704,"byte_end":385727,"line_start":499,"line_end":499,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385729,"byte_end":385732,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ It is library-level undefined behavior to index beyond the length of any","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385734,"byte_end":385810,"line_start":501,"line_end":501,"column_start":2,"column_end":78}},{"value":"/ bit-slice, even if you **know** that the offset remains within an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385812,"byte_end":385881,"line_start":502,"line_end":502,"column_start":2,"column_end":71}},{"value":"/ allocation as measured by Rust or LLVM.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385883,"byte_end":385926,"line_start":503,"line_end":503,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385928,"byte_end":385931,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385933,"byte_end":385948,"line_start":505,"line_end":505,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385950,"byte_end":385953,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385955,"byte_end":385966,"line_start":507,"line_end":507,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385968,"byte_end":385995,"line_start":508,"line_end":508,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":385997,"byte_end":386000,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386002,"byte_end":386025,"line_start":510,"line_end":510,"column_start":2,"column_end":25}},{"value":"/ let bits = &mut data.view_bits_mut::<Lsb0>()[.. 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386027,"byte_end":386082,"line_start":511,"line_end":511,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386084,"byte_end":386087,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386089,"byte_end":386101,"line_start":513,"line_end":513,"column_start":2,"column_end":14}},{"value":"/   bits.get_unchecked_mut(1).commit(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386103,"byte_end":386148,"line_start":514,"line_end":514,"column_start":2,"column_end":47}},{"value":"/   bits.get_unchecked_mut(4 .. 6).fill(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386150,"byte_end":386198,"line_start":515,"line_end":515,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386200,"byte_end":386205,"line_start":516,"line_end":516,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b0011_0010);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386207,"byte_end":386241,"line_start":517,"line_end":517,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386243,"byte_end":386250,"line_start":518,"line_end":518,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386252,"byte_end":386255,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ [`.get_mut()`]: Self::get_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386257,"byte_end":386290,"line_start":520,"line_end":520,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386292,"byte_end":386301,"line_start":521,"line_end":521,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3258},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386608,"byte_end":386614,"line_start":531,"line_end":531,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<T, O>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386449,"byte_end":386458,"line_start":527,"line_end":527,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386460,"byte_end":386490,"line_start":528,"line_end":528,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitptr()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386492,"byte_end":386536,"line_start":529,"line_end":529,"column_start":2,"column_end":46}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386538,"byte_end":386599,"line_start":530,"line_end":530,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386834,"byte_end":386844,"line_start":539,"line_end":539,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<T, O>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386671,"byte_end":386680,"line_start":535,"line_end":535,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386682,"byte_end":386712,"line_start":536,"line_end":536,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_mut_bitptr()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386714,"byte_end":386762,"line_start":537,"line_end":537,"column_start":2,"column_end":50}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386764,"byte_end":386825,"line_start":538,"line_end":538,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387449,"byte_end":387461,"line_start":557,"line_end":557,"column_start":9,"column_end":21},"name":"as_ptr_range","qualname":"<BitSlice<T, O>>::as_ptr_range","value":"pub fn as_ptr_range(&Self) -> Range<BitPtr<Const, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Produces a range of bit-pointers to each bit in the bit-slice.","sig":null,"attributes":[{"value":"/ Produces a range of bit-pointers to each bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386907,"byte_end":386973,"line_start":543,"line_end":543,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386975,"byte_end":386978,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ This is a standard-library range, which has no real functionality for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":386980,"byte_end":387053,"line_start":545,"line_end":545,"column_start":2,"column_end":75}},{"value":"/ pointer types. You should prefer [`.as_bitptr_range()`] instead, as it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387055,"byte_end":387129,"line_start":546,"line_end":546,"column_start":2,"column_end":76}},{"value":"/ produces a custom structure that provides expected ranging","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387131,"byte_end":387193,"line_start":547,"line_end":547,"column_start":2,"column_end":64}},{"value":"/ functionality.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387195,"byte_end":387213,"line_start":548,"line_end":548,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387215,"byte_end":387218,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387220,"byte_end":387235,"line_start":550,"line_end":550,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387237,"byte_end":387240,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387242,"byte_end":387341,"line_start":552,"line_end":552,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387343,"byte_end":387346,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitptr_range()`]: Self::as_bitptr_range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387348,"byte_end":387397,"line_start":554,"line_end":554,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387399,"byte_end":387408,"line_start":555,"line_end":555,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387410,"byte_end":387440,"line_start":556,"line_end":556,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388114,"byte_end":388130,"line_start":575,"line_end":575,"column_start":9,"column_end":25},"name":"as_mut_ptr_range","qualname":"<BitSlice<T, O>>::as_mut_ptr_range","value":"pub fn as_mut_ptr_range(&mut Self) -> Range<BitPtr<Mut, T, O>>","parent":null,"children":[],"decl_id":null,"docs":" Produces a range of mutable bit-pointers to each bit in the bit-slice.","sig":null,"attributes":[{"value":"/ Produces a range of mutable bit-pointers to each bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387544,"byte_end":387618,"line_start":561,"line_end":561,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387620,"byte_end":387623,"line_start":562,"line_end":562,"column_start":2,"column_end":5}},{"value":"/ This is a standard-library range, which has no real functionality for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387625,"byte_end":387698,"line_start":563,"line_end":563,"column_start":2,"column_end":75}},{"value":"/ pointer types. You should prefer [`.as_mut_bitptr_range()`] instead, as","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387700,"byte_end":387775,"line_start":564,"line_end":564,"column_start":2,"column_end":77}},{"value":"/ it produces a custom structure that provides expected ranging","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387777,"byte_end":387842,"line_start":565,"line_end":565,"column_start":2,"column_end":67}},{"value":"/ functionality.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387844,"byte_end":387862,"line_start":566,"line_end":566,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387864,"byte_end":387867,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387869,"byte_end":387884,"line_start":568,"line_end":568,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387886,"byte_end":387889,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":387891,"byte_end":387998,"line_start":570,"line_end":570,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388000,"byte_end":388003,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitptr_range()`]: Self::as_mut_bitptr_range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388005,"byte_end":388062,"line_start":572,"line_end":572,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388064,"byte_end":388073,"line_start":573,"line_end":573,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388075,"byte_end":388105,"line_start":574,"line_end":574,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388651,"byte_end":388655,"line_start":599,"line_end":599,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<T, O>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Exchanges the bit values at two indices.","sig":null,"attributes":[{"value":"/ Exchanges the bit values at two indices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388219,"byte_end":388263,"line_start":579,"line_end":579,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388265,"byte_end":388268,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388270,"byte_end":388285,"line_start":581,"line_end":581,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388287,"byte_end":388290,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388292,"byte_end":388375,"line_start":583,"line_end":583,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388377,"byte_end":388380,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388382,"byte_end":388395,"line_start":585,"line_end":585,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388397,"byte_end":388400,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ This panics if either `a` or `b` are out of bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388402,"byte_end":388457,"line_start":587,"line_end":587,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388459,"byte_end":388462,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388464,"byte_end":388479,"line_start":589,"line_end":589,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388481,"byte_end":388484,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388486,"byte_end":388497,"line_start":591,"line_end":591,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388499,"byte_end":388526,"line_start":592,"line_end":592,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388528,"byte_end":388531,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388533,"byte_end":388564,"line_start":594,"line_end":594,"column_start":2,"column_end":33}},{"value":"/ bits.swap(0, 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388566,"byte_end":388586,"line_start":595,"line_end":595,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(bits, bits![1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388588,"byte_end":388622,"line_start":596,"line_end":596,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388624,"byte_end":388631,"line_start":597,"line_end":597,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388633,"byte_end":388642,"line_start":598,"line_end":598,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389250,"byte_end":389257,"line_start":624,"line_end":624,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<T, O>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in a bit-slice.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388851,"byte_end":388897,"line_start":608,"line_end":608,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388899,"byte_end":388902,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388904,"byte_end":388919,"line_start":610,"line_end":610,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388921,"byte_end":388924,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/std/primitive.slice.html#method.reverse)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":388926,"byte_end":389015,"line_start":612,"line_end":612,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389017,"byte_end":389020,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389022,"byte_end":389037,"line_start":614,"line_end":614,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389039,"byte_end":389042,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389044,"byte_end":389055,"line_start":616,"line_end":616,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389057,"byte_end":389084,"line_start":617,"line_end":617,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389086,"byte_end":389089,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 1, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389091,"byte_end":389143,"line_start":619,"line_end":619,"column_start":2,"column_end":54}},{"value":"/ bits.reverse();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389145,"byte_end":389164,"line_start":620,"line_end":620,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bits, bits![1, 0, 0, 1, 1, 0, 1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389166,"byte_end":389221,"line_start":621,"line_end":621,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389223,"byte_end":389230,"line_start":622,"line_end":622,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389232,"byte_end":389241,"line_start":623,"line_end":623,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3264},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390419,"byte_end":390423,"line_start":666,"line_end":666,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<T, O>>::iter","value":"pub fn iter(&Self) -> Iter<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator over each bit in the bit-slice.","sig":null,"attributes":[{"value":"/ Produces an iterator over each bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389437,"byte_end":389493,"line_start":633,"line_end":633,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389495,"byte_end":389498,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389500,"byte_end":389515,"line_start":635,"line_end":635,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389517,"byte_end":389520,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/std/primitive.slice.html#method.iter)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389522,"byte_end":389605,"line_start":637,"line_end":637,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389607,"byte_end":389610,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389612,"byte_end":389634,"line_start":639,"line_end":639,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389636,"byte_end":389639,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ This iterator yields proxy-reference structures, not `&bool`. It can be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389641,"byte_end":389716,"line_start":641,"line_end":641,"column_start":2,"column_end":77}},{"value":"/ adapted to yield `&bool` with the [`.by_refs()`] method, or `bool` with","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389718,"byte_end":389793,"line_start":642,"line_end":642,"column_start":2,"column_end":77}},{"value":"/ [`.by_vals()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389795,"byte_end":389814,"line_start":643,"line_end":643,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389816,"byte_end":389819,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ This iterator, and its adapters, are fast. Do not try to be more clever","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389821,"byte_end":389896,"line_start":645,"line_end":645,"column_start":2,"column_end":77}},{"value":"/ than them by abusing `.as_bitptr_range()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389898,"byte_end":389944,"line_start":646,"line_end":646,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389946,"byte_end":389949,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389951,"byte_end":389966,"line_start":648,"line_end":648,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389968,"byte_end":389971,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389973,"byte_end":389984,"line_start":650,"line_end":650,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":389986,"byte_end":390013,"line_start":651,"line_end":651,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390015,"byte_end":390018,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390020,"byte_end":390053,"line_start":653,"line_end":653,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390055,"byte_end":390086,"line_start":654,"line_end":654,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390088,"byte_end":390091,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ assert!(!iter.next().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390093,"byte_end":390128,"line_start":656,"line_end":656,"column_start":2,"column_end":37}},{"value":"/ assert!( iter.next().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390130,"byte_end":390165,"line_start":657,"line_end":657,"column_start":2,"column_end":37}},{"value":"/ assert!( iter.next_back().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390167,"byte_end":390207,"line_start":658,"line_end":658,"column_start":2,"column_end":42}},{"value":"/ assert!(!iter.next_back().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390209,"byte_end":390249,"line_start":659,"line_end":659,"column_start":2,"column_end":42}},{"value":"/ assert!( iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390251,"byte_end":390287,"line_start":660,"line_end":660,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390289,"byte_end":390296,"line_start":661,"line_end":661,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390298,"byte_end":390301,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ [`.by_refs()`]: crate::slice::Iter::by_refs","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390303,"byte_end":390350,"line_start":663,"line_end":663,"column_start":2,"column_end":49}},{"value":"/ [`.by_vals()`]: crate::slice::Iter::by_vals","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390352,"byte_end":390399,"line_start":664,"line_end":664,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390401,"byte_end":390410,"line_start":665,"line_end":665,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3265},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391634,"byte_end":391642,"line_start":706,"line_end":706,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<T, O>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Produces a mutable iterator over each bit in the bit-slice.","sig":null,"attributes":[{"value":"/ Produces a mutable iterator over each bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390470,"byte_end":390533,"line_start":670,"line_end":670,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390535,"byte_end":390538,"line_start":671,"line_end":671,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390540,"byte_end":390555,"line_start":672,"line_end":672,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390557,"byte_end":390560,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.iter_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390562,"byte_end":390653,"line_start":674,"line_end":674,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390655,"byte_end":390658,"line_start":675,"line_end":675,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390660,"byte_end":390682,"line_start":676,"line_end":676,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390684,"byte_end":390687,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ This iterator yields proxy-reference structures, not `&mut bool`. In","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390689,"byte_end":390761,"line_start":678,"line_end":678,"column_start":2,"column_end":74}},{"value":"/ addition, it marks each proxy as alias-tainted.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390763,"byte_end":390814,"line_start":679,"line_end":679,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390816,"byte_end":390819,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ If you are using this in an ordinary loop and **not** keeping multiple","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390821,"byte_end":390895,"line_start":681,"line_end":681,"column_start":2,"column_end":76}},{"value":"/ yielded proxy-references alive at the same scope, you may use the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390897,"byte_end":390966,"line_start":682,"line_end":682,"column_start":2,"column_end":71}},{"value":"/ [`.remove_alias()`] adapter to undo the alias marking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":390968,"byte_end":391026,"line_start":683,"line_end":683,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391028,"byte_end":391031,"line_start":684,"line_end":684,"column_start":2,"column_end":5}},{"value":"/ This iterator is fast. Do not try to be more clever than it by abusing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391033,"byte_end":391107,"line_start":685,"line_end":685,"column_start":2,"column_end":76}},{"value":"/ `.as_mut_bitptr_range()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391109,"byte_end":391138,"line_start":686,"line_end":686,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391140,"byte_end":391143,"line_start":687,"line_end":687,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391145,"byte_end":391160,"line_start":688,"line_end":688,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391162,"byte_end":391165,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391167,"byte_end":391178,"line_start":690,"line_end":690,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391180,"byte_end":391207,"line_start":691,"line_end":691,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391209,"byte_end":391212,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 4];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391214,"byte_end":391245,"line_start":693,"line_end":693,"column_start":2,"column_end":33}},{"value":"/ let mut iter = bits.iter_mut();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391247,"byte_end":391282,"line_start":694,"line_end":694,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391284,"byte_end":391287,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ iter.nth(1).unwrap().commit(true); // index 1","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391289,"byte_end":391338,"line_start":696,"line_end":696,"column_start":2,"column_end":51}},{"value":"/ iter.next_back().unwrap().commit(true); // index 3","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391340,"byte_end":391394,"line_start":697,"line_end":697,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391396,"byte_end":391399,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ assert!(iter.next().is_some()); // index 2","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391401,"byte_end":391447,"line_start":699,"line_end":699,"column_start":2,"column_end":48}},{"value":"/ assert!(iter.next().is_none()); // complete","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391449,"byte_end":391496,"line_start":700,"line_end":700,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bits, bits![0, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391498,"byte_end":391538,"line_start":701,"line_end":701,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391540,"byte_end":391547,"line_start":702,"line_end":702,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391549,"byte_end":391552,"line_start":703,"line_end":703,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::IterMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391554,"byte_end":391614,"line_start":704,"line_end":704,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391616,"byte_end":391625,"line_start":705,"line_end":705,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392547,"byte_end":392554,"line_start":738,"line_end":738,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<T, O>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over consecutive windowing subslices in a bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over consecutive windowing subslices in a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391699,"byte_end":391764,"line_start":710,"line_end":710,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391766,"byte_end":391769,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ Windows are overlapping views of the bit-slice. Each window advances one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391771,"byte_end":391847,"line_start":712,"line_end":712,"column_start":2,"column_end":78}},{"value":"/ bit from the previous, so in a bit-slice `[A, B, C, D, E]`, calling","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391849,"byte_end":391920,"line_start":713,"line_end":713,"column_start":2,"column_end":73}},{"value":"/ `.windows(3)` will yield `[A, B, C]`, `[B, C, D]`, and `[C, D, E]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391922,"byte_end":391993,"line_start":714,"line_end":714,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":391995,"byte_end":391998,"line_start":715,"line_end":715,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392000,"byte_end":392015,"line_start":716,"line_end":716,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392017,"byte_end":392020,"line_start":717,"line_end":717,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/std/primitive.slice.html#method.windows)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392022,"byte_end":392111,"line_start":718,"line_end":718,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392113,"byte_end":392116,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392118,"byte_end":392131,"line_start":720,"line_end":720,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392133,"byte_end":392136,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ This panics if `size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392138,"byte_end":392171,"line_start":722,"line_end":722,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392173,"byte_end":392176,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392178,"byte_end":392193,"line_start":724,"line_end":724,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392195,"byte_end":392198,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392200,"byte_end":392211,"line_start":726,"line_end":726,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392213,"byte_end":392240,"line_start":727,"line_end":727,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392242,"byte_end":392245,"line_start":728,"line_end":728,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392247,"byte_end":392283,"line_start":729,"line_end":729,"column_start":2,"column_end":38}},{"value":"/ let mut iter = bits.windows(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392285,"byte_end":392320,"line_start":730,"line_end":730,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392322,"byte_end":392325,"line_start":731,"line_end":731,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392327,"byte_end":392377,"line_start":732,"line_end":732,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next(), Some(bits![1, 0, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392379,"byte_end":392429,"line_start":733,"line_end":733,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392431,"byte_end":392481,"line_start":734,"line_end":734,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392483,"byte_end":392518,"line_start":735,"line_end":735,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392520,"byte_end":392527,"line_start":736,"line_end":736,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392529,"byte_end":392538,"line_start":737,"line_end":737,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393936,"byte_end":393942,"line_start":783,"line_end":783,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<T, O>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping subslices of a bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping subslices of a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392626,"byte_end":392685,"line_start":742,"line_end":742,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392687,"byte_end":392690,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ Unlike `.windows()`, the subslices this yields do not overlap with each","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392692,"byte_end":392767,"line_start":744,"line_end":744,"column_start":2,"column_end":77}},{"value":"/ other. If `self.len()` is not an even multiple of `chunk_size`, then the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392769,"byte_end":392845,"line_start":745,"line_end":745,"column_start":2,"column_end":78}},{"value":"/ last chunk yielded will be shorter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392847,"byte_end":392886,"line_start":746,"line_end":746,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392888,"byte_end":392891,"line_start":747,"line_end":747,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392893,"byte_end":392908,"line_start":748,"line_end":748,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392910,"byte_end":392913,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":392915,"byte_end":393002,"line_start":750,"line_end":750,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393004,"byte_end":393007,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393009,"byte_end":393031,"line_start":752,"line_end":752,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393033,"byte_end":393036,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ - [`.chunks_mut()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393038,"byte_end":393107,"line_start":754,"line_end":754,"column_start":2,"column_end":71}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393109,"byte_end":393136,"line_start":755,"line_end":755,"column_start":2,"column_end":29}},{"value":"/ - [`.chunks_exact()`] does not yield the final chunk if it is shorter","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393138,"byte_end":393211,"line_start":756,"line_end":756,"column_start":2,"column_end":75}},{"value":"/   than `chunk_size`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393213,"byte_end":393237,"line_start":757,"line_end":757,"column_start":2,"column_end":26}},{"value":"/ - [`.rchunks()`] iterates from the back of the bit-slice to the front,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393239,"byte_end":393313,"line_start":758,"line_end":758,"column_start":2,"column_end":76}},{"value":"/   with the final, possibly-shorter, segment at the front edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393315,"byte_end":393381,"line_start":759,"line_end":759,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393383,"byte_end":393386,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393388,"byte_end":393401,"line_start":761,"line_end":761,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393403,"byte_end":393406,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393408,"byte_end":393447,"line_start":763,"line_end":763,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393449,"byte_end":393452,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393454,"byte_end":393469,"line_start":765,"line_end":765,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393471,"byte_end":393474,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393476,"byte_end":393487,"line_start":767,"line_end":767,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393489,"byte_end":393516,"line_start":768,"line_end":768,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393518,"byte_end":393521,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393523,"byte_end":393559,"line_start":770,"line_end":770,"column_start":2,"column_end":38}},{"value":"/ let mut iter = bits.chunks(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393561,"byte_end":393595,"line_start":771,"line_end":771,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393597,"byte_end":393600,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393602,"byte_end":393649,"line_start":773,"line_end":773,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393651,"byte_end":393698,"line_start":774,"line_end":774,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393700,"byte_end":393744,"line_start":775,"line_end":775,"column_start":2,"column_end":46}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393746,"byte_end":393781,"line_start":776,"line_end":776,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393783,"byte_end":393790,"line_start":777,"line_end":777,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393792,"byte_end":393795,"line_start":778,"line_end":778,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393797,"byte_end":393840,"line_start":779,"line_end":779,"column_start":2,"column_end":45}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393842,"byte_end":393881,"line_start":780,"line_end":780,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393883,"byte_end":393916,"line_start":781,"line_end":781,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":393918,"byte_end":393927,"line_start":782,"line_end":782,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395634,"byte_end":395644,"line_start":834,"line_end":834,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<T, O>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping mutable subslices of a bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping mutable subslices of a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394024,"byte_end":394091,"line_start":787,"line_end":787,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394093,"byte_end":394096,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394098,"byte_end":394173,"line_start":789,"line_end":789,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394175,"byte_end":394250,"line_start":790,"line_end":790,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394252,"byte_end":394321,"line_start":791,"line_end":791,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394323,"byte_end":394397,"line_start":792,"line_end":792,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394399,"byte_end":394472,"line_start":793,"line_end":793,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394474,"byte_end":394491,"line_start":794,"line_end":794,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394493,"byte_end":394496,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394498,"byte_end":394513,"line_start":796,"line_end":796,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394515,"byte_end":394518,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394520,"byte_end":394615,"line_start":798,"line_end":798,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394617,"byte_end":394620,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394622,"byte_end":394644,"line_start":800,"line_end":800,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394646,"byte_end":394649,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ - [`.chunks()`] has the same division logic, but each yielded bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394651,"byte_end":394726,"line_start":802,"line_end":802,"column_start":2,"column_end":77}},{"value":"/   is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394728,"byte_end":394747,"line_start":803,"line_end":803,"column_start":2,"column_end":21}},{"value":"/ - [`.chunks_exact_mut()`] does not yield the final chunk if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394749,"byte_end":394818,"line_start":804,"line_end":804,"column_start":2,"column_end":71}},{"value":"/   shorter than `chunk_size`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394820,"byte_end":394852,"line_start":805,"line_end":805,"column_start":2,"column_end":34}},{"value":"/ - [`.rchunks_mut()`] iterates from the back of the bit-slice to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394854,"byte_end":394925,"line_start":806,"line_end":806,"column_start":2,"column_end":73}},{"value":"/   front, with the final, possibly-shorter, segment at the front edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":394927,"byte_end":395000,"line_start":807,"line_end":807,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395002,"byte_end":395005,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395007,"byte_end":395020,"line_start":809,"line_end":809,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395022,"byte_end":395025,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395027,"byte_end":395066,"line_start":811,"line_end":811,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395068,"byte_end":395071,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395073,"byte_end":395088,"line_start":813,"line_end":813,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395090,"byte_end":395093,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395095,"byte_end":395106,"line_start":815,"line_end":815,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395108,"byte_end":395135,"line_start":816,"line_end":816,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395137,"byte_end":395140,"line_start":817,"line_end":817,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut u8, Msb0; 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395142,"byte_end":395183,"line_start":818,"line_end":818,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395185,"byte_end":395188,"line_start":819,"line_end":819,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395190,"byte_end":395222,"line_start":820,"line_end":820,"column_start":2,"column_end":34}},{"value":"/   bits.chunks_mut(2).remove_alias()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395224,"byte_end":395263,"line_start":821,"line_end":821,"column_start":2,"column_end":41}},{"value":"/ }.enumerate() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395265,"byte_end":395284,"line_start":822,"line_end":822,"column_start":2,"column_end":21}},{"value":"/   chunk.store(idx + 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395286,"byte_end":395313,"line_start":823,"line_end":823,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395315,"byte_end":395320,"line_start":824,"line_end":824,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![0, 1, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395322,"byte_end":395365,"line_start":825,"line_end":825,"column_start":2,"column_end":45}},{"value":"/ //                     ^^^^  ^^^^  ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395367,"byte_end":395407,"line_start":826,"line_end":826,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395409,"byte_end":395416,"line_start":827,"line_end":827,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395418,"byte_end":395421,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395423,"byte_end":395454,"line_start":829,"line_end":829,"column_start":2,"column_end":33}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395456,"byte_end":395507,"line_start":830,"line_end":830,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395509,"byte_end":395550,"line_start":831,"line_end":831,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395552,"byte_end":395614,"line_start":832,"line_end":832,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395616,"byte_end":395625,"line_start":833,"line_end":833,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3269},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397171,"byte_end":397183,"line_start":880,"line_end":880,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<T, O>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping subslices of a bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping subslices of a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395736,"byte_end":395795,"line_start":838,"line_end":838,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395797,"byte_end":395800,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ If `self.len()` is not an even multiple of `chunk_size`, then the last","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395802,"byte_end":395876,"line_start":840,"line_end":840,"column_start":2,"column_end":76}},{"value":"/ few bits are not yielded by the iterator at all. They can be accessed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395878,"byte_end":395951,"line_start":841,"line_end":841,"column_start":2,"column_end":75}},{"value":"/ with the [`.remainder()`] method if the iterator is bound to a name.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":395953,"byte_end":396025,"line_start":842,"line_end":842,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396027,"byte_end":396030,"line_start":843,"line_end":843,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396032,"byte_end":396047,"line_start":844,"line_end":844,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396049,"byte_end":396052,"line_start":845,"line_end":845,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396054,"byte_end":396153,"line_start":846,"line_end":846,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396155,"byte_end":396158,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396160,"byte_end":396182,"line_start":848,"line_end":848,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396184,"byte_end":396187,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ - [`.chunks()`] yields any leftover bits at the end as a shorter chunk","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396189,"byte_end":396263,"line_start":850,"line_end":850,"column_start":2,"column_end":76}},{"value":"/   during iteration.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396265,"byte_end":396288,"line_start":851,"line_end":851,"column_start":2,"column_end":25}},{"value":"/ - [`.chunks_exact_mut()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396290,"byte_end":396365,"line_start":852,"line_end":852,"column_start":2,"column_end":77}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396367,"byte_end":396394,"line_start":853,"line_end":853,"column_start":2,"column_end":29}},{"value":"/ - [`.rchunks_exact()`] iterates from the back of the bit-slice to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396396,"byte_end":396469,"line_start":854,"line_end":854,"column_start":2,"column_end":75}},{"value":"/   front, with the unyielded remainder segment at the front edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396471,"byte_end":396539,"line_start":855,"line_end":855,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396541,"byte_end":396544,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396546,"byte_end":396559,"line_start":857,"line_end":857,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396561,"byte_end":396564,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396566,"byte_end":396605,"line_start":859,"line_end":859,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396607,"byte_end":396610,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396612,"byte_end":396627,"line_start":861,"line_end":861,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396629,"byte_end":396632,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396634,"byte_end":396645,"line_start":863,"line_end":863,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396647,"byte_end":396674,"line_start":864,"line_end":864,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396676,"byte_end":396679,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396681,"byte_end":396717,"line_start":866,"line_end":866,"column_start":2,"column_end":38}},{"value":"/ let mut iter = bits.chunks_exact(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396719,"byte_end":396759,"line_start":867,"line_end":867,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396761,"byte_end":396764,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396766,"byte_end":396813,"line_start":869,"line_end":869,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396815,"byte_end":396862,"line_start":870,"line_end":870,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396864,"byte_end":396899,"line_start":871,"line_end":871,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396901,"byte_end":396944,"line_start":872,"line_end":872,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396946,"byte_end":396953,"line_start":873,"line_end":873,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396955,"byte_end":396958,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396960,"byte_end":396991,"line_start":875,"line_end":875,"column_start":2,"column_end":33}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":396993,"byte_end":397044,"line_start":876,"line_end":876,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397046,"byte_end":397091,"line_start":877,"line_end":877,"column_start":2,"column_end":47}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397093,"byte_end":397151,"line_start":878,"line_end":878,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397153,"byte_end":397162,"line_start":879,"line_end":879,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399277,"byte_end":399293,"line_start":938,"line_end":938,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<T, O>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping mutable subslices of a bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping mutable subslices of a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397275,"byte_end":397342,"line_start":884,"line_end":884,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397344,"byte_end":397347,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ If `self.len()` is not an even multiple of `chunk_size`, then the last","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397349,"byte_end":397423,"line_start":886,"line_end":886,"column_start":2,"column_end":76}},{"value":"/ few bits are not yielded by the iterator at all. They can be accessed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397425,"byte_end":397498,"line_start":887,"line_end":887,"column_start":2,"column_end":75}},{"value":"/ with the [`.into_remainder()`] method if the iterator is bound to a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397500,"byte_end":397571,"line_start":888,"line_end":888,"column_start":2,"column_end":73}},{"value":"/ name.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397573,"byte_end":397582,"line_start":889,"line_end":889,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397584,"byte_end":397587,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397589,"byte_end":397664,"line_start":891,"line_end":891,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397666,"byte_end":397741,"line_start":892,"line_end":892,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397743,"byte_end":397812,"line_start":893,"line_end":893,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397814,"byte_end":397888,"line_start":894,"line_end":894,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397890,"byte_end":397963,"line_start":895,"line_end":895,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397965,"byte_end":397982,"line_start":896,"line_end":896,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397984,"byte_end":397987,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":397989,"byte_end":398004,"line_start":898,"line_end":898,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398006,"byte_end":398009,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398011,"byte_end":398118,"line_start":900,"line_end":900,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398120,"byte_end":398123,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398125,"byte_end":398147,"line_start":902,"line_end":902,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398149,"byte_end":398152,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ - [`.chunks_mut()`] yields any leftover bits at the end as a shorter","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398154,"byte_end":398226,"line_start":904,"line_end":904,"column_start":2,"column_end":74}},{"value":"/   chunk during iteration.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398228,"byte_end":398257,"line_start":905,"line_end":905,"column_start":2,"column_end":31}},{"value":"/ - [`.chunks_exact()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398259,"byte_end":398330,"line_start":906,"line_end":906,"column_start":2,"column_end":73}},{"value":"/   bit-slice is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398332,"byte_end":398361,"line_start":907,"line_end":907,"column_start":2,"column_end":31}},{"value":"/ - [`.rchunks_exact_mut()`] iterates from the back of the bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398363,"byte_end":398433,"line_start":908,"line_end":908,"column_start":2,"column_end":72}},{"value":"/   forwards, with the unyielded remainder segment at the front edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398435,"byte_end":398506,"line_start":909,"line_end":909,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398508,"byte_end":398511,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398513,"byte_end":398526,"line_start":911,"line_end":911,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398528,"byte_end":398531,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398533,"byte_end":398572,"line_start":913,"line_end":913,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398574,"byte_end":398577,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398579,"byte_end":398594,"line_start":915,"line_end":915,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398596,"byte_end":398599,"line_start":916,"line_end":916,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398601,"byte_end":398612,"line_start":917,"line_end":917,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398614,"byte_end":398641,"line_start":918,"line_end":918,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398643,"byte_end":398646,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut u8, Msb0; 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398648,"byte_end":398689,"line_start":920,"line_end":920,"column_start":2,"column_end":43}},{"value":"/ let mut iter = bits.chunks_exact_mut(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398691,"byte_end":398735,"line_start":921,"line_end":921,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398737,"byte_end":398740,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in iter.by_ref().enumerate() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398742,"byte_end":398793,"line_start":923,"line_end":923,"column_start":2,"column_end":53}},{"value":"/   chunk.store(idx + 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398795,"byte_end":398822,"line_start":924,"line_end":924,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398824,"byte_end":398829,"line_start":925,"line_end":925,"column_start":2,"column_end":7}},{"value":"/ iter.into_remainder().store(1u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398831,"byte_end":398868,"line_start":926,"line_end":926,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398870,"byte_end":398873,"line_start":927,"line_end":927,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398875,"byte_end":398918,"line_start":928,"line_end":928,"column_start":2,"column_end":45}},{"value":"/ //                       remainder ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398920,"byte_end":398960,"line_start":929,"line_end":929,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398962,"byte_end":398969,"line_start":930,"line_end":930,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398971,"byte_end":398974,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":398976,"byte_end":399019,"line_start":932,"line_end":932,"column_start":2,"column_end":45}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399021,"byte_end":399060,"line_start":933,"line_end":933,"column_start":2,"column_end":41}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399062,"byte_end":399133,"line_start":934,"line_end":934,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399135,"byte_end":399188,"line_start":935,"line_end":935,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399190,"byte_end":399257,"line_start":936,"line_end":936,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399259,"byte_end":399268,"line_start":937,"line_end":937,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400756,"byte_end":400763,"line_start":987,"line_end":987,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<T, O>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping subslices of a bit-slice, from the back\n edge.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping subslices of a bit-slice, from the back","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399403,"byte_end":399476,"line_start":945,"line_end":945,"column_start":2,"column_end":75}},{"value":"/ edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399478,"byte_end":399487,"line_start":946,"line_end":946,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399489,"byte_end":399492,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ Unlike `.chunks()`, this aligns its chunks to the back edge of `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399494,"byte_end":399568,"line_start":948,"line_end":948,"column_start":2,"column_end":76}},{"value":"/ If `self.len()` is not an even multiple of `chunk_size`, then the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399570,"byte_end":399639,"line_start":949,"line_end":949,"column_start":2,"column_end":71}},{"value":"/ leftover partial chunk is `self[0 .. len % chunk_size]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399641,"byte_end":399701,"line_start":950,"line_end":950,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399703,"byte_end":399706,"line_start":951,"line_end":951,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399708,"byte_end":399723,"line_start":952,"line_end":952,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399725,"byte_end":399728,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399730,"byte_end":399819,"line_start":954,"line_end":954,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399821,"byte_end":399824,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399826,"byte_end":399848,"line_start":956,"line_end":956,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399850,"byte_end":399853,"line_start":957,"line_end":957,"column_start":2,"column_end":5}},{"value":"/ - [`.rchunks_mut()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399855,"byte_end":399925,"line_start":958,"line_end":958,"column_start":2,"column_end":72}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399927,"byte_end":399954,"line_start":959,"line_end":959,"column_start":2,"column_end":29}},{"value":"/ - [`.rchunks_exact()`] does not yield the final chunk if it is shorter","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":399956,"byte_end":400030,"line_start":960,"line_end":960,"column_start":2,"column_end":76}},{"value":"/   than `chunk_size`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400032,"byte_end":400056,"line_start":961,"line_end":961,"column_start":2,"column_end":26}},{"value":"/ - [`.chunks()`] iterates from the front of the bit-slice to the back,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400058,"byte_end":400131,"line_start":962,"line_end":962,"column_start":2,"column_end":75}},{"value":"/   with the final, possibly-shorter, segment at the back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400133,"byte_end":400198,"line_start":963,"line_end":963,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400200,"byte_end":400203,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400205,"byte_end":400218,"line_start":965,"line_end":965,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400220,"byte_end":400223,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400225,"byte_end":400264,"line_start":967,"line_end":967,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400266,"byte_end":400269,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400271,"byte_end":400286,"line_start":969,"line_end":969,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400288,"byte_end":400291,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400293,"byte_end":400304,"line_start":971,"line_end":971,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400306,"byte_end":400333,"line_start":972,"line_end":972,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400335,"byte_end":400338,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400340,"byte_end":400376,"line_start":974,"line_end":974,"column_start":2,"column_end":38}},{"value":"/ let mut iter = bits.rchunks(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400378,"byte_end":400413,"line_start":975,"line_end":975,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400415,"byte_end":400418,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400420,"byte_end":400467,"line_start":977,"line_end":977,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400469,"byte_end":400516,"line_start":978,"line_end":978,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400518,"byte_end":400562,"line_start":979,"line_end":979,"column_start":2,"column_end":46}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400564,"byte_end":400599,"line_start":980,"line_end":980,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400601,"byte_end":400608,"line_start":981,"line_end":981,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400610,"byte_end":400613,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400615,"byte_end":400646,"line_start":983,"line_end":983,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400648,"byte_end":400693,"line_start":984,"line_end":984,"column_start":2,"column_end":47}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400695,"byte_end":400736,"line_start":985,"line_end":985,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400738,"byte_end":400747,"line_start":986,"line_end":986,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402632,"byte_end":402643,"line_start":1038,"line_end":1038,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<T, O>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping mutable subslices of a bit-slice, from the\n back edge.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping mutable subslices of a bit-slice, from the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400847,"byte_end":400923,"line_start":991,"line_end":991,"column_start":2,"column_end":78}},{"value":"/ back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400925,"byte_end":400939,"line_start":992,"line_end":992,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400941,"byte_end":400944,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ Unlike `.chunks_mut()`, this aligns its chunks to the back edge of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":400946,"byte_end":401016,"line_start":994,"line_end":994,"column_start":2,"column_end":72}},{"value":"/ `self`. If `self.len()` is not an even multiple of `chunk_size`, then","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401018,"byte_end":401091,"line_start":995,"line_end":995,"column_start":2,"column_end":75}},{"value":"/ the leftover partial chunk is `self[0 .. len % chunk_size]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401093,"byte_end":401157,"line_start":996,"line_end":996,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401159,"byte_end":401162,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401164,"byte_end":401239,"line_start":998,"line_end":998,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401241,"byte_end":401316,"line_start":999,"line_end":999,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401318,"byte_end":401387,"line_start":1000,"line_end":1000,"column_start":2,"column_end":71}},{"value":"/ multiple yielded values for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401389,"byte_end":401460,"line_start":1001,"line_end":1001,"column_start":2,"column_end":73}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401462,"byte_end":401535,"line_start":1002,"line_end":1002,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401537,"byte_end":401554,"line_start":1003,"line_end":1003,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401556,"byte_end":401559,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401561,"byte_end":401576,"line_start":1005,"line_end":1005,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401578,"byte_end":401581,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401583,"byte_end":401680,"line_start":1007,"line_end":1007,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401682,"byte_end":401685,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401687,"byte_end":401709,"line_start":1009,"line_end":1009,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401711,"byte_end":401714,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ - [`.rchunks()`] has the same division logic, but each yielded bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401716,"byte_end":401792,"line_start":1011,"line_end":1011,"column_start":2,"column_end":78}},{"value":"/   is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401794,"byte_end":401813,"line_start":1012,"line_end":1012,"column_start":2,"column_end":21}},{"value":"/ - [`.rchunks_exact_mut()`] does not yield the final chunk if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401815,"byte_end":401885,"line_start":1013,"line_end":1013,"column_start":2,"column_end":72}},{"value":"/   shorter than `chunk_size`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401887,"byte_end":401919,"line_start":1014,"line_end":1014,"column_start":2,"column_end":34}},{"value":"/ - [`.chunks_mut()`] iterates from the front of the bit-slice to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401921,"byte_end":401992,"line_start":1015,"line_end":1015,"column_start":2,"column_end":73}},{"value":"/   back, with the final, possibly-shorter, segment at the back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":401994,"byte_end":402065,"line_start":1016,"line_end":1016,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402067,"byte_end":402070,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402072,"byte_end":402087,"line_start":1018,"line_end":1018,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402089,"byte_end":402092,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402094,"byte_end":402105,"line_start":1020,"line_end":1020,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402107,"byte_end":402134,"line_start":1021,"line_end":1021,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402136,"byte_end":402139,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut u8, Msb0; 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402141,"byte_end":402182,"line_start":1023,"line_end":1023,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402184,"byte_end":402216,"line_start":1024,"line_end":1024,"column_start":2,"column_end":34}},{"value":"/   bits.rchunks_mut(2).remove_alias()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402218,"byte_end":402258,"line_start":1025,"line_end":1025,"column_start":2,"column_end":42}},{"value":"/ }.enumerate() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402260,"byte_end":402279,"line_start":1026,"line_end":1026,"column_start":2,"column_end":21}},{"value":"/   chunk.store(idx + 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402281,"byte_end":402308,"line_start":1027,"line_end":1027,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402310,"byte_end":402315,"line_start":1028,"line_end":1028,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402317,"byte_end":402360,"line_start":1029,"line_end":1029,"column_start":2,"column_end":45}},{"value":"/ //           remainder ^  ^^^^  ^^^^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402362,"byte_end":402402,"line_start":1030,"line_end":1030,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402404,"byte_end":402411,"line_start":1031,"line_end":1031,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402413,"byte_end":402416,"line_start":1032,"line_end":1032,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402418,"byte_end":402457,"line_start":1033,"line_end":1033,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402459,"byte_end":402492,"line_start":1034,"line_end":1034,"column_start":2,"column_end":35}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402494,"byte_end":402547,"line_start":1035,"line_end":1035,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402549,"byte_end":402612,"line_start":1036,"line_end":1036,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402614,"byte_end":402623,"line_start":1037,"line_end":1037,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3273},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404206,"byte_end":404219,"line_start":1085,"line_end":1085,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<T, O>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping subslices of a bit-slice, from the back\n edge.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping subslices of a bit-slice, from the back","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402737,"byte_end":402810,"line_start":1042,"line_end":1042,"column_start":2,"column_end":75}},{"value":"/ edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402812,"byte_end":402821,"line_start":1043,"line_end":1043,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402823,"byte_end":402826,"line_start":1044,"line_end":1044,"column_start":2,"column_end":5}},{"value":"/ If `self.len()` is not an even multiple of `chunk_size`, then the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402828,"byte_end":402903,"line_start":1045,"line_end":1045,"column_start":2,"column_end":77}},{"value":"/ few bits are not yielded by the iterator at all. They can be accessed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402905,"byte_end":402978,"line_start":1046,"line_end":1046,"column_start":2,"column_end":75}},{"value":"/ with the [`.remainder()`] method if the iterator is bound to a name.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":402980,"byte_end":403052,"line_start":1047,"line_end":1047,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403054,"byte_end":403057,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403059,"byte_end":403074,"line_start":1049,"line_end":1049,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403076,"byte_end":403079,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403081,"byte_end":403182,"line_start":1051,"line_end":1051,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403184,"byte_end":403187,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403189,"byte_end":403211,"line_start":1053,"line_end":1053,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403213,"byte_end":403216,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ - [`.rchunks()`] yields any leftover bits at the front as a shorter","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403218,"byte_end":403289,"line_start":1055,"line_end":1055,"column_start":2,"column_end":73}},{"value":"/   chunk during iteration.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403291,"byte_end":403320,"line_start":1056,"line_end":1056,"column_start":2,"column_end":31}},{"value":"/ - [`.rchunks_exact_mut()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403322,"byte_end":403398,"line_start":1057,"line_end":1057,"column_start":2,"column_end":78}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403400,"byte_end":403427,"line_start":1058,"line_end":1058,"column_start":2,"column_end":29}},{"value":"/ - [`.chunks_exact()`] iterates from the front of the bit-slice to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403429,"byte_end":403502,"line_start":1059,"line_end":1059,"column_start":2,"column_end":75}},{"value":"/   back, with the unyielded remainder segment at the back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403504,"byte_end":403570,"line_start":1060,"line_end":1060,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403572,"byte_end":403575,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403577,"byte_end":403590,"line_start":1062,"line_end":1062,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403592,"byte_end":403595,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403597,"byte_end":403636,"line_start":1064,"line_end":1064,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403638,"byte_end":403641,"line_start":1065,"line_end":1065,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403643,"byte_end":403658,"line_start":1066,"line_end":1066,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403660,"byte_end":403663,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403665,"byte_end":403676,"line_start":1068,"line_end":1068,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403678,"byte_end":403705,"line_start":1069,"line_end":1069,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403707,"byte_end":403710,"line_start":1070,"line_end":1070,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403712,"byte_end":403748,"line_start":1071,"line_end":1071,"column_start":2,"column_end":38}},{"value":"/ let mut iter = bits.rchunks_exact(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403750,"byte_end":403791,"line_start":1072,"line_end":1072,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403793,"byte_end":403796,"line_start":1073,"line_end":1073,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next(), Some(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403798,"byte_end":403845,"line_start":1074,"line_end":1074,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(bits![1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403847,"byte_end":403894,"line_start":1075,"line_end":1075,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403896,"byte_end":403931,"line_start":1076,"line_end":1076,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403933,"byte_end":403976,"line_start":1077,"line_end":1077,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403978,"byte_end":403985,"line_start":1078,"line_end":1078,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403987,"byte_end":403990,"line_start":1079,"line_end":1079,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":403992,"byte_end":404035,"line_start":1080,"line_end":1080,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404037,"byte_end":404070,"line_start":1081,"line_end":1081,"column_start":2,"column_end":35}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404072,"byte_end":404125,"line_start":1082,"line_end":1082,"column_start":2,"column_end":55}},{"value":"/ [`.remainder()`]: crate::slice::RChunksExact::remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404127,"byte_end":404186,"line_start":1083,"line_end":1083,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404188,"byte_end":404197,"line_start":1084,"line_end":1084,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3274},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406202,"byte_end":406219,"line_start":1140,"line_end":1140,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<T, O>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over non-overlapping mutable subslices of a bit-slice, from the\n back edge.","sig":null,"attributes":[{"value":"/ Iterates over non-overlapping mutable subslices of a bit-slice, from the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404313,"byte_end":404389,"line_start":1089,"line_end":1089,"column_start":2,"column_end":78}},{"value":"/ back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404391,"byte_end":404405,"line_start":1090,"line_end":1090,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404407,"byte_end":404410,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ If `self.len()` is not an even multiple of `chunk_size`, then the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404412,"byte_end":404487,"line_start":1092,"line_end":1092,"column_start":2,"column_end":77}},{"value":"/ few bits are not yielded by the iterator at all. They can be accessed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404489,"byte_end":404562,"line_start":1093,"line_end":1093,"column_start":2,"column_end":75}},{"value":"/ with the [`.into_remainder()`] method if the iterator is bound to a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404564,"byte_end":404635,"line_start":1094,"line_end":1094,"column_start":2,"column_end":73}},{"value":"/ name.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404637,"byte_end":404646,"line_start":1095,"line_end":1095,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404648,"byte_end":404651,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404653,"byte_end":404728,"line_start":1097,"line_end":1097,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404730,"byte_end":404805,"line_start":1098,"line_end":1098,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404807,"byte_end":404876,"line_start":1099,"line_end":1099,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404878,"byte_end":404952,"line_start":1100,"line_end":1100,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":404954,"byte_end":405027,"line_start":1101,"line_end":1101,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405029,"byte_end":405046,"line_start":1102,"line_end":1102,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405048,"byte_end":405051,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405053,"byte_end":405075,"line_start":1104,"line_end":1104,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405077,"byte_end":405080,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ - [`.rchunks_mut()`] yields any leftover bits at the front as a shorter","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405082,"byte_end":405157,"line_start":1106,"line_end":1106,"column_start":2,"column_end":77}},{"value":"/   chunk during iteration.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405159,"byte_end":405188,"line_start":1107,"line_end":1107,"column_start":2,"column_end":31}},{"value":"/ - [`.rchunks_exact()`] has the same division logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405190,"byte_end":405262,"line_start":1108,"line_end":1108,"column_start":2,"column_end":74}},{"value":"/   bit-slice is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405264,"byte_end":405293,"line_start":1109,"line_end":1109,"column_start":2,"column_end":31}},{"value":"/ - [`.chunks_exact_mut()`] iterates from the front of the bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405295,"byte_end":405365,"line_start":1110,"line_end":1110,"column_start":2,"column_end":72}},{"value":"/   backwards, with the unyielded remainder segment at the back edge.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405367,"byte_end":405438,"line_start":1111,"line_end":1111,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405440,"byte_end":405443,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405445,"byte_end":405458,"line_start":1113,"line_end":1113,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405460,"byte_end":405463,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ This panics if `chunk_size` is `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405465,"byte_end":405504,"line_start":1115,"line_end":1115,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405506,"byte_end":405509,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405511,"byte_end":405526,"line_start":1117,"line_end":1117,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405528,"byte_end":405531,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405533,"byte_end":405544,"line_start":1119,"line_end":1119,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405546,"byte_end":405573,"line_start":1120,"line_end":1120,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405575,"byte_end":405578,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut u8, Msb0; 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405580,"byte_end":405621,"line_start":1122,"line_end":1122,"column_start":2,"column_end":43}},{"value":"/ let mut iter = bits.rchunks_exact_mut(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405623,"byte_end":405668,"line_start":1123,"line_end":1123,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405670,"byte_end":405673,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in iter.by_ref().enumerate() {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405675,"byte_end":405726,"line_start":1125,"line_end":1125,"column_start":2,"column_end":53}},{"value":"/   chunk.store(idx + 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405728,"byte_end":405755,"line_start":1126,"line_end":1126,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405757,"byte_end":405762,"line_start":1127,"line_end":1127,"column_start":2,"column_end":7}},{"value":"/ iter.into_remainder().store(1u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405764,"byte_end":405801,"line_start":1128,"line_end":1128,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405803,"byte_end":405806,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405808,"byte_end":405851,"line_start":1130,"line_end":1130,"column_start":2,"column_end":45}},{"value":"/ //           remainder ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405853,"byte_end":405881,"line_start":1131,"line_end":1131,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405883,"byte_end":405890,"line_start":1132,"line_end":1132,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405892,"byte_end":405895,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405897,"byte_end":405948,"line_start":1134,"line_end":1134,"column_start":2,"column_end":53}},{"value":"/ [`.into_remainder()`]: crate::slice::RChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":405950,"byte_end":406022,"line_start":1135,"line_end":1135,"column_start":2,"column_end":74}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406024,"byte_end":406069,"line_start":1136,"line_end":1136,"column_start":2,"column_end":47}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406071,"byte_end":406112,"line_start":1137,"line_end":1137,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksExactMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406114,"byte_end":406182,"line_start":1138,"line_end":1138,"column_start":2,"column_end":70}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406184,"byte_end":406193,"line_start":1139,"line_end":1139,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3275},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407668,"byte_end":407676,"line_start":1188,"line_end":1188,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<T, O>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a bit-slice in two parts at an index.","sig":null,"attributes":[{"value":"/ Splits a bit-slice in two parts at an index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406331,"byte_end":406379,"line_start":1147,"line_end":1147,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406381,"byte_end":406384,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ The returned bit-slices are `self[.. mid]` and `self[mid ..]`. `mid` is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406386,"byte_end":406461,"line_start":1149,"line_end":1149,"column_start":2,"column_end":77}},{"value":"/ included in the right bit-slice, not the left.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406463,"byte_end":406513,"line_start":1150,"line_end":1150,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406515,"byte_end":406518,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ If `mid` is `0` then the left bit-slice is empty; if it is `self.len()`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406520,"byte_end":406595,"line_start":1152,"line_end":1152,"column_start":2,"column_end":77}},{"value":"/ then the right bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406597,"byte_end":406635,"line_start":1153,"line_end":1153,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406637,"byte_end":406640,"line_start":1154,"line_end":1154,"column_start":2,"column_end":5}},{"value":"/ This method guarantees that even when either partition is empty, the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406642,"byte_end":406714,"line_start":1155,"line_end":1155,"column_start":2,"column_end":74}},{"value":"/ encoded bit-pointer values of the bit-slice references is `&self[0]` and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406716,"byte_end":406792,"line_start":1156,"line_end":1156,"column_start":2,"column_end":78}},{"value":"/ `&self[mid]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406794,"byte_end":406811,"line_start":1157,"line_end":1157,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406813,"byte_end":406816,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406818,"byte_end":406833,"line_start":1159,"line_end":1159,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406835,"byte_end":406838,"line_start":1160,"line_end":1160,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406840,"byte_end":406931,"line_start":1161,"line_end":1161,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406933,"byte_end":406936,"line_start":1162,"line_end":1162,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406938,"byte_end":406951,"line_start":1163,"line_end":1163,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406953,"byte_end":406956,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ This panics if `mid` is greater than `self.len()`. It is allowed to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":406958,"byte_end":407032,"line_start":1165,"line_end":1165,"column_start":2,"column_end":76}},{"value":"/ equal to the length, in which case the right bit-slice is simply empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407034,"byte_end":407109,"line_start":1166,"line_end":1166,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407111,"byte_end":407114,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407116,"byte_end":407131,"line_start":1168,"line_end":1168,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407133,"byte_end":407136,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407138,"byte_end":407149,"line_start":1170,"line_end":1170,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407151,"byte_end":407178,"line_start":1171,"line_end":1171,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407180,"byte_end":407183,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407185,"byte_end":407224,"line_start":1173,"line_end":1173,"column_start":2,"column_end":41}},{"value":"/ let base = bits.as_bitptr();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407226,"byte_end":407258,"line_start":1174,"line_end":1174,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407260,"byte_end":407263,"line_start":1175,"line_end":1175,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at(0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407265,"byte_end":407299,"line_start":1176,"line_end":1176,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(unsafe { a.as_bitptr().offset_from(base) }, 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407301,"byte_end":407363,"line_start":1177,"line_end":1177,"column_start":2,"column_end":64}},{"value":"/ assert_eq!(unsafe { b.as_bitptr().offset_from(base) }, 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407365,"byte_end":407427,"line_start":1178,"line_end":1178,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407429,"byte_end":407432,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at(6);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407434,"byte_end":407468,"line_start":1180,"line_end":1180,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(unsafe { b.as_bitptr().offset_from(base) }, 6);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407470,"byte_end":407532,"line_start":1181,"line_end":1181,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407534,"byte_end":407537,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407539,"byte_end":407573,"line_start":1183,"line_end":1183,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(a, bits![0; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407575,"byte_end":407606,"line_start":1184,"line_end":1184,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(b, bits![1; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407608,"byte_end":407639,"line_start":1185,"line_end":1185,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407641,"byte_end":407648,"line_start":1186,"line_end":1186,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407650,"byte_end":407659,"line_start":1187,"line_end":1187,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3276},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409597,"byte_end":409609,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<T, O>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<T::Alias, O>, &mut BitSlice<T::Alias, O>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable bit-slice in two parts at an index.","sig":null,"attributes":[{"value":"/ Splits a mutable bit-slice in two parts at an index.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407811,"byte_end":407867,"line_start":1193,"line_end":1193,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407869,"byte_end":407872,"line_start":1194,"line_end":1194,"column_start":2,"column_end":5}},{"value":"/ The returned bit-slices are `self[.. mid]` and `self[mid ..]`. `mid` is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407874,"byte_end":407949,"line_start":1195,"line_end":1195,"column_start":2,"column_end":77}},{"value":"/ included in the right bit-slice, not the left.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":407951,"byte_end":408001,"line_start":1196,"line_end":1196,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408003,"byte_end":408006,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ If `mid` is `0` then the left bit-slice is empty; if it is `self.len()`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408008,"byte_end":408083,"line_start":1198,"line_end":1198,"column_start":2,"column_end":77}},{"value":"/ then the right bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408085,"byte_end":408123,"line_start":1199,"line_end":1199,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408125,"byte_end":408128,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ This method guarantees that even when either partition is empty, the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408130,"byte_end":408202,"line_start":1201,"line_end":1201,"column_start":2,"column_end":74}},{"value":"/ encoded bit-pointer values of the bit-slice references is `&self[0]` and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408204,"byte_end":408280,"line_start":1202,"line_end":1202,"column_start":2,"column_end":78}},{"value":"/ `&self[mid]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408282,"byte_end":408299,"line_start":1203,"line_end":1203,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408301,"byte_end":408304,"line_start":1204,"line_end":1204,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408306,"byte_end":408321,"line_start":1205,"line_end":1205,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408323,"byte_end":408326,"line_start":1206,"line_end":1206,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408328,"byte_end":408427,"line_start":1207,"line_end":1207,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408429,"byte_end":408432,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408434,"byte_end":408456,"line_start":1209,"line_end":1209,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408458,"byte_end":408461,"line_start":1210,"line_end":1210,"column_start":2,"column_end":5}},{"value":"/ The end bits of the left half and the start bits of the right half might","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408463,"byte_end":408539,"line_start":1211,"line_end":1211,"column_start":2,"column_end":78}},{"value":"/ be stored in the same memory element. In order to avoid breaking","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408541,"byte_end":408609,"line_start":1212,"line_end":1212,"column_start":2,"column_end":70}},{"value":"/ `bitvec`’s memory-safety guarantees, both bit-slices are marked as","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408611,"byte_end":408683,"line_start":1213,"line_end":1213,"column_start":2,"column_end":72}},{"value":"/ `T::Alias`. This marking allows them to be used without interfering with","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408685,"byte_end":408761,"line_start":1214,"line_end":1214,"column_start":2,"column_end":78}},{"value":"/ each other when they interact with memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408763,"byte_end":408809,"line_start":1215,"line_end":1215,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408811,"byte_end":408814,"line_start":1216,"line_end":1216,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408816,"byte_end":408829,"line_start":1217,"line_end":1217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408831,"byte_end":408834,"line_start":1218,"line_end":1218,"column_start":2,"column_end":5}},{"value":"/ This panics if `mid` is greater than `self.len()`. It is allowed to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408836,"byte_end":408910,"line_start":1219,"line_end":1219,"column_start":2,"column_end":76}},{"value":"/ equal to the length, in which case the right bit-slice is simply empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408912,"byte_end":408987,"line_start":1220,"line_end":1220,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408989,"byte_end":408992,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":408994,"byte_end":409009,"line_start":1222,"line_end":1222,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409011,"byte_end":409014,"line_start":1223,"line_end":1223,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409016,"byte_end":409027,"line_start":1224,"line_end":1224,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409029,"byte_end":409056,"line_start":1225,"line_end":1225,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409058,"byte_end":409061,"line_start":1226,"line_end":1226,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut u8, Msb0; 0; 6];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409063,"byte_end":409104,"line_start":1227,"line_end":1227,"column_start":2,"column_end":43}},{"value":"/ let base = bits.as_mut_bitptr();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409106,"byte_end":409142,"line_start":1228,"line_end":1228,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409144,"byte_end":409147,"line_start":1229,"line_end":1229,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at_mut(0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409149,"byte_end":409187,"line_start":1230,"line_end":1230,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(unsafe { a.as_mut_bitptr().offset_from(base) }, 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409189,"byte_end":409255,"line_start":1231,"line_end":1231,"column_start":2,"column_end":68}},{"value":"/ assert_eq!(unsafe { b.as_mut_bitptr().offset_from(base) }, 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409257,"byte_end":409323,"line_start":1232,"line_end":1232,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409325,"byte_end":409328,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at_mut(6);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409330,"byte_end":409368,"line_start":1234,"line_end":1234,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(unsafe { b.as_mut_bitptr().offset_from(base) }, 6);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409370,"byte_end":409436,"line_start":1235,"line_end":1235,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409438,"byte_end":409441,"line_start":1236,"line_end":1236,"column_start":2,"column_end":5}},{"value":"/ let (a, b) = bits.split_at_mut(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409443,"byte_end":409481,"line_start":1237,"line_end":1237,"column_start":2,"column_end":40}},{"value":"/ a.store(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409483,"byte_end":409498,"line_start":1238,"line_end":1238,"column_start":2,"column_end":17}},{"value":"/ b.store(5);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409500,"byte_end":409515,"line_start":1239,"line_end":1239,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409517,"byte_end":409520,"line_start":1240,"line_end":1240,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1, 1, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409522,"byte_end":409568,"line_start":1241,"line_end":1241,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409570,"byte_end":409577,"line_start":1242,"line_end":1242,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409579,"byte_end":409588,"line_start":1243,"line_end":1243,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3277},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412215,"byte_end":412220,"line_start":1327,"line_end":1327,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<T, O>>::split","value":"pub fn split<F>(&Self, F) -> Split<, T, O, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over subslices separated by bits that match a predicate. The\n matched bit is *not* contained in the yielded bit-slices.","sig":null,"attributes":[{"value":"/ Iterates over subslices separated by bits that match a predicate. The","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409802,"byte_end":409875,"line_start":1252,"line_end":1252,"column_start":2,"column_end":75}},{"value":"/ matched bit is *not* contained in the yielded bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409877,"byte_end":409938,"line_start":1253,"line_end":1253,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409940,"byte_end":409943,"line_start":1254,"line_end":1254,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409945,"byte_end":409960,"line_start":1255,"line_end":1255,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409962,"byte_end":409965,"line_start":1256,"line_end":1256,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/std/primitive.slice.html#method.split)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":409967,"byte_end":410052,"line_start":1257,"line_end":1257,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410054,"byte_end":410057,"line_start":1258,"line_end":1258,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410059,"byte_end":410081,"line_start":1259,"line_end":1259,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410083,"byte_end":410086,"line_start":1260,"line_end":1260,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410088,"byte_end":410161,"line_start":1261,"line_end":1261,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410163,"byte_end":410239,"line_start":1262,"line_end":1262,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410241,"byte_end":410300,"line_start":1263,"line_end":1263,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410302,"byte_end":410305,"line_start":1264,"line_end":1264,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410307,"byte_end":410329,"line_start":1265,"line_end":1265,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410331,"byte_end":410334,"line_start":1266,"line_end":1266,"column_start":2,"column_end":5}},{"value":"/ - [`.split_mut()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410336,"byte_end":410405,"line_start":1267,"line_end":1267,"column_start":2,"column_end":71}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410407,"byte_end":410434,"line_start":1268,"line_end":1268,"column_start":2,"column_end":29}},{"value":"/ - [`.split_inclusive()`] includes the matched bit in the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410436,"byte_end":410504,"line_start":1269,"line_end":1269,"column_start":2,"column_end":70}},{"value":"/   bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410506,"byte_end":410522,"line_start":1270,"line_end":1270,"column_start":2,"column_end":18}},{"value":"/ - [`.rsplit()`] iterates from the back of the bit-slice instead of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410524,"byte_end":410598,"line_start":1271,"line_end":1271,"column_start":2,"column_end":76}},{"value":"/   front.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410600,"byte_end":410612,"line_start":1272,"line_end":1272,"column_start":2,"column_end":14}},{"value":"/ - [`.splitn()`] times out after `n` yields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410614,"byte_end":410661,"line_start":1273,"line_end":1273,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410663,"byte_end":410666,"line_start":1274,"line_end":1274,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410668,"byte_end":410683,"line_start":1275,"line_end":1275,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410685,"byte_end":410688,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410690,"byte_end":410701,"line_start":1277,"line_end":1277,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410703,"byte_end":410730,"line_start":1278,"line_end":1278,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410732,"byte_end":410735,"line_start":1279,"line_end":1279,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410737,"byte_end":410770,"line_start":1280,"line_end":1280,"column_start":2,"column_end":35}},{"value":"/ //                     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410772,"byte_end":410800,"line_start":1281,"line_end":1281,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.split(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410802,"byte_end":410858,"line_start":1282,"line_end":1282,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410860,"byte_end":410863,"line_start":1283,"line_end":1283,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410865,"byte_end":410915,"line_start":1284,"line_end":1284,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410917,"byte_end":410964,"line_start":1285,"line_end":1285,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":410966,"byte_end":411001,"line_start":1286,"line_end":1286,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411003,"byte_end":411010,"line_start":1287,"line_end":1287,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411012,"byte_end":411015,"line_start":1288,"line_end":1288,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, then an empty bit-slice will be the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411017,"byte_end":411091,"line_start":1289,"line_end":1289,"column_start":2,"column_end":76}},{"value":"/ item yielded by the iterator. Similarly, if the last bit in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411093,"byte_end":411160,"line_start":1290,"line_end":1290,"column_start":2,"column_end":69}},{"value":"/ bit-slice matches, then an empty bit-slice will be the last item","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411162,"byte_end":411230,"line_start":1291,"line_end":1291,"column_start":2,"column_end":70}},{"value":"/ yielded.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411232,"byte_end":411244,"line_start":1292,"line_end":1292,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411246,"byte_end":411249,"line_start":1293,"line_end":1293,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411251,"byte_end":411262,"line_start":1294,"line_end":1294,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411264,"byte_end":411291,"line_start":1295,"line_end":1295,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411293,"byte_end":411296,"line_start":1296,"line_end":1296,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411298,"byte_end":411328,"line_start":1297,"line_end":1297,"column_start":2,"column_end":32}},{"value":"/ //                     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411330,"byte_end":411358,"line_start":1298,"line_end":1298,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411360,"byte_end":411408,"line_start":1299,"line_end":1299,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411410,"byte_end":411413,"line_start":1300,"line_end":1300,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411415,"byte_end":411465,"line_start":1301,"line_end":1301,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411467,"byte_end":411512,"line_start":1302,"line_end":1302,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411514,"byte_end":411549,"line_start":1303,"line_end":1303,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411551,"byte_end":411558,"line_start":1304,"line_end":1304,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411560,"byte_end":411563,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, then an empty bit-slice will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411565,"byte_end":411640,"line_start":1306,"line_end":1306,"column_start":2,"column_end":77}},{"value":"/ be yielded between them:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411642,"byte_end":411670,"line_start":1307,"line_end":1307,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411672,"byte_end":411675,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411677,"byte_end":411688,"line_start":1309,"line_end":1309,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411690,"byte_end":411717,"line_start":1310,"line_end":1310,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411719,"byte_end":411722,"line_start":1311,"line_end":1311,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411724,"byte_end":411757,"line_start":1312,"line_end":1312,"column_start":2,"column_end":35}},{"value":"/ //                  ^  ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411759,"byte_end":411787,"line_start":1313,"line_end":1313,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.split(|_pos, bit| !*bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411789,"byte_end":411838,"line_start":1314,"line_end":1314,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411840,"byte_end":411843,"line_start":1315,"line_end":1315,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411845,"byte_end":411892,"line_start":1316,"line_end":1316,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411894,"byte_end":411939,"line_start":1317,"line_end":1317,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411941,"byte_end":411988,"line_start":1318,"line_end":1318,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":411990,"byte_end":412025,"line_start":1319,"line_end":1319,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412027,"byte_end":412034,"line_start":1320,"line_end":1320,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412036,"byte_end":412039,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ [`.rsplit()`]: Self::rsplit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412041,"byte_end":412072,"line_start":1322,"line_end":1322,"column_start":2,"column_end":33}},{"value":"/ [`.splitn()`]: Self::splitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412074,"byte_end":412105,"line_start":1323,"line_end":1323,"column_start":2,"column_end":33}},{"value":"/ [`.split_inclusive()`]: Self::split_inclusive","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412107,"byte_end":412156,"line_start":1324,"line_end":1324,"column_start":2,"column_end":51}},{"value":"/ [`.split_mut()`]: Self::split_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412158,"byte_end":412195,"line_start":1325,"line_end":1325,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412197,"byte_end":412206,"line_start":1326,"line_end":1326,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3279},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414176,"byte_end":414185,"line_start":1381,"line_end":1381,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<T, O>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate. The matched bit is *not* contained in the yielded bit-slices.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412328,"byte_end":412394,"line_start":1332,"line_end":1332,"column_start":2,"column_end":68}},{"value":"/ predicate. The matched bit is *not* contained in the yielded bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412396,"byte_end":412472,"line_start":1333,"line_end":1333,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412474,"byte_end":412477,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412479,"byte_end":412554,"line_start":1335,"line_end":1335,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412556,"byte_end":412631,"line_start":1336,"line_end":1336,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412633,"byte_end":412702,"line_start":1337,"line_end":1337,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412704,"byte_end":412778,"line_start":1338,"line_end":1338,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412780,"byte_end":412853,"line_start":1339,"line_end":1339,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412855,"byte_end":412872,"line_start":1340,"line_end":1340,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412874,"byte_end":412877,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412879,"byte_end":412894,"line_start":1342,"line_end":1342,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412896,"byte_end":412899,"line_start":1343,"line_end":1343,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412901,"byte_end":412994,"line_start":1344,"line_end":1344,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":412996,"byte_end":412999,"line_start":1345,"line_end":1345,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413001,"byte_end":413023,"line_start":1346,"line_end":1346,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413025,"byte_end":413028,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413030,"byte_end":413103,"line_start":1348,"line_end":1348,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413105,"byte_end":413181,"line_start":1349,"line_end":1349,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413183,"byte_end":413242,"line_start":1350,"line_end":1350,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413244,"byte_end":413247,"line_start":1351,"line_end":1351,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413249,"byte_end":413271,"line_start":1352,"line_end":1352,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413273,"byte_end":413276,"line_start":1353,"line_end":1353,"column_start":2,"column_end":5}},{"value":"/ - [`.split()`] has the same splitting logic, but each yielded bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413278,"byte_end":413353,"line_start":1354,"line_end":1354,"column_start":2,"column_end":77}},{"value":"/   is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413355,"byte_end":413374,"line_start":1355,"line_end":1355,"column_start":2,"column_end":21}},{"value":"/ - [`.split_inclusive_mut()`] includes the matched bit in the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413376,"byte_end":413448,"line_start":1356,"line_end":1356,"column_start":2,"column_end":74}},{"value":"/   bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413450,"byte_end":413466,"line_start":1357,"line_end":1357,"column_start":2,"column_end":18}},{"value":"/ - [`.rsplit_mut()`] iterates from the back of the bit-slice instead of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413468,"byte_end":413542,"line_start":1358,"line_end":1358,"column_start":2,"column_end":76}},{"value":"/   the front.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413544,"byte_end":413560,"line_start":1359,"line_end":1359,"column_start":2,"column_end":18}},{"value":"/ - [`.splitn_mut()`] times out after `n` yields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413562,"byte_end":413613,"line_start":1360,"line_end":1360,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413615,"byte_end":413618,"line_start":1361,"line_end":1361,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413620,"byte_end":413635,"line_start":1362,"line_end":1362,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413637,"byte_end":413640,"line_start":1363,"line_end":1363,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413642,"byte_end":413653,"line_start":1364,"line_end":1364,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413655,"byte_end":413682,"line_start":1365,"line_end":1365,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413684,"byte_end":413687,"line_start":1366,"line_end":1366,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413689,"byte_end":413732,"line_start":1367,"line_end":1367,"column_start":2,"column_end":45}},{"value":"/ //                         ^     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413734,"byte_end":413772,"line_start":1368,"line_end":1368,"column_start":2,"column_end":40}},{"value":"/ for group in bits.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413774,"byte_end":413825,"line_start":1369,"line_end":1369,"column_start":2,"column_end":53}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413827,"byte_end":413852,"line_start":1370,"line_end":1370,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413854,"byte_end":413859,"line_start":1371,"line_end":1371,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413861,"byte_end":413907,"line_start":1372,"line_end":1372,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413909,"byte_end":413916,"line_start":1373,"line_end":1373,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413918,"byte_end":413921,"line_start":1374,"line_end":1374,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413923,"byte_end":413984,"line_start":1375,"line_end":1375,"column_start":2,"column_end":63}},{"value":"/ [`.rsplit_mut()`]: Self::rsplit_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":413986,"byte_end":414025,"line_start":1376,"line_end":1376,"column_start":2,"column_end":41}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414027,"byte_end":414056,"line_start":1377,"line_end":1377,"column_start":2,"column_end":31}},{"value":"/ [`.split_inclusive_mut()`]: Self::split_inclusive_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414058,"byte_end":414115,"line_start":1378,"line_end":1378,"column_start":2,"column_end":59}},{"value":"/ [`.splitn_mut()`]: Self::splitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414117,"byte_end":414156,"line_start":1379,"line_end":1379,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414158,"byte_end":414167,"line_start":1380,"line_end":1380,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3281},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415585,"byte_end":415600,"line_start":1424,"line_end":1424,"column_start":9,"column_end":24},"name":"split_inclusive","qualname":"<BitSlice<T, O>>::split_inclusive","value":"pub fn split_inclusive<F>(&Self, F) -> SplitInclusive<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over subslices separated by bits that match a predicate. Unlike\n `.split()`, this *does* include the matching bit as the last bit in the\n yielded bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over subslices separated by bits that match a predicate. Unlike","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414315,"byte_end":414391,"line_start":1386,"line_end":1386,"column_start":2,"column_end":78}},{"value":"/ `.split()`, this *does* include the matching bit as the last bit in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414393,"byte_end":414468,"line_start":1387,"line_end":1387,"column_start":2,"column_end":77}},{"value":"/ yielded bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414470,"byte_end":414492,"line_start":1388,"line_end":1388,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414494,"byte_end":414497,"line_start":1389,"line_end":1389,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414499,"byte_end":414514,"line_start":1390,"line_end":1390,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414516,"byte_end":414519,"line_start":1391,"line_end":1391,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_inclusive`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_inclusive)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414521,"byte_end":414626,"line_start":1392,"line_end":1392,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414628,"byte_end":414631,"line_start":1393,"line_end":1393,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414633,"byte_end":414655,"line_start":1394,"line_end":1394,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414657,"byte_end":414660,"line_start":1395,"line_end":1395,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414662,"byte_end":414735,"line_start":1396,"line_end":1396,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414737,"byte_end":414813,"line_start":1397,"line_end":1397,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414815,"byte_end":414874,"line_start":1398,"line_end":1398,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414876,"byte_end":414879,"line_start":1399,"line_end":1399,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414881,"byte_end":414903,"line_start":1400,"line_end":1400,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414905,"byte_end":414908,"line_start":1401,"line_end":1401,"column_start":2,"column_end":5}},{"value":"/ - [`.split_inclusive_mut()`] has the same splitting logic, but each","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414910,"byte_end":414981,"line_start":1402,"line_end":1402,"column_start":2,"column_end":73}},{"value":"/   yielded bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":414983,"byte_end":415018,"line_start":1403,"line_end":1403,"column_start":2,"column_end":37}},{"value":"/ - [`.split()`] does not include the matched bit in the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415020,"byte_end":415086,"line_start":1404,"line_end":1404,"column_start":2,"column_end":68}},{"value":"/   bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415088,"byte_end":415104,"line_start":1405,"line_end":1405,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415106,"byte_end":415109,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415111,"byte_end":415126,"line_start":1407,"line_end":1407,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415128,"byte_end":415131,"line_start":1408,"line_end":1408,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415133,"byte_end":415144,"line_start":1409,"line_end":1409,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415146,"byte_end":415173,"line_start":1410,"line_end":1410,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415175,"byte_end":415178,"line_start":1411,"line_end":1411,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415180,"byte_end":415216,"line_start":1412,"line_end":1412,"column_start":2,"column_end":38}},{"value":"/ //                     ^     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415218,"byte_end":415252,"line_start":1413,"line_end":1413,"column_start":2,"column_end":36}},{"value":"/ let mut iter = bits.split_inclusive(|_pos, bit| *bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415254,"byte_end":415312,"line_start":1414,"line_end":1414,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415314,"byte_end":415317,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415319,"byte_end":415372,"line_start":1416,"line_end":1416,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415374,"byte_end":415424,"line_start":1417,"line_end":1417,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415426,"byte_end":415461,"line_start":1418,"line_end":1418,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415463,"byte_end":415470,"line_start":1419,"line_end":1419,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415472,"byte_end":415475,"line_start":1420,"line_end":1420,"column_start":2,"column_end":5}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415477,"byte_end":415506,"line_start":1421,"line_end":1421,"column_start":2,"column_end":31}},{"value":"/ [`.split_inclusive_mut()`]: Self::split_inclusive_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415508,"byte_end":415565,"line_start":1422,"line_end":1422,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415567,"byte_end":415576,"line_start":1423,"line_end":1423,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3283},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417425,"byte_end":417444,"line_start":1474,"line_end":1474,"column_start":9,"column_end":28},"name":"split_inclusive_mut","qualname":"<BitSlice<T, O>>::split_inclusive_mut","value":"pub fn split_inclusive_mut<F>(&mut Self, F) -> SplitInclusiveMut<, T, O, F>\nwhere F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate. Unlike `.split_mut()`, this *does* include the matching bit\n as the last bit in the bit-slice.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415726,"byte_end":415792,"line_start":1429,"line_end":1429,"column_start":2,"column_end":68}},{"value":"/ predicate. Unlike `.split_mut()`, this *does* include the matching bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415794,"byte_end":415868,"line_start":1430,"line_end":1430,"column_start":2,"column_end":76}},{"value":"/ as the last bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415870,"byte_end":415907,"line_start":1431,"line_end":1431,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415909,"byte_end":415912,"line_start":1432,"line_end":1432,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415914,"byte_end":415989,"line_start":1433,"line_end":1433,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":415991,"byte_end":416066,"line_start":1434,"line_end":1434,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416068,"byte_end":416137,"line_start":1435,"line_end":1435,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416139,"byte_end":416213,"line_start":1436,"line_end":1436,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416215,"byte_end":416288,"line_start":1437,"line_end":1437,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416290,"byte_end":416307,"line_start":1438,"line_end":1438,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416309,"byte_end":416312,"line_start":1439,"line_end":1439,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416314,"byte_end":416329,"line_start":1440,"line_end":1440,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416331,"byte_end":416334,"line_start":1441,"line_end":1441,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_inclusive_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_inclusive_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416336,"byte_end":416449,"line_start":1442,"line_end":1442,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416451,"byte_end":416454,"line_start":1443,"line_end":1443,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416456,"byte_end":416478,"line_start":1444,"line_end":1444,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416480,"byte_end":416483,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416485,"byte_end":416558,"line_start":1446,"line_end":1446,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416560,"byte_end":416636,"line_start":1447,"line_end":1447,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416638,"byte_end":416697,"line_start":1448,"line_end":1448,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416699,"byte_end":416702,"line_start":1449,"line_end":1449,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416704,"byte_end":416726,"line_start":1450,"line_end":1450,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416728,"byte_end":416731,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ - [`.split_inclusive()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416733,"byte_end":416808,"line_start":1452,"line_end":1452,"column_start":2,"column_end":77}},{"value":"/   bit-slice is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416810,"byte_end":416839,"line_start":1453,"line_end":1453,"column_start":2,"column_end":31}},{"value":"/ - [`.split_mut()`] does not include the matched bit in the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416841,"byte_end":416911,"line_start":1454,"line_end":1454,"column_start":2,"column_end":72}},{"value":"/   bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416913,"byte_end":416929,"line_start":1455,"line_end":1455,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416931,"byte_end":416934,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416936,"byte_end":416951,"line_start":1457,"line_end":1457,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416953,"byte_end":416956,"line_start":1458,"line_end":1458,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416958,"byte_end":416969,"line_start":1459,"line_end":1459,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":416971,"byte_end":416998,"line_start":1460,"line_end":1460,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417000,"byte_end":417003,"line_start":1461,"line_end":1461,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 0, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417005,"byte_end":417045,"line_start":1462,"line_end":1462,"column_start":2,"column_end":42}},{"value":"/ //                         ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417047,"byte_end":417079,"line_start":1463,"line_end":1463,"column_start":2,"column_end":34}},{"value":"/ for group in bits.split_inclusive_mut(|pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417081,"byte_end":417150,"line_start":1464,"line_end":1464,"column_start":2,"column_end":71}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417152,"byte_end":417177,"line_start":1465,"line_end":1465,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417179,"byte_end":417184,"line_start":1466,"line_end":1466,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 0, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417186,"byte_end":417229,"line_start":1467,"line_end":1467,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417231,"byte_end":417238,"line_start":1468,"line_end":1468,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417240,"byte_end":417243,"line_start":1469,"line_end":1469,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitInclusiveMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417245,"byte_end":417315,"line_start":1470,"line_end":1470,"column_start":2,"column_end":72}},{"value":"/ [`.split_inclusive()`]: Self::split_inclusive","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417317,"byte_end":417366,"line_start":1471,"line_end":1471,"column_start":2,"column_end":51}},{"value":"/ [`.split_mut()`]: Self::split_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417368,"byte_end":417405,"line_start":1472,"line_end":1472,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417407,"byte_end":417416,"line_start":1473,"line_end":1473,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3285},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419910,"byte_end":419916,"line_start":1557,"line_end":1557,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<T, O>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, T, O, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over subslices separated by bits that match a predicate, from\n the back edge. The matched bit is *not* contained in the yielded\n bit-slices.","sig":null,"attributes":[{"value":"/ Iterates over subslices separated by bits that match a predicate, from","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417604,"byte_end":417678,"line_start":1484,"line_end":1484,"column_start":2,"column_end":76}},{"value":"/ the back edge. The matched bit is *not* contained in the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417680,"byte_end":417748,"line_start":1485,"line_end":1485,"column_start":2,"column_end":70}},{"value":"/ bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417750,"byte_end":417765,"line_start":1486,"line_end":1486,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417767,"byte_end":417770,"line_start":1487,"line_end":1487,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417772,"byte_end":417787,"line_start":1488,"line_end":1488,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417789,"byte_end":417792,"line_start":1489,"line_end":1489,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417794,"byte_end":417881,"line_start":1490,"line_end":1490,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417883,"byte_end":417886,"line_start":1491,"line_end":1491,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417888,"byte_end":417910,"line_start":1492,"line_end":1492,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417912,"byte_end":417915,"line_start":1493,"line_end":1493,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417917,"byte_end":417990,"line_start":1494,"line_end":1494,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":417992,"byte_end":418068,"line_start":1495,"line_end":1495,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418070,"byte_end":418129,"line_start":1496,"line_end":1496,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418131,"byte_end":418134,"line_start":1497,"line_end":1497,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418136,"byte_end":418158,"line_start":1498,"line_end":1498,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418160,"byte_end":418163,"line_start":1499,"line_end":1499,"column_start":2,"column_end":5}},{"value":"/ - [`.rsplit_mut()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418165,"byte_end":418235,"line_start":1500,"line_end":1500,"column_start":2,"column_end":72}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418237,"byte_end":418264,"line_start":1501,"line_end":1501,"column_start":2,"column_end":29}},{"value":"/ - [`.split()`] iterates from the front of the bit-slice instead of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418266,"byte_end":418340,"line_start":1502,"line_end":1502,"column_start":2,"column_end":76}},{"value":"/   back.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418342,"byte_end":418353,"line_start":1503,"line_end":1503,"column_start":2,"column_end":13}},{"value":"/ - [`.rsplitn()`] times out after `n` yields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418355,"byte_end":418403,"line_start":1504,"line_end":1504,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418405,"byte_end":418408,"line_start":1505,"line_end":1505,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418410,"byte_end":418425,"line_start":1506,"line_end":1506,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418427,"byte_end":418430,"line_start":1507,"line_end":1507,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418432,"byte_end":418443,"line_start":1508,"line_end":1508,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418445,"byte_end":418472,"line_start":1509,"line_end":1509,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418474,"byte_end":418477,"line_start":1510,"line_end":1510,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418479,"byte_end":418512,"line_start":1511,"line_end":1511,"column_start":2,"column_end":35}},{"value":"/ //                     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418514,"byte_end":418542,"line_start":1512,"line_end":1512,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.rsplit(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418544,"byte_end":418601,"line_start":1513,"line_end":1513,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418603,"byte_end":418606,"line_start":1514,"line_end":1514,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418608,"byte_end":418655,"line_start":1515,"line_end":1515,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418657,"byte_end":418707,"line_start":1516,"line_end":1516,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418709,"byte_end":418744,"line_start":1517,"line_end":1517,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418746,"byte_end":418753,"line_start":1518,"line_end":1518,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418755,"byte_end":418758,"line_start":1519,"line_end":1519,"column_start":2,"column_end":5}},{"value":"/ If the last bit is matched, then an empty bit-slice will be the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418760,"byte_end":418833,"line_start":1520,"line_end":1520,"column_start":2,"column_end":75}},{"value":"/ item yielded by the iterator. Similarly, if the first bit in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418835,"byte_end":418903,"line_start":1521,"line_end":1521,"column_start":2,"column_end":70}},{"value":"/ bit-slice matches, then an empty bit-slice will be the last item","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418905,"byte_end":418973,"line_start":1522,"line_end":1522,"column_start":2,"column_end":70}},{"value":"/ yielded.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418975,"byte_end":418987,"line_start":1523,"line_end":1523,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418989,"byte_end":418992,"line_start":1524,"line_end":1524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":418994,"byte_end":419005,"line_start":1525,"line_end":1525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419007,"byte_end":419034,"line_start":1526,"line_end":1526,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419036,"byte_end":419039,"line_start":1527,"line_end":1527,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419041,"byte_end":419071,"line_start":1528,"line_end":1528,"column_start":2,"column_end":32}},{"value":"/ //                     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419073,"byte_end":419101,"line_start":1529,"line_end":1529,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419103,"byte_end":419152,"line_start":1530,"line_end":1530,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419154,"byte_end":419157,"line_start":1531,"line_end":1531,"column_start":2,"column_end":5}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419159,"byte_end":419204,"line_start":1532,"line_end":1532,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419206,"byte_end":419256,"line_start":1533,"line_end":1533,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419258,"byte_end":419293,"line_start":1534,"line_end":1534,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419295,"byte_end":419302,"line_start":1535,"line_end":1535,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419304,"byte_end":419307,"line_start":1536,"line_end":1536,"column_start":2,"column_end":5}},{"value":"/ If two yielded bits are directly adjacent, then an empty bit-slice will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419309,"byte_end":419384,"line_start":1537,"line_end":1537,"column_start":2,"column_end":77}},{"value":"/ be yielded between them:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419386,"byte_end":419414,"line_start":1538,"line_end":1538,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419416,"byte_end":419419,"line_start":1539,"line_end":1539,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419421,"byte_end":419432,"line_start":1540,"line_end":1540,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419434,"byte_end":419461,"line_start":1541,"line_end":1541,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419463,"byte_end":419466,"line_start":1542,"line_end":1542,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419468,"byte_end":419501,"line_start":1543,"line_end":1543,"column_start":2,"column_end":35}},{"value":"/ //                  ^  ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419503,"byte_end":419531,"line_start":1544,"line_end":1544,"column_start":2,"column_end":30}},{"value":"/ let mut iter = bits.split(|_pos, bit| !*bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419533,"byte_end":419582,"line_start":1545,"line_end":1545,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419584,"byte_end":419587,"line_start":1546,"line_end":1546,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419589,"byte_end":419636,"line_start":1547,"line_end":1547,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419638,"byte_end":419683,"line_start":1548,"line_end":1548,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419685,"byte_end":419732,"line_start":1549,"line_end":1549,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419734,"byte_end":419769,"line_start":1550,"line_end":1550,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419771,"byte_end":419778,"line_start":1551,"line_end":1551,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419780,"byte_end":419783,"line_start":1552,"line_end":1552,"column_start":2,"column_end":5}},{"value":"/ [`.rsplitn()`]: Self::rsplitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419785,"byte_end":419818,"line_start":1553,"line_end":1553,"column_start":2,"column_end":35}},{"value":"/ [`.rsplit_mut()`]: Self::rsplit_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419820,"byte_end":419859,"line_start":1554,"line_end":1554,"column_start":2,"column_end":41}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419861,"byte_end":419890,"line_start":1555,"line_end":1555,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":419892,"byte_end":419901,"line_start":1556,"line_end":1556,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3287},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421768,"byte_end":421778,"line_start":1609,"line_end":1609,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<T, O>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate, from the back. The matched bit is *not* contained in the\n yielded bit-slices.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420026,"byte_end":420092,"line_start":1562,"line_end":1562,"column_start":2,"column_end":68}},{"value":"/ predicate, from the back. The matched bit is *not* contained in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420094,"byte_end":420165,"line_start":1563,"line_end":1563,"column_start":2,"column_end":73}},{"value":"/ yielded bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420167,"byte_end":420190,"line_start":1564,"line_end":1564,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420192,"byte_end":420195,"line_start":1565,"line_end":1565,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420197,"byte_end":420272,"line_start":1566,"line_end":1566,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420274,"byte_end":420349,"line_start":1567,"line_end":1567,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420351,"byte_end":420420,"line_start":1568,"line_end":1568,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420422,"byte_end":420496,"line_start":1569,"line_end":1569,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420498,"byte_end":420571,"line_start":1570,"line_end":1570,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420573,"byte_end":420590,"line_start":1571,"line_end":1571,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420592,"byte_end":420595,"line_start":1572,"line_end":1572,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420597,"byte_end":420612,"line_start":1573,"line_end":1573,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420614,"byte_end":420617,"line_start":1574,"line_end":1574,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420619,"byte_end":420714,"line_start":1575,"line_end":1575,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420716,"byte_end":420719,"line_start":1576,"line_end":1576,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420721,"byte_end":420743,"line_start":1577,"line_end":1577,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420745,"byte_end":420748,"line_start":1578,"line_end":1578,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420750,"byte_end":420823,"line_start":1579,"line_end":1579,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420825,"byte_end":420901,"line_start":1580,"line_end":1580,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420903,"byte_end":420962,"line_start":1581,"line_end":1581,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420964,"byte_end":420967,"line_start":1582,"line_end":1582,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420969,"byte_end":420991,"line_start":1583,"line_end":1583,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420993,"byte_end":420996,"line_start":1584,"line_end":1584,"column_start":2,"column_end":5}},{"value":"/ - [`.rsplit()`] has the same splitting logic, but each yielded bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":420998,"byte_end":421074,"line_start":1585,"line_end":1585,"column_start":2,"column_end":78}},{"value":"/   is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421076,"byte_end":421095,"line_start":1586,"line_end":1586,"column_start":2,"column_end":21}},{"value":"/ - [`.split_mut()`] iterates from the front of the bit-slice to the back.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421097,"byte_end":421173,"line_start":1587,"line_end":1587,"column_start":2,"column_end":78}},{"value":"/ - [`.rsplitn_mut()`] iterates from the front of the bit-slice to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421175,"byte_end":421247,"line_start":1588,"line_end":1588,"column_start":2,"column_end":74}},{"value":"/   back.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421249,"byte_end":421260,"line_start":1589,"line_end":1589,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421262,"byte_end":421265,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421267,"byte_end":421282,"line_start":1591,"line_end":1591,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421284,"byte_end":421287,"line_start":1592,"line_end":1592,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421289,"byte_end":421300,"line_start":1593,"line_end":1593,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421302,"byte_end":421329,"line_start":1594,"line_end":1594,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421331,"byte_end":421334,"line_start":1595,"line_end":1595,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421336,"byte_end":421379,"line_start":1596,"line_end":1596,"column_start":2,"column_end":45}},{"value":"/ //                         ^     ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421381,"byte_end":421419,"line_start":1597,"line_end":1597,"column_start":2,"column_end":40}},{"value":"/ for group in bits.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421421,"byte_end":421473,"line_start":1598,"line_end":1598,"column_start":2,"column_end":54}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421475,"byte_end":421500,"line_start":1599,"line_end":1599,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421502,"byte_end":421507,"line_start":1600,"line_end":1600,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421509,"byte_end":421555,"line_start":1601,"line_end":1601,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421557,"byte_end":421564,"line_start":1602,"line_end":1602,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421566,"byte_end":421569,"line_start":1603,"line_end":1603,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421571,"byte_end":421633,"line_start":1604,"line_end":1604,"column_start":2,"column_end":64}},{"value":"/ [`.rsplit()`]: Self::rsplit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421635,"byte_end":421666,"line_start":1605,"line_end":1605,"column_start":2,"column_end":33}},{"value":"/ [`.rsplitn_mut()`]: Self::rsplitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421668,"byte_end":421709,"line_start":1606,"line_end":1606,"column_start":2,"column_end":43}},{"value":"/ [`.split_mut()`]: Self::split_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421711,"byte_end":421748,"line_start":1607,"line_end":1607,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421750,"byte_end":421759,"line_start":1608,"line_end":1608,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3289},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423277,"byte_end":423283,"line_start":1654,"line_end":1654,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<T, O>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over subslices separated by bits that match a predicate, giving\n up after yielding `n` times. The `n`th yield contains the rest of the\n bit-slice. As with `.split()`, the yielded bit-slices do not contain the\n matched bit.","sig":null,"attributes":[{"value":"/ Iterates over subslices separated by bits that match a predicate, giving","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421910,"byte_end":421986,"line_start":1614,"line_end":1614,"column_start":2,"column_end":78}},{"value":"/ up after yielding `n` times. The `n`th yield contains the rest of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":421988,"byte_end":422061,"line_start":1615,"line_end":1615,"column_start":2,"column_end":75}},{"value":"/ bit-slice. As with `.split()`, the yielded bit-slices do not contain the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422063,"byte_end":422139,"line_start":1616,"line_end":1616,"column_start":2,"column_end":78}},{"value":"/ matched bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422141,"byte_end":422157,"line_start":1617,"line_end":1617,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422159,"byte_end":422162,"line_start":1618,"line_end":1618,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422164,"byte_end":422179,"line_start":1619,"line_end":1619,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422181,"byte_end":422184,"line_start":1620,"line_end":1620,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422186,"byte_end":422273,"line_start":1621,"line_end":1621,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422275,"byte_end":422278,"line_start":1622,"line_end":1622,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422280,"byte_end":422302,"line_start":1623,"line_end":1623,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422304,"byte_end":422307,"line_start":1624,"line_end":1624,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422309,"byte_end":422382,"line_start":1625,"line_end":1625,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422384,"byte_end":422460,"line_start":1626,"line_end":1626,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422462,"byte_end":422521,"line_start":1627,"line_end":1627,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422523,"byte_end":422526,"line_start":1628,"line_end":1628,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422528,"byte_end":422550,"line_start":1629,"line_end":1629,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422552,"byte_end":422555,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ - [`.splitn_mut()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422557,"byte_end":422627,"line_start":1631,"line_end":1631,"column_start":2,"column_end":72}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422629,"byte_end":422656,"line_start":1632,"line_end":1632,"column_start":2,"column_end":29}},{"value":"/ - [`.rsplitn()`] iterates from the back of the bit-slice instead of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422658,"byte_end":422733,"line_start":1633,"line_end":1633,"column_start":2,"column_end":77}},{"value":"/   front.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422735,"byte_end":422747,"line_start":1634,"line_end":1634,"column_start":2,"column_end":14}},{"value":"/ - [`.split()`] has the same splitting logic, but never times out.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422749,"byte_end":422818,"line_start":1635,"line_end":1635,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422820,"byte_end":422823,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422825,"byte_end":422840,"line_start":1637,"line_end":1637,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422842,"byte_end":422845,"line_start":1638,"line_end":1638,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422847,"byte_end":422858,"line_start":1639,"line_end":1639,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422860,"byte_end":422887,"line_start":1640,"line_end":1640,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422889,"byte_end":422892,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422894,"byte_end":422933,"line_start":1642,"line_end":1642,"column_start":2,"column_end":41}},{"value":"/ let mut iter = bits.splitn(2, |_pos, bit| *bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422935,"byte_end":422987,"line_start":1643,"line_end":1643,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422989,"byte_end":422992,"line_start":1644,"line_end":1644,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":422994,"byte_end":423044,"line_start":1645,"line_end":1645,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423046,"byte_end":423099,"line_start":1646,"line_end":1646,"column_start":2,"column_end":55}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423101,"byte_end":423136,"line_start":1647,"line_end":1647,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423138,"byte_end":423145,"line_start":1648,"line_end":1648,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423147,"byte_end":423150,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ [`.rsplitn()`]: Self::rsplitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423152,"byte_end":423185,"line_start":1650,"line_end":1650,"column_start":2,"column_end":35}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423187,"byte_end":423216,"line_start":1651,"line_end":1651,"column_start":2,"column_end":31}},{"value":"/ [`.splitn_mut()`]: Self::splitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423218,"byte_end":423257,"line_start":1652,"line_end":1652,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423259,"byte_end":423268,"line_start":1653,"line_end":1653,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3291},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425211,"byte_end":425221,"line_start":1706,"line_end":1706,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<T, O>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate, giving up after yielding `n` times. The `n`th yield contains\n the rest of the bit-slice. As with `.split_mut()`, the yielded\n bit-slices do not contain the matched bit.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423406,"byte_end":423472,"line_start":1659,"line_end":1659,"column_start":2,"column_end":68}},{"value":"/ predicate, giving up after yielding `n` times. The `n`th yield contains","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423474,"byte_end":423549,"line_start":1660,"line_end":1660,"column_start":2,"column_end":77}},{"value":"/ the rest of the bit-slice. As with `.split_mut()`, the yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423551,"byte_end":423617,"line_start":1661,"line_end":1661,"column_start":2,"column_end":68}},{"value":"/ bit-slices do not contain the matched bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423619,"byte_end":423665,"line_start":1662,"line_end":1662,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423667,"byte_end":423670,"line_start":1663,"line_end":1663,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423672,"byte_end":423747,"line_start":1664,"line_end":1664,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423749,"byte_end":423824,"line_start":1665,"line_end":1665,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423826,"byte_end":423895,"line_start":1666,"line_end":1666,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423897,"byte_end":423971,"line_start":1667,"line_end":1667,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":423973,"byte_end":424046,"line_start":1668,"line_end":1668,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424048,"byte_end":424065,"line_start":1669,"line_end":1669,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424067,"byte_end":424070,"line_start":1670,"line_end":1670,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424072,"byte_end":424087,"line_start":1671,"line_end":1671,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424089,"byte_end":424092,"line_start":1672,"line_end":1672,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424094,"byte_end":424189,"line_start":1673,"line_end":1673,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424191,"byte_end":424194,"line_start":1674,"line_end":1674,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424196,"byte_end":424218,"line_start":1675,"line_end":1675,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424220,"byte_end":424223,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424225,"byte_end":424298,"line_start":1677,"line_end":1677,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424300,"byte_end":424376,"line_start":1678,"line_end":1678,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424378,"byte_end":424437,"line_start":1679,"line_end":1679,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424439,"byte_end":424442,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424444,"byte_end":424466,"line_start":1681,"line_end":1681,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424468,"byte_end":424471,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ - [`.splitn()`] has the same splitting logic, but each yielded bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424473,"byte_end":424549,"line_start":1683,"line_end":1683,"column_start":2,"column_end":78}},{"value":"/   is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424551,"byte_end":424570,"line_start":1684,"line_end":1684,"column_start":2,"column_end":21}},{"value":"/ - [`.rsplitn_mut()`] iterates from the back of the bit-slice instead of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424572,"byte_end":424647,"line_start":1685,"line_end":1685,"column_start":2,"column_end":77}},{"value":"/   the front.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424649,"byte_end":424665,"line_start":1686,"line_end":1686,"column_start":2,"column_end":18}},{"value":"/ - [`.split_mut()`] has the same splitting logic, but never times out.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424667,"byte_end":424740,"line_start":1687,"line_end":1687,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424742,"byte_end":424745,"line_start":1688,"line_end":1688,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424747,"byte_end":424762,"line_start":1689,"line_end":1689,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424764,"byte_end":424767,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424769,"byte_end":424780,"line_start":1691,"line_end":1691,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424782,"byte_end":424809,"line_start":1692,"line_end":1692,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424811,"byte_end":424814,"line_start":1693,"line_end":1693,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424816,"byte_end":424859,"line_start":1694,"line_end":1694,"column_start":2,"column_end":45}},{"value":"/ for group in bits.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424861,"byte_end":424916,"line_start":1695,"line_end":1695,"column_start":2,"column_end":57}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424918,"byte_end":424943,"line_start":1696,"line_end":1696,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424945,"byte_end":424950,"line_start":1697,"line_end":1697,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 1, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":424952,"byte_end":424998,"line_start":1698,"line_end":1698,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425000,"byte_end":425007,"line_start":1699,"line_end":1699,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425009,"byte_end":425012,"line_start":1700,"line_end":1700,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitNMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425014,"byte_end":425076,"line_start":1701,"line_end":1701,"column_start":2,"column_end":64}},{"value":"/ [`.rsplitn_mut()`]: Self::rsplitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425078,"byte_end":425119,"line_start":1702,"line_end":1702,"column_start":2,"column_end":43}},{"value":"/ [`.split_mut()`]: Self::split_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425121,"byte_end":425158,"line_start":1703,"line_end":1703,"column_start":2,"column_end":39}},{"value":"/ [`.splitn()`]: Self::splitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425160,"byte_end":425191,"line_start":1704,"line_end":1704,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425193,"byte_end":425202,"line_start":1705,"line_end":1705,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3293},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426798,"byte_end":426805,"line_start":1752,"line_end":1752,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<T, O>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate from the back edge, giving up after yielding `n` times. The\n `n`th yield contains the rest of the bit-slice. As with `.split_mut()`,\n the yielded bit-slices do not contain the matched bit.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425366,"byte_end":425432,"line_start":1711,"line_end":1711,"column_start":2,"column_end":68}},{"value":"/ predicate from the back edge, giving up after yielding `n` times. The","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425434,"byte_end":425507,"line_start":1712,"line_end":1712,"column_start":2,"column_end":75}},{"value":"/ `n`th yield contains the rest of the bit-slice. As with `.split_mut()`,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425509,"byte_end":425584,"line_start":1713,"line_end":1713,"column_start":2,"column_end":77}},{"value":"/ the yielded bit-slices do not contain the matched bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425586,"byte_end":425644,"line_start":1714,"line_end":1714,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425646,"byte_end":425649,"line_start":1715,"line_end":1715,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425651,"byte_end":425666,"line_start":1716,"line_end":1716,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425668,"byte_end":425671,"line_start":1717,"line_end":1717,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425673,"byte_end":425762,"line_start":1718,"line_end":1718,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425764,"byte_end":425767,"line_start":1719,"line_end":1719,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425769,"byte_end":425791,"line_start":1720,"line_end":1720,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425793,"byte_end":425796,"line_start":1721,"line_end":1721,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425798,"byte_end":425871,"line_start":1722,"line_end":1722,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425873,"byte_end":425949,"line_start":1723,"line_end":1723,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":425951,"byte_end":426010,"line_start":1724,"line_end":1724,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426012,"byte_end":426015,"line_start":1725,"line_end":1725,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426017,"byte_end":426039,"line_start":1726,"line_end":1726,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426041,"byte_end":426044,"line_start":1727,"line_end":1727,"column_start":2,"column_end":5}},{"value":"/ - [`.rsplitn_mut()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426046,"byte_end":426117,"line_start":1728,"line_end":1728,"column_start":2,"column_end":73}},{"value":"/   bit-slice is mutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426119,"byte_end":426146,"line_start":1729,"line_end":1729,"column_start":2,"column_end":29}},{"value":"/ - [`.splitn()`]: iterates from the front of the bit-slice instead of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426148,"byte_end":426224,"line_start":1730,"line_end":1730,"column_start":2,"column_end":78}},{"value":"/   back.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426226,"byte_end":426237,"line_start":1731,"line_end":1731,"column_start":2,"column_end":13}},{"value":"/ - [`.rsplit()`] has the same splitting logic, but never times out.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426239,"byte_end":426309,"line_start":1732,"line_end":1732,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426311,"byte_end":426314,"line_start":1733,"line_end":1733,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426316,"byte_end":426331,"line_start":1734,"line_end":1734,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426333,"byte_end":426336,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426338,"byte_end":426349,"line_start":1736,"line_end":1736,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426351,"byte_end":426378,"line_start":1737,"line_end":1737,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426380,"byte_end":426383,"line_start":1738,"line_end":1738,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426385,"byte_end":426421,"line_start":1739,"line_end":1739,"column_start":2,"column_end":38}},{"value":"/ //                        ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426423,"byte_end":426454,"line_start":1740,"line_end":1740,"column_start":2,"column_end":33}},{"value":"/ let mut iter = bits.rsplitn(2, |_pos, bit| *bit);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426456,"byte_end":426509,"line_start":1741,"line_end":1741,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426511,"byte_end":426514,"line_start":1742,"line_end":1742,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426516,"byte_end":426563,"line_start":1743,"line_end":1743,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426565,"byte_end":426618,"line_start":1744,"line_end":1744,"column_start":2,"column_end":55}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426620,"byte_end":426655,"line_start":1745,"line_end":1745,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426657,"byte_end":426664,"line_start":1746,"line_end":1746,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426666,"byte_end":426669,"line_start":1747,"line_end":1747,"column_start":2,"column_end":5}},{"value":"/ [`.rsplit()`]: Self::rsplit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426671,"byte_end":426702,"line_start":1748,"line_end":1748,"column_start":2,"column_end":33}},{"value":"/ [`.rsplitn_mut()`]: Self::rsplitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426704,"byte_end":426745,"line_start":1749,"line_end":1749,"column_start":2,"column_end":43}},{"value":"/ [`.splitn()`]: Self::splitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426747,"byte_end":426778,"line_start":1750,"line_end":1750,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426780,"byte_end":426789,"line_start":1751,"line_end":1751,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3295},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428835,"byte_end":428846,"line_start":1805,"line_end":1805,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<T, O>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, T, O, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Iterates over mutable subslices separated by bits that match a\n predicate from the back edge, giving up after yielding `n` times. The\n `n`th yield contains the rest of the bit-slice. As with `.split_mut()`,\n the yielded bit-slices do not contain the matched bit.","sig":null,"attributes":[{"value":"/ Iterates over mutable subslices separated by bits that match a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426930,"byte_end":426996,"line_start":1757,"line_end":1757,"column_start":2,"column_end":68}},{"value":"/ predicate from the back edge, giving up after yielding `n` times. The","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":426998,"byte_end":427071,"line_start":1758,"line_end":1758,"column_start":2,"column_end":75}},{"value":"/ `n`th yield contains the rest of the bit-slice. As with `.split_mut()`,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427073,"byte_end":427148,"line_start":1759,"line_end":1759,"column_start":2,"column_end":77}},{"value":"/ the yielded bit-slices do not contain the matched bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427150,"byte_end":427208,"line_start":1760,"line_end":1760,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427210,"byte_end":427213,"line_start":1761,"line_end":1761,"column_start":2,"column_end":5}},{"value":"/ Iterators do not require that each yielded item is destroyed before the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427215,"byte_end":427290,"line_start":1762,"line_end":1762,"column_start":2,"column_end":77}},{"value":"/ next is produced. This means that each bit-slice yielded must be marked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427292,"byte_end":427367,"line_start":1763,"line_end":1763,"column_start":2,"column_end":77}},{"value":"/ as aliased. If you are using this in a loop that does not collect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427369,"byte_end":427438,"line_start":1764,"line_end":1764,"column_start":2,"column_end":71}},{"value":"/ multiple yielded subslices for the same scope, then you can remove the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427440,"byte_end":427514,"line_start":1765,"line_end":1765,"column_start":2,"column_end":76}},{"value":"/ alias marking by calling the (`unsafe`) method [`.remove_alias()`] on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427516,"byte_end":427589,"line_start":1766,"line_end":1766,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427591,"byte_end":427608,"line_start":1767,"line_end":1767,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427610,"byte_end":427613,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427615,"byte_end":427630,"line_start":1769,"line_end":1769,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427632,"byte_end":427635,"line_start":1770,"line_end":1770,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427637,"byte_end":427734,"line_start":1771,"line_end":1771,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427736,"byte_end":427739,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427741,"byte_end":427763,"line_start":1773,"line_end":1773,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427765,"byte_end":427768,"line_start":1774,"line_end":1774,"column_start":2,"column_end":5}},{"value":"/ The predicate function receives the index being tested as well as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427770,"byte_end":427843,"line_start":1775,"line_end":1775,"column_start":2,"column_end":75}},{"value":"/ bit value at that index. This allows the predicate to have more than one","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427845,"byte_end":427921,"line_start":1776,"line_end":1776,"column_start":2,"column_end":78}},{"value":"/ bit of information about the bit-slice being traversed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427923,"byte_end":427982,"line_start":1777,"line_end":1777,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427984,"byte_end":427987,"line_start":1778,"line_end":1778,"column_start":2,"column_end":5}},{"value":"/ ## Sibling Methods","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":427989,"byte_end":428011,"line_start":1779,"line_end":1779,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428013,"byte_end":428016,"line_start":1780,"line_end":1780,"column_start":2,"column_end":5}},{"value":"/ - [`.rsplitn()`] has the same splitting logic, but each yielded","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428018,"byte_end":428085,"line_start":1781,"line_end":1781,"column_start":2,"column_end":69}},{"value":"/   bit-slice is immutable.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428087,"byte_end":428116,"line_start":1782,"line_end":1782,"column_start":2,"column_end":31}},{"value":"/ - [`.splitn_mut()`] iterates from the front of the bit-slice instead of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428118,"byte_end":428193,"line_start":1783,"line_end":1783,"column_start":2,"column_end":77}},{"value":"/   the back.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428195,"byte_end":428210,"line_start":1784,"line_end":1784,"column_start":2,"column_end":17}},{"value":"/ - [`.rsplit_mut()`] has the same splitting logic, but never times out.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428212,"byte_end":428286,"line_start":1785,"line_end":1785,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428288,"byte_end":428291,"line_start":1786,"line_end":1786,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428293,"byte_end":428308,"line_start":1787,"line_end":1787,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428310,"byte_end":428313,"line_start":1788,"line_end":1788,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428315,"byte_end":428326,"line_start":1789,"line_end":1789,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428328,"byte_end":428355,"line_start":1790,"line_end":1790,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428357,"byte_end":428360,"line_start":1791,"line_end":1791,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 0, 1, 0, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428362,"byte_end":428414,"line_start":1792,"line_end":1792,"column_start":2,"column_end":54}},{"value":"/ for group in bits.rsplitn_mut(2, |_idx, bit| *bit) {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428416,"byte_end":428472,"line_start":1793,"line_end":1793,"column_start":2,"column_end":58}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428474,"byte_end":428499,"line_start":1794,"line_end":1794,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428501,"byte_end":428506,"line_start":1795,"line_end":1795,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 0, 0, 1, 1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428508,"byte_end":428563,"line_start":1796,"line_end":1796,"column_start":2,"column_end":57}},{"value":"/ //                     ^ group 2         ^ group 1","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428565,"byte_end":428619,"line_start":1797,"line_end":1797,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428621,"byte_end":428628,"line_start":1798,"line_end":1798,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428630,"byte_end":428633,"line_start":1799,"line_end":1799,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitNMut::remove_alias","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428635,"byte_end":428698,"line_start":1800,"line_end":1800,"column_start":2,"column_end":65}},{"value":"/ [`.rsplitn()`]: Self::rsplitn","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428700,"byte_end":428733,"line_start":1801,"line_end":1801,"column_start":2,"column_end":35}},{"value":"/ [`.rsplit_mut()`]: Self::rsplit_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428735,"byte_end":428774,"line_start":1802,"line_end":1802,"column_start":2,"column_end":41}},{"value":"/ [`.splitn_mut()`]: Self::splitn_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428776,"byte_end":428815,"line_start":1803,"line_end":1803,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428817,"byte_end":428826,"line_start":1804,"line_end":1804,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3297},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429721,"byte_end":429729,"line_start":1831,"line_end":1831,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<T, O>>::contains","value":"pub fn contains<T2, O2>(&Self, &BitSlice<T2, O2>) -> bool where T2: BitStore,\nO2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Tests if the bit-slice contains the given sequence anywhere within it.","sig":null,"attributes":[{"value":"/ Tests if the bit-slice contains the given sequence anywhere within it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":428993,"byte_end":429067,"line_start":1810,"line_end":1810,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429069,"byte_end":429072,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ This scans over `self.windows(other.len())` until one of the windows","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429074,"byte_end":429146,"line_start":1812,"line_end":1812,"column_start":2,"column_end":74}},{"value":"/ matches. The search key does not need to share type parameters with the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429148,"byte_end":429223,"line_start":1813,"line_end":1813,"column_start":2,"column_end":77}},{"value":"/ bit-slice being tested, as the comparison is bit-wise. However, sharing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429225,"byte_end":429300,"line_start":1814,"line_end":1814,"column_start":2,"column_end":77}},{"value":"/ type parameters will accelerate the comparison.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429302,"byte_end":429353,"line_start":1815,"line_end":1815,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429355,"byte_end":429358,"line_start":1816,"line_end":1816,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429360,"byte_end":429375,"line_start":1817,"line_end":1817,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429377,"byte_end":429380,"line_start":1818,"line_end":1818,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/std/primitive.slice.html#method.contains)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429382,"byte_end":429473,"line_start":1819,"line_end":1819,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429475,"byte_end":429478,"line_start":1820,"line_end":1820,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429480,"byte_end":429495,"line_start":1821,"line_end":1821,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429497,"byte_end":429500,"line_start":1822,"line_end":1822,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429502,"byte_end":429513,"line_start":1823,"line_end":1823,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429515,"byte_end":429542,"line_start":1824,"line_end":1824,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429544,"byte_end":429547,"line_start":1825,"line_end":1825,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 0, 1, 1, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429549,"byte_end":429594,"line_start":1826,"line_end":1826,"column_start":2,"column_end":47}},{"value":"/ assert!( bits.contains(bits![0, 1, 1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429596,"byte_end":429643,"line_start":1827,"line_end":1827,"column_start":2,"column_end":49}},{"value":"/ assert!(!bits.contains(bits![1, 0, 0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429645,"byte_end":429692,"line_start":1828,"line_end":1828,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429694,"byte_end":429701,"line_start":1829,"line_end":1829,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429703,"byte_end":429712,"line_start":1830,"line_end":1830,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430792,"byte_end":430803,"line_start":1871,"line_end":1871,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<T, O>>::starts_with","value":"pub fn starts_with<T2, O2>(&Self, &BitSlice<T2, O2>) -> bool where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Tests if the bit-slice begins with the given sequence.","sig":null,"attributes":[{"value":"/ Tests if the bit-slice begins with the given sequence.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429916,"byte_end":429974,"line_start":1840,"line_end":1840,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429976,"byte_end":429979,"line_start":1841,"line_end":1841,"column_start":2,"column_end":5}},{"value":"/ The search key does not need to share type parameters with the bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":429981,"byte_end":430057,"line_start":1842,"line_end":1842,"column_start":2,"column_end":78}},{"value":"/ being tested, as the comparison is bit-wise. However, sharing type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430059,"byte_end":430129,"line_start":1843,"line_end":1843,"column_start":2,"column_end":72}},{"value":"/ parameters will accelerate the comparison.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430131,"byte_end":430177,"line_start":1844,"line_end":1844,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430179,"byte_end":430182,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430184,"byte_end":430199,"line_start":1846,"line_end":1846,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430201,"byte_end":430204,"line_start":1847,"line_end":1847,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430206,"byte_end":430303,"line_start":1848,"line_end":1848,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430305,"byte_end":430308,"line_start":1849,"line_end":1849,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430310,"byte_end":430325,"line_start":1850,"line_end":1850,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430327,"byte_end":430330,"line_start":1851,"line_end":1851,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430332,"byte_end":430343,"line_start":1852,"line_end":1852,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430345,"byte_end":430372,"line_start":1853,"line_end":1853,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430374,"byte_end":430377,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430379,"byte_end":430412,"line_start":1855,"line_end":1855,"column_start":2,"column_end":35}},{"value":"/ assert!( bits.starts_with(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430414,"byte_end":430458,"line_start":1856,"line_end":1856,"column_start":2,"column_end":46}},{"value":"/ assert!(!bits.starts_with(bits![1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430460,"byte_end":430504,"line_start":1857,"line_end":1857,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430506,"byte_end":430513,"line_start":1858,"line_end":1858,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430515,"byte_end":430518,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ This always returns `true` if the needle is empty:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430520,"byte_end":430574,"line_start":1860,"line_end":1860,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430576,"byte_end":430579,"line_start":1861,"line_end":1861,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430581,"byte_end":430592,"line_start":1862,"line_end":1862,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430594,"byte_end":430621,"line_start":1863,"line_end":1863,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430623,"byte_end":430626,"line_start":1864,"line_end":1864,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430628,"byte_end":430658,"line_start":1865,"line_end":1865,"column_start":2,"column_end":32}},{"value":"/ let empty = bits![];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430660,"byte_end":430684,"line_start":1866,"line_end":1866,"column_start":2,"column_end":26}},{"value":"/ assert!(bits.starts_with(empty));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430686,"byte_end":430723,"line_start":1867,"line_end":1867,"column_start":2,"column_end":39}},{"value":"/ assert!(empty.starts_with(empty));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430725,"byte_end":430763,"line_start":1868,"line_end":1868,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430765,"byte_end":430772,"line_start":1869,"line_end":1869,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430774,"byte_end":430783,"line_start":1870,"line_end":1870,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3305},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431845,"byte_end":431854,"line_start":1912,"line_end":1912,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<T, O>>::ends_with","value":"pub fn ends_with<T2, O2>(&Self, &BitSlice<T2, O2>) -> bool where T2: BitStore,\nO2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Tests if the bit-slice ends with the given sequence.","sig":null,"attributes":[{"value":"/ Tests if the bit-slice ends with the given sequence.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":430983,"byte_end":431039,"line_start":1881,"line_end":1881,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431041,"byte_end":431044,"line_start":1882,"line_end":1882,"column_start":2,"column_end":5}},{"value":"/ The search key does not need to share type parameters with the bit-slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431046,"byte_end":431122,"line_start":1883,"line_end":1883,"column_start":2,"column_end":78}},{"value":"/ being tested, as the comparison is bit-wise. However, sharing type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431124,"byte_end":431194,"line_start":1884,"line_end":1884,"column_start":2,"column_end":72}},{"value":"/ parameters will accelerate the comparison.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431196,"byte_end":431242,"line_start":1885,"line_end":1885,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431244,"byte_end":431247,"line_start":1886,"line_end":1886,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431249,"byte_end":431264,"line_start":1887,"line_end":1887,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431266,"byte_end":431269,"line_start":1888,"line_end":1888,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431271,"byte_end":431364,"line_start":1889,"line_end":1889,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431366,"byte_end":431369,"line_start":1890,"line_end":1890,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431371,"byte_end":431386,"line_start":1891,"line_end":1891,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431388,"byte_end":431391,"line_start":1892,"line_end":1892,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431393,"byte_end":431404,"line_start":1893,"line_end":1893,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431406,"byte_end":431433,"line_start":1894,"line_end":1894,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431435,"byte_end":431438,"line_start":1895,"line_end":1895,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431440,"byte_end":431473,"line_start":1896,"line_end":1896,"column_start":2,"column_end":35}},{"value":"/ assert!( bits.ends_with(bits![1, 0]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431475,"byte_end":431517,"line_start":1897,"line_end":1897,"column_start":2,"column_end":44}},{"value":"/ assert!(!bits.ends_with(bits![0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431519,"byte_end":431561,"line_start":1898,"line_end":1898,"column_start":2,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431563,"byte_end":431570,"line_start":1899,"line_end":1899,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431572,"byte_end":431575,"line_start":1900,"line_end":1900,"column_start":2,"column_end":5}},{"value":"/ This always returns `true` if the needle is empty:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431577,"byte_end":431631,"line_start":1901,"line_end":1901,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431633,"byte_end":431636,"line_start":1902,"line_end":1902,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431638,"byte_end":431649,"line_start":1903,"line_end":1903,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431651,"byte_end":431678,"line_start":1904,"line_end":1904,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431680,"byte_end":431683,"line_start":1905,"line_end":1905,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431685,"byte_end":431715,"line_start":1906,"line_end":1906,"column_start":2,"column_end":32}},{"value":"/ let empty = bits![];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431717,"byte_end":431741,"line_start":1907,"line_end":1907,"column_start":2,"column_end":26}},{"value":"/ assert!(bits.ends_with(empty));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431743,"byte_end":431778,"line_start":1908,"line_end":1908,"column_start":2,"column_end":37}},{"value":"/ assert!(empty.ends_with(empty));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431780,"byte_end":431816,"line_start":1909,"line_end":1909,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431818,"byte_end":431825,"line_start":1910,"line_end":1910,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":431827,"byte_end":431836,"line_start":1911,"line_end":1911,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3309},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433031,"byte_end":433043,"line_start":1951,"line_end":1951,"column_start":9,"column_end":21},"name":"strip_prefix","qualname":"<BitSlice<T, O>>::strip_prefix","value":"pub fn strip_prefix<T2, O2>(&Self, &BitSlice<T2, O2>) -> Option<&Self> where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Removes a prefix bit-slice, if present.","sig":null,"attributes":[{"value":"/ Removes a prefix bit-slice, if present.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432047,"byte_end":432090,"line_start":1922,"line_end":1922,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432092,"byte_end":432095,"line_start":1923,"line_end":1923,"column_start":2,"column_end":5}},{"value":"/ Like [`.starts_with()`], the search key does not need to share type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432097,"byte_end":432168,"line_start":1924,"line_end":1924,"column_start":2,"column_end":73}},{"value":"/ parameters with the bit-slice being stripped. If","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432170,"byte_end":432222,"line_start":1925,"line_end":1925,"column_start":2,"column_end":54}},{"value":"/ `self.starts_with(suffix)`, then this returns `Some(&self[prefix.len()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432224,"byte_end":432298,"line_start":1926,"line_end":1926,"column_start":2,"column_end":76}},{"value":"/ ..])`, otherwise it returns `None`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432300,"byte_end":432339,"line_start":1927,"line_end":1927,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432341,"byte_end":432344,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432346,"byte_end":432361,"line_start":1929,"line_end":1929,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432363,"byte_end":432366,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ [`slice::strip_prefix`](https://doc.rust-lang.org/std/primitive.slice.html#method.strip_prefix)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432368,"byte_end":432467,"line_start":1931,"line_end":1931,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432469,"byte_end":432472,"line_start":1932,"line_end":1932,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432474,"byte_end":432496,"line_start":1933,"line_end":1933,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432498,"byte_end":432501,"line_start":1934,"line_end":1934,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` does not support pattern searches; instead, it permits `self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432503,"byte_end":432579,"line_start":1935,"line_end":1935,"column_start":2,"column_end":78}},{"value":"/ and `prefix` to differ in type parameters.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432581,"byte_end":432627,"line_start":1936,"line_end":1936,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432629,"byte_end":432632,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432634,"byte_end":432649,"line_start":1938,"line_end":1938,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432651,"byte_end":432654,"line_start":1939,"line_end":1939,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432656,"byte_end":432667,"line_start":1940,"line_end":1940,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432669,"byte_end":432696,"line_start":1941,"line_end":1941,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432698,"byte_end":432701,"line_start":1942,"line_end":1942,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432703,"byte_end":432751,"line_start":1943,"line_end":1943,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bits.strip_prefix(bits![0, 1]).unwrap(), bits[2 ..]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432753,"byte_end":432821,"line_start":1944,"line_end":1944,"column_start":2,"column_end":70}},{"value":"/ assert_eq!(bits.strip_prefix(bits![0, 1, 0, 0,]).unwrap(), bits[4 ..]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432823,"byte_end":432898,"line_start":1945,"line_end":1945,"column_start":2,"column_end":77}},{"value":"/ assert!(bits.strip_prefix(bits![1, 0]).is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432900,"byte_end":432954,"line_start":1946,"line_end":1946,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432956,"byte_end":432963,"line_start":1947,"line_end":1947,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432965,"byte_end":432968,"line_start":1948,"line_end":1948,"column_start":2,"column_end":5}},{"value":"/ [`.starts_with()`]: Self::starts_with","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":432970,"byte_end":433011,"line_start":1949,"line_end":1949,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433013,"byte_end":433022,"line_start":1950,"line_end":1950,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3312},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434233,"byte_end":434245,"line_start":1996,"line_end":1996,"column_start":9,"column_end":21},"name":"strip_suffix","qualname":"<BitSlice<T, O>>::strip_suffix","value":"pub fn strip_suffix<T2, O2>(&Self, &BitSlice<T2, O2>) -> Option<&Self> where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Removes a suffix bit-slice, if present.","sig":null,"attributes":[{"value":"/ Removes a suffix bit-slice, if present.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433244,"byte_end":433287,"line_start":1967,"line_end":1967,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433289,"byte_end":433292,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ Like [`.ends_with()`], the search key does not need to share type","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433294,"byte_end":433363,"line_start":1969,"line_end":1969,"column_start":2,"column_end":71}},{"value":"/ parameters with the bit-slice being stripped. If","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433365,"byte_end":433417,"line_start":1970,"line_end":1970,"column_start":2,"column_end":54}},{"value":"/ `self.ends_with(suffix)`, then this returns `Some(&self[.. self.len() -","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433419,"byte_end":433494,"line_start":1971,"line_end":1971,"column_start":2,"column_end":77}},{"value":"/ suffix.len()])`, otherwise it returns `None`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433496,"byte_end":433545,"line_start":1972,"line_end":1972,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433547,"byte_end":433550,"line_start":1973,"line_end":1973,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433552,"byte_end":433567,"line_start":1974,"line_end":1974,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433569,"byte_end":433572,"line_start":1975,"line_end":1975,"column_start":2,"column_end":5}},{"value":"/ [`slice::strip_suffix`](https://doc.rust-lang.org/std/primitive.slice.html#method.strip_suffix)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433574,"byte_end":433673,"line_start":1976,"line_end":1976,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433675,"byte_end":433678,"line_start":1977,"line_end":1977,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433680,"byte_end":433702,"line_start":1978,"line_end":1978,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433704,"byte_end":433707,"line_start":1979,"line_end":1979,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` does not support pattern searches; instead, it permits `self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433709,"byte_end":433785,"line_start":1980,"line_end":1980,"column_start":2,"column_end":78}},{"value":"/ and `suffix` to differ in type parameters.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433787,"byte_end":433833,"line_start":1981,"line_end":1981,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433835,"byte_end":433838,"line_start":1982,"line_end":1982,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433840,"byte_end":433855,"line_start":1983,"line_end":1983,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433857,"byte_end":433860,"line_start":1984,"line_end":1984,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433862,"byte_end":433873,"line_start":1985,"line_end":1985,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433875,"byte_end":433902,"line_start":1986,"line_end":1986,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433904,"byte_end":433907,"line_start":1987,"line_end":1987,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433909,"byte_end":433957,"line_start":1988,"line_end":1988,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bits.strip_suffix(bits![1, 0]).unwrap(), bits[.. 7]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":433959,"byte_end":434027,"line_start":1989,"line_end":1989,"column_start":2,"column_end":70}},{"value":"/ assert_eq!(bits.strip_suffix(bits![0, 1, 1, 0]).unwrap(), bits[.. 5]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434029,"byte_end":434103,"line_start":1990,"line_end":1990,"column_start":2,"column_end":76}},{"value":"/ assert!(bits.strip_suffix(bits![0, 1]).is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434105,"byte_end":434159,"line_start":1991,"line_end":1991,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434161,"byte_end":434168,"line_start":1992,"line_end":1992,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434170,"byte_end":434173,"line_start":1993,"line_end":1993,"column_start":2,"column_end":5}},{"value":"/ [`.ends_with()`]: Self::ends_with.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434175,"byte_end":434213,"line_start":1994,"line_end":1994,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434215,"byte_end":434224,"line_start":1995,"line_end":1995,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3315},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435230,"byte_end":435241,"line_start":2037,"line_end":2037,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<T, O>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the contents of a bit-slice to the left (towards the zero\n index).","sig":null,"attributes":[{"value":"/ Rotates the contents of a bit-slice to the left (towards the zero","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434457,"byte_end":434526,"line_start":2012,"line_end":2012,"column_start":2,"column_end":71}},{"value":"/ index).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434528,"byte_end":434539,"line_start":2013,"line_end":2013,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434541,"byte_end":434544,"line_start":2014,"line_end":2014,"column_start":2,"column_end":5}},{"value":"/ This essentially splits the bit-slice at `by`, then exchanges the two","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434546,"byte_end":434619,"line_start":2015,"line_end":2015,"column_start":2,"column_end":75}},{"value":"/ pieces. `self[.. by]` becomes the first section, and is then followed by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434621,"byte_end":434697,"line_start":2016,"line_end":2016,"column_start":2,"column_end":78}},{"value":"/ `self[.. by]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434699,"byte_end":434717,"line_start":2017,"line_end":2017,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434719,"byte_end":434722,"line_start":2018,"line_end":2018,"column_start":2,"column_end":5}},{"value":"/ The implementation is batch-accelerated where possible. It should have a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434724,"byte_end":434800,"line_start":2019,"line_end":2019,"column_start":2,"column_end":78}},{"value":"/ runtime complexity much lower than `O(by)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434802,"byte_end":434849,"line_start":2020,"line_end":2020,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434851,"byte_end":434854,"line_start":2021,"line_end":2021,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434856,"byte_end":434871,"line_start":2022,"line_end":2022,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434873,"byte_end":434876,"line_start":2023,"line_end":2023,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_left)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434878,"byte_end":434975,"line_start":2024,"line_end":2024,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434977,"byte_end":434980,"line_start":2025,"line_end":2025,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434982,"byte_end":434997,"line_start":2026,"line_end":2026,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":434999,"byte_end":435002,"line_start":2027,"line_end":2027,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435004,"byte_end":435015,"line_start":2028,"line_end":2028,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435017,"byte_end":435044,"line_start":2029,"line_end":2029,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435046,"byte_end":435049,"line_start":2030,"line_end":2030,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435051,"byte_end":435094,"line_start":2031,"line_end":2031,"column_start":2,"column_end":45}},{"value":"/ //      split occurs here ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435096,"byte_end":435127,"line_start":2032,"line_end":2032,"column_start":2,"column_end":33}},{"value":"/ bits.rotate_left(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435129,"byte_end":435153,"line_start":2033,"line_end":2033,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 0, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435155,"byte_end":435201,"line_start":2034,"line_end":2034,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435203,"byte_end":435210,"line_start":2035,"line_end":2035,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435212,"byte_end":435221,"line_start":2036,"line_end":2036,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436636,"byte_end":436648,"line_start":2085,"line_end":2085,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<T, O>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the contents of a bit-slice to the right (away from the zero\n index).","sig":null,"attributes":[{"value":"/ Rotates the contents of a bit-slice to the right (away from the zero","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435826,"byte_end":435898,"line_start":2060,"line_end":2060,"column_start":2,"column_end":74}},{"value":"/ index).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435900,"byte_end":435911,"line_start":2061,"line_end":2061,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435913,"byte_end":435916,"line_start":2062,"line_end":2062,"column_start":2,"column_end":5}},{"value":"/ This essentially splits the bit-slice at `self.len() - by`, then","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435918,"byte_end":435986,"line_start":2063,"line_end":2063,"column_start":2,"column_end":70}},{"value":"/ exchanges the two pieces. `self[len - by ..]` becomes the first section,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":435988,"byte_end":436064,"line_start":2064,"line_end":2064,"column_start":2,"column_end":78}},{"value":"/ and is then followed by `self[.. len - by]`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436066,"byte_end":436114,"line_start":2065,"line_end":2065,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436116,"byte_end":436119,"line_start":2066,"line_end":2066,"column_start":2,"column_end":5}},{"value":"/ The implementation is batch-accelerated where possible. It should have a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436121,"byte_end":436197,"line_start":2067,"line_end":2067,"column_start":2,"column_end":78}},{"value":"/ runtime complexity much lower than `O(by)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436199,"byte_end":436246,"line_start":2068,"line_end":2068,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436248,"byte_end":436251,"line_start":2069,"line_end":2069,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436253,"byte_end":436268,"line_start":2070,"line_end":2070,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436270,"byte_end":436273,"line_start":2071,"line_end":2071,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_right)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436275,"byte_end":436374,"line_start":2072,"line_end":2072,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436376,"byte_end":436379,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436381,"byte_end":436396,"line_start":2074,"line_end":2074,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436398,"byte_end":436401,"line_start":2075,"line_end":2075,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436403,"byte_end":436414,"line_start":2076,"line_end":2076,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436416,"byte_end":436443,"line_start":2077,"line_end":2077,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436445,"byte_end":436448,"line_start":2078,"line_end":2078,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436450,"byte_end":436493,"line_start":2079,"line_end":2079,"column_start":2,"column_end":45}},{"value":"/ //            split occurs here ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436495,"byte_end":436532,"line_start":2080,"line_end":2080,"column_start":2,"column_end":39}},{"value":"/ bits.rotate_right(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436534,"byte_end":436559,"line_start":2081,"line_end":2081,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(bits, bits![1, 0, 0, 0, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436561,"byte_end":436607,"line_start":2082,"line_end":2082,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436609,"byte_end":436616,"line_start":2083,"line_end":2083,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":436618,"byte_end":436627,"line_start":2084,"line_end":2084,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437825,"byte_end":437829,"line_start":2129,"line_end":2129,"column_start":9,"column_end":13},"name":"fill","qualname":"<BitSlice<T, O>>::fill","value":"pub fn fill(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Fills the bit-slice with a given bit.","sig":null,"attributes":[{"value":"/ Fills the bit-slice with a given bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437253,"byte_end":437294,"line_start":2109,"line_end":2109,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437296,"byte_end":437299,"line_start":2110,"line_end":2110,"column_start":2,"column_end":5}},{"value":"/ This is a recent stabilization in the standard library. `bitvec`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437301,"byte_end":437369,"line_start":2111,"line_end":2111,"column_start":2,"column_end":70}},{"value":"/ previously offered this behavior as the novel API `.set_all()`. That","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437371,"byte_end":437443,"line_start":2112,"line_end":2112,"column_start":2,"column_end":74}},{"value":"/ method name is now removed in favor of this standard-library analogue.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437445,"byte_end":437519,"line_start":2113,"line_end":2113,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437521,"byte_end":437524,"line_start":2114,"line_end":2114,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437526,"byte_end":437541,"line_start":2115,"line_end":2115,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437543,"byte_end":437546,"line_start":2116,"line_end":2116,"column_start":2,"column_end":5}},{"value":"/ [`slice::fill`](https://doc.rust-lang.org/std/primitive.slice.html#method.fill)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437548,"byte_end":437631,"line_start":2117,"line_end":2117,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437633,"byte_end":437636,"line_start":2118,"line_end":2118,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437638,"byte_end":437653,"line_start":2119,"line_end":2119,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437655,"byte_end":437658,"line_start":2120,"line_end":2120,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437660,"byte_end":437671,"line_start":2121,"line_end":2121,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437673,"byte_end":437700,"line_start":2122,"line_end":2122,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437702,"byte_end":437705,"line_start":2123,"line_end":2123,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437707,"byte_end":437738,"line_start":2124,"line_end":2124,"column_start":2,"column_end":33}},{"value":"/ bits.fill(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437740,"byte_end":437760,"line_start":2125,"line_end":2125,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(bits, bits![1; 5]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437762,"byte_end":437796,"line_start":2126,"line_end":2126,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437798,"byte_end":437805,"line_start":2127,"line_end":2127,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":437807,"byte_end":437816,"line_start":2128,"line_end":2128,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438812,"byte_end":438821,"line_start":2170,"line_end":2170,"column_start":9,"column_end":18},"name":"fill_with","qualname":"<BitSlice<T, O>>::fill_with","value":"pub fn fill_with<F>(&mut Self, F) where F: FnMut(usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Fills the bit-slice with bits produced by a generator function.","sig":null,"attributes":[{"value":"/ Fills the bit-slice with bits produced by a generator function.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438270,"byte_end":438337,"line_start":2149,"line_end":2149,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438339,"byte_end":438342,"line_start":2150,"line_end":2150,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438344,"byte_end":438359,"line_start":2151,"line_end":2151,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438361,"byte_end":438364,"line_start":2152,"line_end":2152,"column_start":2,"column_end":5}},{"value":"/ [`slice::fill_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.fill_with)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438366,"byte_end":438459,"line_start":2153,"line_end":2153,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438461,"byte_end":438464,"line_start":2154,"line_end":2154,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438466,"byte_end":438488,"line_start":2155,"line_end":2155,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438490,"byte_end":438493,"line_start":2156,"line_end":2156,"column_start":2,"column_end":5}},{"value":"/ The generator function receives the index of the bit being initialized","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438495,"byte_end":438569,"line_start":2157,"line_end":2157,"column_start":2,"column_end":76}},{"value":"/ as an argument.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438571,"byte_end":438590,"line_start":2158,"line_end":2158,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438592,"byte_end":438595,"line_start":2159,"line_end":2159,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438597,"byte_end":438612,"line_start":2160,"line_end":2160,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438614,"byte_end":438617,"line_start":2161,"line_end":2161,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438619,"byte_end":438630,"line_start":2162,"line_end":2162,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438632,"byte_end":438659,"line_start":2163,"line_end":2163,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438661,"byte_end":438664,"line_start":2164,"line_end":2164,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438666,"byte_end":438697,"line_start":2165,"line_end":2165,"column_start":2,"column_end":33}},{"value":"/ bits.fill_with(|idx| idx % 2 == 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438699,"byte_end":438738,"line_start":2166,"line_end":2166,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bits, bits![1, 0, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438740,"byte_end":438783,"line_start":2167,"line_end":2167,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438785,"byte_end":438792,"line_start":2168,"line_end":2168,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438794,"byte_end":438803,"line_start":2169,"line_end":2169,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439164,"byte_end":439180,"line_start":2183,"line_end":2183,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<T, O>>::clone_from_slice","value":"pub fn clone_from_slice<T2, O2>(&mut Self, &BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":438995,"byte_end":439004,"line_start":2179,"line_end":2179,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439006,"byte_end":439036,"line_start":2180,"line_end":2180,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.clone_from_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439038,"byte_end":439092,"line_start":2181,"line_end":2181,"column_start":2,"column_end":56}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439094,"byte_end":439155,"line_start":2182,"line_end":2182,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3323},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439472,"byte_end":439487,"line_start":2195,"line_end":2195,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<T, O>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439304,"byte_end":439313,"line_start":2191,"line_end":2191,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439315,"byte_end":439345,"line_start":2192,"line_end":2192,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.copy_from_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439347,"byte_end":439400,"line_start":2193,"line_end":2193,"column_start":2,"column_end":55}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439402,"byte_end":439463,"line_start":2194,"line_end":2194,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3324},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440576,"byte_end":440587,"line_start":2228,"line_end":2228,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<T, O>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeExt<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies a span of bits to another location in the bit-slice.","sig":null,"attributes":[{"value":"/ Copies a span of bits to another location in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439549,"byte_end":439612,"line_start":2199,"line_end":2199,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439614,"byte_end":439617,"line_start":2200,"line_end":2200,"column_start":2,"column_end":5}},{"value":"/ `src` is the range of bit-indices in the bit-slice to copy, and `dest is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439619,"byte_end":439695,"line_start":2201,"line_end":2201,"column_start":2,"column_end":78}},{"value":"/ the starting index of the destination range. `src` and `dest .. dest +","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439697,"byte_end":439771,"line_start":2202,"line_end":2202,"column_start":2,"column_end":76}},{"value":"/ src.len()` are permitted to overlap; the copy will automatically detect","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439773,"byte_end":439848,"line_start":2203,"line_end":2203,"column_start":2,"column_end":77}},{"value":"/ and manage this. However, both `src` and `dest .. dest + src.len()`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439850,"byte_end":439921,"line_start":2204,"line_end":2204,"column_start":2,"column_end":73}},{"value":"/ **must** fall within the bounds of `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439923,"byte_end":439969,"line_start":2205,"line_end":2205,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439971,"byte_end":439974,"line_start":2206,"line_end":2206,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439976,"byte_end":439991,"line_start":2207,"line_end":2207,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439993,"byte_end":439996,"line_start":2208,"line_end":2208,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":439998,"byte_end":440095,"line_start":2209,"line_end":2209,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440097,"byte_end":440100,"line_start":2210,"line_end":2210,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440102,"byte_end":440115,"line_start":2211,"line_end":2211,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440117,"byte_end":440120,"line_start":2212,"line_end":2212,"column_start":2,"column_end":5}},{"value":"/ This panics if either the source or destination range exceed","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440122,"byte_end":440186,"line_start":2213,"line_end":2213,"column_start":2,"column_end":66}},{"value":"/ `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440188,"byte_end":440205,"line_start":2214,"line_end":2214,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440207,"byte_end":440210,"line_start":2215,"line_end":2215,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440212,"byte_end":440227,"line_start":2216,"line_end":2216,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440229,"byte_end":440232,"line_start":2217,"line_end":2217,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440234,"byte_end":440245,"line_start":2218,"line_end":2218,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440247,"byte_end":440274,"line_start":2219,"line_end":2219,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440276,"byte_end":440279,"line_start":2220,"line_end":2220,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440281,"byte_end":440342,"line_start":2221,"line_end":2221,"column_start":2,"column_end":63}},{"value":"/ bits.copy_within(1 .. 5, 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440344,"byte_end":440376,"line_start":2222,"line_end":2222,"column_start":2,"column_end":34}},{"value":"/ //                        v  v  v  v","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440378,"byte_end":440418,"line_start":2223,"line_end":2223,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440420,"byte_end":440484,"line_start":2224,"line_end":2224,"column_start":2,"column_end":66}},{"value":"/ //                                             ^  ^  ^  ^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440486,"byte_end":440547,"line_start":2225,"line_end":2225,"column_start":2,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440549,"byte_end":440556,"line_start":2226,"line_end":2226,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440558,"byte_end":440567,"line_start":2227,"line_end":2227,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3326},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441094,"byte_end":441109,"line_start":2244,"line_end":2244,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<T, O>>::swap_with_slice","value":"pub fn swap_with_slice<T2, O2>(&mut Self, &mut BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440958,"byte_end":440967,"line_start":2241,"line_end":2241,"column_start":2,"column_end":11}},{"value":"deprecated = \"use `.swap_with_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":440969,"byte_end":441022,"line_start":2242,"line_end":2242,"column_start":2,"column_end":55}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441024,"byte_end":441085,"line_start":2243,"line_end":2243,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442676,"byte_end":442684,"line_start":2294,"line_end":2294,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<T, O>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<U, O>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Produces bit-slice view(s) with different underlying storage types.","sig":null,"attributes":[{"value":"/ Produces bit-slice view(s) with different underlying storage types.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441240,"byte_end":441311,"line_start":2252,"line_end":2252,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441313,"byte_end":441316,"line_start":2253,"line_end":2253,"column_start":2,"column_end":5}},{"value":"/ This may have unexpected effects, and you cannot assume that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441318,"byte_end":441382,"line_start":2254,"line_end":2254,"column_start":2,"column_end":66}},{"value":"/ `before[idx] == after[idx]`! Consult the [tables in the manual][layout]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441384,"byte_end":441459,"line_start":2255,"line_end":2255,"column_start":2,"column_end":77}},{"value":"/ for information about memory layouts.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441461,"byte_end":441502,"line_start":2256,"line_end":2256,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441504,"byte_end":441507,"line_start":2257,"line_end":2257,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441509,"byte_end":441524,"line_start":2258,"line_end":2258,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441526,"byte_end":441529,"line_start":2259,"line_end":2259,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441531,"byte_end":441622,"line_start":2260,"line_end":2260,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441624,"byte_end":441627,"line_start":2261,"line_end":2261,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441629,"byte_end":441641,"line_start":2262,"line_end":2262,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441643,"byte_end":441646,"line_start":2263,"line_end":2263,"column_start":2,"column_end":5}},{"value":"/ Unlike the standard library documentation, this explicitly guarantees","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441648,"byte_end":441721,"line_start":2264,"line_end":2264,"column_start":2,"column_end":75}},{"value":"/ that the middle bit-slice will have maximal size. You may rely on this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441723,"byte_end":441797,"line_start":2265,"line_end":2265,"column_start":2,"column_end":76}},{"value":"/ property.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441799,"byte_end":441812,"line_start":2266,"line_end":2266,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441814,"byte_end":441817,"line_start":2267,"line_end":2267,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441819,"byte_end":441832,"line_start":2268,"line_end":2268,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441834,"byte_end":441837,"line_start":2269,"line_end":2269,"column_start":2,"column_end":5}},{"value":"/ You may not use this to cast away alias protections. Rust does not have","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441839,"byte_end":441914,"line_start":2270,"line_end":2270,"column_start":2,"column_end":77}},{"value":"/ support for higher-kinded types, so this cannot express the relation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441916,"byte_end":441988,"line_start":2271,"line_end":2271,"column_start":2,"column_end":74}},{"value":"/ `Outer<T> -> Outer<U> where Outer: BitStoreContainer`, but memory safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":441990,"byte_end":442066,"line_start":2272,"line_end":2272,"column_start":2,"column_end":78}},{"value":"/ does require that you respect this rule. Reälign integers to integers,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442068,"byte_end":442143,"line_start":2273,"line_end":2273,"column_start":2,"column_end":76}},{"value":"/ `Cell`s to `Cell`s, and atomics to atomics, but do not cross these","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442145,"byte_end":442215,"line_start":2274,"line_end":2274,"column_start":2,"column_end":72}},{"value":"/ boundaries.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442217,"byte_end":442232,"line_start":2275,"line_end":2275,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442234,"byte_end":442237,"line_start":2276,"line_end":2276,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442239,"byte_end":442254,"line_start":2277,"line_end":2277,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442256,"byte_end":442259,"line_start":2278,"line_end":2278,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442261,"byte_end":442272,"line_start":2279,"line_end":2279,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442274,"byte_end":442301,"line_start":2280,"line_end":2280,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442303,"byte_end":442306,"line_start":2281,"line_end":2281,"column_start":2,"column_end":5}},{"value":"/ let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442308,"byte_end":442355,"line_start":2282,"line_end":2282,"column_start":2,"column_end":49}},{"value":"/ let bits = bytes.view_bits::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442357,"byte_end":442398,"line_start":2283,"line_end":2283,"column_start":2,"column_end":43}},{"value":"/ let (pfx, mid, sfx) = unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442400,"byte_end":442434,"line_start":2284,"line_end":2284,"column_start":2,"column_end":36}},{"value":"/   bits.align_to::<u16>()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442436,"byte_end":442464,"line_start":2285,"line_end":2285,"column_start":2,"column_end":30}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442466,"byte_end":442472,"line_start":2286,"line_end":2286,"column_start":2,"column_end":8}},{"value":"/ assert!(pfx.len() <= 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442474,"byte_end":442502,"line_start":2287,"line_end":2287,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(mid.len(), 48);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442504,"byte_end":442534,"line_start":2288,"line_end":2288,"column_start":2,"column_end":32}},{"value":"/ assert!(sfx.len() <= 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442536,"byte_end":442564,"line_start":2289,"line_end":2289,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442566,"byte_end":442573,"line_start":2290,"line_end":2290,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442575,"byte_end":442578,"line_start":2291,"line_end":2291,"column_start":2,"column_end":5}},{"value":"/ [layout]: https://bitvecto-rs.github.io/bitvec/memory-layout.html","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442580,"byte_end":442649,"line_start":2292,"line_end":2292,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442651,"byte_end":442660,"line_start":2293,"line_end":2293,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3331},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444351,"byte_end":444363,"line_start":2346,"line_end":2346,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<T, O>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<U, O>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Produces bit-slice view(s) with different underlying storage types.","sig":null,"attributes":[{"value":"/ Produces bit-slice view(s) with different underlying storage types.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442895,"byte_end":442966,"line_start":2304,"line_end":2304,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442968,"byte_end":442971,"line_start":2305,"line_end":2305,"column_start":2,"column_end":5}},{"value":"/ This may have unexpected effects, and you cannot assume that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":442973,"byte_end":443037,"line_start":2306,"line_end":2306,"column_start":2,"column_end":66}},{"value":"/ `before[idx] == after[idx]`! Consult the [tables in the manual][layout]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443039,"byte_end":443114,"line_start":2307,"line_end":2307,"column_start":2,"column_end":77}},{"value":"/ for information about memory layouts.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443116,"byte_end":443157,"line_start":2308,"line_end":2308,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443159,"byte_end":443162,"line_start":2309,"line_end":2309,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443164,"byte_end":443179,"line_start":2310,"line_end":2310,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443181,"byte_end":443184,"line_start":2311,"line_end":2311,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443186,"byte_end":443285,"line_start":2312,"line_end":2312,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443287,"byte_end":443290,"line_start":2313,"line_end":2313,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443292,"byte_end":443304,"line_start":2314,"line_end":2314,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443306,"byte_end":443309,"line_start":2315,"line_end":2315,"column_start":2,"column_end":5}},{"value":"/ Unlike the standard library documentation, this explicitly guarantees","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443311,"byte_end":443384,"line_start":2316,"line_end":2316,"column_start":2,"column_end":75}},{"value":"/ that the middle bit-slice will have maximal size. You may rely on this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443386,"byte_end":443460,"line_start":2317,"line_end":2317,"column_start":2,"column_end":76}},{"value":"/ property.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443462,"byte_end":443475,"line_start":2318,"line_end":2318,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443477,"byte_end":443480,"line_start":2319,"line_end":2319,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443482,"byte_end":443495,"line_start":2320,"line_end":2320,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443497,"byte_end":443500,"line_start":2321,"line_end":2321,"column_start":2,"column_end":5}},{"value":"/ You may not use this to cast away alias protections. Rust does not have","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443502,"byte_end":443577,"line_start":2322,"line_end":2322,"column_start":2,"column_end":77}},{"value":"/ support for higher-kinded types, so this cannot express the relation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443579,"byte_end":443651,"line_start":2323,"line_end":2323,"column_start":2,"column_end":74}},{"value":"/ `Outer<T> -> Outer<U> where Outer: BitStoreContainer`, but memory safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443653,"byte_end":443729,"line_start":2324,"line_end":2324,"column_start":2,"column_end":78}},{"value":"/ does require that you respect this rule. Reälign integers to integers,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443731,"byte_end":443806,"line_start":2325,"line_end":2325,"column_start":2,"column_end":76}},{"value":"/ `Cell`s to `Cell`s, and atomics to atomics, but do not cross these","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443808,"byte_end":443878,"line_start":2326,"line_end":2326,"column_start":2,"column_end":72}},{"value":"/ boundaries.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443880,"byte_end":443895,"line_start":2327,"line_end":2327,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443897,"byte_end":443900,"line_start":2328,"line_end":2328,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443902,"byte_end":443917,"line_start":2329,"line_end":2329,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443919,"byte_end":443922,"line_start":2330,"line_end":2330,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443924,"byte_end":443935,"line_start":2331,"line_end":2331,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443937,"byte_end":443964,"line_start":2332,"line_end":2332,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443966,"byte_end":443969,"line_start":2333,"line_end":2333,"column_start":2,"column_end":5}},{"value":"/ let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":443971,"byte_end":444022,"line_start":2334,"line_end":2334,"column_start":2,"column_end":53}},{"value":"/ let bits = bytes.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444024,"byte_end":444069,"line_start":2335,"line_end":2335,"column_start":2,"column_end":47}},{"value":"/ let (pfx, mid, sfx) = unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444071,"byte_end":444105,"line_start":2336,"line_end":2336,"column_start":2,"column_end":36}},{"value":"/   bits.align_to_mut::<u16>()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444107,"byte_end":444139,"line_start":2337,"line_end":2337,"column_start":2,"column_end":34}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444141,"byte_end":444147,"line_start":2338,"line_end":2338,"column_start":2,"column_end":8}},{"value":"/ assert!(pfx.len() <= 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444149,"byte_end":444177,"line_start":2339,"line_end":2339,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(mid.len(), 48);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444179,"byte_end":444209,"line_start":2340,"line_end":2340,"column_start":2,"column_end":32}},{"value":"/ assert!(sfx.len() <= 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444211,"byte_end":444239,"line_start":2341,"line_end":2341,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444241,"byte_end":444248,"line_start":2342,"line_end":2342,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444250,"byte_end":444253,"line_start":2343,"line_end":2343,"column_start":2,"column_end":5}},{"value":"/ [layout]: https://bitvecto-rs.github.io/bitvec/memory-layout.html","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444255,"byte_end":444324,"line_start":2344,"line_end":2344,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444326,"byte_end":444335,"line_start":2345,"line_end":2345,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444817,"byte_end":444823,"line_start":2368,"line_end":2368,"column_start":9,"column_end":15},"name":"to_vec","qualname":"<BitSlice<T, O>>::to_vec","value":"pub fn to_vec(&Self) -> BitVec<T::Unalias, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444690,"byte_end":444699,"line_start":2365,"line_end":2365,"column_start":2,"column_end":11}},{"value":"deprecated = \"use `.to_bitvec()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444701,"byte_end":444745,"line_start":2366,"line_end":2366,"column_start":2,"column_end":46}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444747,"byte_end":444808,"line_start":2367,"line_end":2367,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445526,"byte_end":445532,"line_start":2398,"line_end":2398,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitSlice<T, O>>::repeat","value":"pub fn repeat(&Self, usize) -> BitVec<T::Unalias, O>","parent":null,"children":[],"decl_id":null,"docs":" Creates a bit-vector by repeating a bit-slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a bit-vector by repeating a bit-slice `n` times.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444882,"byte_end":444942,"line_start":2372,"line_end":2372,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444944,"byte_end":444947,"line_start":2373,"line_end":2373,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444949,"byte_end":444964,"line_start":2374,"line_end":2374,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444966,"byte_end":444969,"line_start":2375,"line_end":2375,"column_start":2,"column_end":5}},{"value":"/ [`slice::repeat`](https://doc.rust-lang.org/std/primitive.slice.html#method.repeat)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444971,"byte_end":445058,"line_start":2376,"line_end":2376,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445060,"byte_end":445063,"line_start":2377,"line_end":2377,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445065,"byte_end":445078,"line_start":2378,"line_end":2378,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445080,"byte_end":445083,"line_start":2379,"line_end":2379,"column_start":2,"column_end":5}},{"value":"/ This method panics if `self.len() * n` exceeds the `BitVec` capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445085,"byte_end":445158,"line_start":2380,"line_end":2380,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445160,"byte_end":445163,"line_start":2381,"line_end":2381,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445165,"byte_end":445180,"line_start":2382,"line_end":2382,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445182,"byte_end":445185,"line_start":2383,"line_end":2383,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445187,"byte_end":445198,"line_start":2384,"line_end":2384,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445200,"byte_end":445227,"line_start":2385,"line_end":2385,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445229,"byte_end":445232,"line_start":2386,"line_end":2386,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0, 1].repeat(3), bitvec![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445234,"byte_end":445299,"line_start":2387,"line_end":2387,"column_start":2,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445301,"byte_end":445308,"line_start":2388,"line_end":2388,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445310,"byte_end":445313,"line_start":2389,"line_end":2389,"column_start":2,"column_end":5}},{"value":"/ This panics by exceeding bit-vector maximum capacity:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445315,"byte_end":445372,"line_start":2390,"line_end":2390,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445374,"byte_end":445377,"line_start":2391,"line_end":2391,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445379,"byte_end":445403,"line_start":2392,"line_end":2392,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445405,"byte_end":445432,"line_start":2393,"line_end":2393,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445434,"byte_end":445437,"line_start":2394,"line_end":2394,"column_start":2,"column_end":5}},{"value":"/ bits![0, 1].repeat(BitSlice::<usize, Lsb0>::MAX_BITS);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445439,"byte_end":445497,"line_start":2395,"line_end":2395,"column_start":2,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445499,"byte_end":445506,"line_start":2396,"line_end":2396,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":445508,"byte_end":445517,"line_start":2397,"line_end":2397,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":3338},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446268,"byte_end":446276,"line_start":2422,"line_end":2422,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<T, O>(&T) -> &BitSlice<T, O> where T: BitStore, O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446132,"byte_end":446141,"line_start":2419,"line_end":2419,"column_start":1,"column_end":10}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446142,"byte_end":446203,"line_start":2420,"line_end":2420,"column_start":1,"column_end":62}},{"value":"deprecated = \"use `BitSlice::from_element()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446204,"byte_end":446260,"line_start":2421,"line_end":2421,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":3341},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446521,"byte_end":446529,"line_start":2433,"line_end":2433,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<T, O>(&mut T) -> &mut BitSlice<T, O> where T: BitStore,\nO: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446381,"byte_end":446390,"line_start":2430,"line_end":2430,"column_start":1,"column_end":10}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446391,"byte_end":446452,"line_start":2431,"line_end":2431,"column_start":1,"column_end":62}},{"value":"deprecated = \"use `BitSlice::from_element_mut()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446453,"byte_end":446513,"line_start":2432,"line_end":2432,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":3344},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446729,"byte_end":446743,"line_start":2443,"line_end":2443,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, T, O>(BitPtr<Const, T, O>, usize)\n-> Result<&'a BitSlice<T, O>, BitSpanError<T>> where O: BitOrder, T: 'a +\nBitStore","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446646,"byte_end":446655,"line_start":2441,"line_end":2441,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3349},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447025,"byte_end":447043,"line_start":2456,"line_end":2456,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, T, O>(BitPtr<Mut, T, O>, usize)\n-> Result<&'a mut BitSlice<T, O>, BitSpanError<T>> where O: BitOrder, T: 'a +\nBitStore","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":446938,"byte_end":446947,"line_start":2454,"line_end":2454,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":3354},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447308,"byte_end":447321,"line_start":2468,"line_end":2468,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, T, O>","parent":null,"children":[{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3363},{"krate":0,"index":3364},{"krate":0,"index":3365}],"decl_id":null,"docs":"# Bit-Slice Indexing","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3358},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447416,"byte_end":447421,"line_start":2474,"line_end":2474,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" The output type of immutable access.\n","sig":null,"attributes":[{"value":"/ The output type of immutable access.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447369,"byte_end":447409,"line_start":2473,"line_end":2473,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3359},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447470,"byte_end":447473,"line_start":2477,"line_end":2477,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" The output type of mutable access.\n","sig":null,"attributes":[{"value":"/ The output type of mutable access.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447425,"byte_end":447463,"line_start":2476,"line_end":2476,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3360},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447653,"byte_end":447656,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<T, O>) -> Option<Self::Immut>","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Immutably indexes into a bit-slice, returning `None` if `self` is out of\n bounds.","sig":null,"attributes":[{"value":"/ Immutably indexes into a bit-slice, returning `None` if `self` is out of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447477,"byte_end":447553,"line_start":2479,"line_end":2479,"column_start":2,"column_end":78}},{"value":"/ bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447555,"byte_end":447566,"line_start":2480,"line_end":2480,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447568,"byte_end":447571,"line_start":2481,"line_end":2481,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447573,"byte_end":447588,"line_start":2482,"line_end":2482,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447590,"byte_end":447593,"line_start":2483,"line_end":2483,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](core::slice::SliceIndex::get)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447595,"byte_end":447648,"line_start":2484,"line_end":2484,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3361},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447897,"byte_end":447904,"line_start":2493,"line_end":2493,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<T, O>) -> Option<Self::Mut>","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Mutably indexes into a bit-slice, returning `None` if `self` is out of\n bounds.","sig":null,"attributes":[{"value":"/ Mutably indexes into a bit-slice, returning `None` if `self` is out of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447715,"byte_end":447789,"line_start":2487,"line_end":2487,"column_start":2,"column_end":76}},{"value":"/ bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447791,"byte_end":447802,"line_start":2488,"line_end":2488,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447804,"byte_end":447807,"line_start":2489,"line_end":2489,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447809,"byte_end":447824,"line_start":2490,"line_end":2490,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447826,"byte_end":447829,"line_start":2491,"line_end":2491,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](core::slice::SliceIndex::get_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447831,"byte_end":447892,"line_start":2492,"line_end":2492,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448387,"byte_end":448400,"line_start":2506,"line_end":2506,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<T, O>) -> Self::Immut","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Immutably indexes into a bit-slice without doing any bounds checking.","sig":null,"attributes":[{"value":"/ Immutably indexes into a bit-slice without doing any bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":447965,"byte_end":448038,"line_start":2495,"line_end":2495,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448040,"byte_end":448043,"line_start":2496,"line_end":2496,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448045,"byte_end":448060,"line_start":2497,"line_end":2497,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448062,"byte_end":448065,"line_start":2498,"line_end":2498,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](core::slice::SliceIndex::get_unchecked)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448067,"byte_end":448140,"line_start":2499,"line_end":2499,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448142,"byte_end":448145,"line_start":2500,"line_end":2500,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448147,"byte_end":448160,"line_start":2501,"line_end":2501,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448162,"byte_end":448165,"line_start":2502,"line_end":2502,"column_start":2,"column_end":5}},{"value":"/ If `self` is not in bounds, then memory accesses through it are illegal","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448167,"byte_end":448242,"line_start":2503,"line_end":2503,"column_start":2,"column_end":77}},{"value":"/ and the program becomes undefined. You must ensure that `self` is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448244,"byte_end":448313,"line_start":2504,"line_end":2504,"column_start":2,"column_end":71}},{"value":"/ appropriately within `0 .. bits.len()` at the call site.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448315,"byte_end":448375,"line_start":2505,"line_end":2505,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3363},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448897,"byte_end":448914,"line_start":2521,"line_end":2521,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<T, O>) -> Self::Mut","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Mutably indexes into a bit-slice without doing any bounds checking.","sig":null,"attributes":[{"value":"/ Mutably indexes into a bit-slice without doing any bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448451,"byte_end":448522,"line_start":2508,"line_end":2508,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448524,"byte_end":448527,"line_start":2509,"line_end":2509,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448529,"byte_end":448544,"line_start":2510,"line_end":2510,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448546,"byte_end":448549,"line_start":2511,"line_end":2511,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448551,"byte_end":448591,"line_start":2512,"line_end":2512,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448593,"byte_end":448596,"line_start":2513,"line_end":2513,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448598,"byte_end":448611,"line_start":2514,"line_end":2514,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448613,"byte_end":448616,"line_start":2515,"line_end":2515,"column_start":2,"column_end":5}},{"value":"/ If `self` is not in bounds, then memory accesses through it bare illegal","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448618,"byte_end":448694,"line_start":2516,"line_end":2516,"column_start":2,"column_end":78}},{"value":"/ and the program becomes undefined. You must ensure that `self` is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448696,"byte_end":448765,"line_start":2517,"line_end":2517,"column_start":2,"column_end":71}},{"value":"/ appropriately within `0 .. bits.len()` at the call site.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448767,"byte_end":448827,"line_start":2518,"line_end":2518,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448829,"byte_end":448832,"line_start":2519,"line_end":2519,"column_start":2,"column_end":5}},{"value":"/ [0]: core::slice::SliceIndex::get_unchecked_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448834,"byte_end":448885,"line_start":2520,"line_end":2520,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3364},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449257,"byte_end":449262,"line_start":2535,"line_end":2535,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<T, O>) -> Self::Immut","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Immutably indexes into a bit-slice, panicking if `self` is out of\n bounds.","sig":null,"attributes":[{"value":"/ Immutably indexes into a bit-slice, panicking if `self` is out of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":448968,"byte_end":449037,"line_start":2524,"line_end":2524,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449039,"byte_end":449050,"line_start":2525,"line_end":2525,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449052,"byte_end":449055,"line_start":2526,"line_end":2526,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449057,"byte_end":449072,"line_start":2527,"line_end":2527,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449074,"byte_end":449077,"line_start":2528,"line_end":2528,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](core::slice::SliceIndex::index)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449079,"byte_end":449136,"line_start":2529,"line_end":2529,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449138,"byte_end":449141,"line_start":2530,"line_end":2530,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449143,"byte_end":449156,"line_start":2531,"line_end":2531,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449158,"byte_end":449161,"line_start":2532,"line_end":2532,"column_start":2,"column_end":5}},{"value":"/ Implementations are required to panic if `self` exceeds `bits.len()` in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449163,"byte_end":449238,"line_start":2533,"line_end":2533,"column_start":2,"column_end":77}},{"value":"/ any way.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449240,"byte_end":449252,"line_start":2534,"line_end":2534,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3365},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449603,"byte_end":449612,"line_start":2547,"line_end":2547,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<T, O>) -> Self::Mut","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Mutably indexes into a bit-slice, panicking if `self` is out of bounds.","sig":null,"attributes":[{"value":"/ Mutably indexes into a bit-slice, panicking if `self` is out of bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449313,"byte_end":449388,"line_start":2537,"line_end":2537,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449390,"byte_end":449393,"line_start":2538,"line_end":2538,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449395,"byte_end":449410,"line_start":2539,"line_end":2539,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449412,"byte_end":449415,"line_start":2540,"line_end":2540,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](core::slice::SliceIndex::index_mut)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449417,"byte_end":449482,"line_start":2541,"line_end":2541,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449484,"byte_end":449487,"line_start":2542,"line_end":2542,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449489,"byte_end":449502,"line_start":2543,"line_end":2543,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449504,"byte_end":449507,"line_start":2544,"line_end":2544,"column_start":2,"column_end":5}},{"value":"/ Implementations are required to panic if `self` exceeds `bits.len()` in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449509,"byte_end":449584,"line_start":2545,"line_end":2545,"column_start":2,"column_end":77}},{"value":"/ any way.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":449586,"byte_end":449598,"line_start":2546,"line_end":2546,"column_start":2,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3470},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":455934,"byte_end":455938,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":3474},{"krate":0,"index":3475}],"decl_id":null,"docs":"# Shared Bit-Slice Iteration","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":455848,"byte_end":455868,"line_start":72,"line_end":72,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3481},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457337,"byte_end":457348,"line_start":126,"line_end":126,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the currently unyielded bit-slice.","sig":null,"attributes":[{"value":"/ Views the currently unyielded bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456654,"byte_end":456698,"line_start":102,"line_end":102,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456700,"byte_end":456703,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ Because the iterator is a shared view, the returned bit-slice does not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456705,"byte_end":456779,"line_start":104,"line_end":104,"column_start":2,"column_end":76}},{"value":"/ cause a lifetime conflict, and the iterator can continue to be used","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456781,"byte_end":456852,"line_start":105,"line_end":105,"column_start":2,"column_end":73}},{"value":"/ while it exists.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456854,"byte_end":456874,"line_start":106,"line_end":106,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456876,"byte_end":456879,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456881,"byte_end":456896,"line_start":108,"line_end":108,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456898,"byte_end":456901,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](core::slice::Iter::as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456903,"byte_end":456954,"line_start":110,"line_end":110,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456956,"byte_end":456959,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456961,"byte_end":456976,"line_start":112,"line_end":112,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456978,"byte_end":456981,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456983,"byte_end":456994,"line_start":114,"line_end":114,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456996,"byte_end":457023,"line_start":115,"line_end":115,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457025,"byte_end":457028,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457030,"byte_end":457063,"line_start":117,"line_end":117,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457065,"byte_end":457096,"line_start":118,"line_end":118,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457098,"byte_end":457101,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.as_bitslice(), bits![0, 0, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457103,"byte_end":457157,"line_start":120,"line_end":120,"column_start":2,"column_end":56}},{"value":"/ assert!(!*iter.nth(1).unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457159,"byte_end":457195,"line_start":121,"line_end":121,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.as_bitslice(), bits![1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457197,"byte_end":457245,"line_start":122,"line_end":122,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457247,"byte_end":457254,"line_start":123,"line_end":123,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457256,"byte_end":457265,"line_start":124,"line_end":124,"column_start":2,"column_end":11}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457267,"byte_end":457328,"line_start":125,"line_end":125,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457613,"byte_end":457621,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457452,"byte_end":457461,"line_start":130,"line_end":130,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457463,"byte_end":457493,"line_start":131,"line_end":131,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457495,"byte_end":457541,"line_start":132,"line_end":132,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457543,"byte_end":457604,"line_start":133,"line_end":133,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458404,"byte_end":458411,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"name":"by_refs","qualname":"<Iter>::by_refs","value":"pub fn by_refs(Self) -> BitRefIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield regular `&bool` references rather than the\n [proxy reference][0].","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield regular `&bool` references rather than the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457679,"byte_end":457754,"line_start":138,"line_end":138,"column_start":2,"column_end":77}},{"value":"/ [proxy reference][0].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457756,"byte_end":457781,"line_start":139,"line_end":139,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457783,"byte_end":457786,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457788,"byte_end":457856,"line_start":141,"line_end":141,"column_start":2,"column_end":70}},{"value":"/ references. It reads from the proxy and provides an equivalent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457858,"byte_end":457924,"line_start":142,"line_end":142,"column_start":2,"column_end":68}},{"value":"/ `&'static bool`. The address value of the yielded reference is not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457926,"byte_end":457996,"line_start":143,"line_end":143,"column_start":2,"column_end":72}},{"value":"/ related to the addresses covered by the `BitSlice` buffer in any way.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":457998,"byte_end":458071,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458073,"byte_end":458076,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458078,"byte_end":458093,"line_start":146,"line_end":146,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458095,"byte_end":458098,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458100,"byte_end":458111,"line_start":148,"line_end":148,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458113,"byte_end":458140,"line_start":149,"line_end":149,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458142,"byte_end":458145,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458147,"byte_end":458174,"line_start":151,"line_end":151,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_refs();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458176,"byte_end":458217,"line_start":152,"line_end":152,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&false));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458219,"byte_end":458261,"line_start":153,"line_end":153,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458263,"byte_end":458304,"line_start":154,"line_end":154,"column_start":2,"column_end":43}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458306,"byte_end":458341,"line_start":155,"line_end":155,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458343,"byte_end":458350,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458352,"byte_end":458355,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::ptr::BitRef","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458357,"byte_end":458384,"line_start":158,"line_end":158,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458386,"byte_end":458395,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3485},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459630,"byte_end":459637,"line_start":201,"line_end":201,"column_start":9,"column_end":16},"name":"by_vals","qualname":"<Iter>::by_vals","value":"pub fn by_vals(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `bool` values rather than the\n [proxy reference][0].","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `bool` values rather than the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458531,"byte_end":458593,"line_start":167,"line_end":167,"column_start":2,"column_end":64}},{"value":"/ [proxy reference][0].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458595,"byte_end":458620,"line_start":168,"line_end":168,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458622,"byte_end":458625,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect direct values.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458627,"byte_end":458701,"line_start":170,"line_end":170,"column_start":2,"column_end":76}},{"value":"/ It dereferences the proxy and yields the referent `bool` directly. It","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458703,"byte_end":458776,"line_start":171,"line_end":171,"column_start":2,"column_end":75}},{"value":"/ replaces `Iterator::copied`, which is not available on this type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458778,"byte_end":458847,"line_start":172,"line_end":172,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458849,"byte_end":458852,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458854,"byte_end":458869,"line_start":174,"line_end":174,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458871,"byte_end":458874,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`](core::iter::Iterator::copied)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458876,"byte_end":458930,"line_start":176,"line_end":176,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458932,"byte_end":458935,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ ## Performance","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458937,"byte_end":458955,"line_start":178,"line_end":178,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458957,"byte_end":458960,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ This bypasses the construction of a `BitRef` for each yielded bit. Do","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":458962,"byte_end":459035,"line_start":180,"line_end":180,"column_start":2,"column_end":75}},{"value":"/ not use `bits.as_bitptr_range().map(|bp| unsafe { bp.read() })` in a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459037,"byte_end":459109,"line_start":181,"line_end":181,"column_start":2,"column_end":74}},{"value":"/ misguided attempt to eke out some additional performance in your code.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459111,"byte_end":459185,"line_start":182,"line_end":182,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459187,"byte_end":459190,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ This iterator is already the fastest possible walk across a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459192,"byte_end":459266,"line_start":184,"line_end":184,"column_start":2,"column_end":76}},{"value":"/ You do not need to beat it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459268,"byte_end":459299,"line_start":185,"line_end":185,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459301,"byte_end":459304,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459306,"byte_end":459321,"line_start":187,"line_end":187,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459323,"byte_end":459326,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459328,"byte_end":459339,"line_start":189,"line_end":189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459341,"byte_end":459368,"line_start":190,"line_end":190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459370,"byte_end":459373,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459375,"byte_end":459402,"line_start":192,"line_end":192,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_vals();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459404,"byte_end":459445,"line_start":193,"line_end":193,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(false));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459447,"byte_end":459488,"line_start":194,"line_end":194,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459490,"byte_end":459530,"line_start":195,"line_end":195,"column_start":2,"column_end":42}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459532,"byte_end":459567,"line_start":196,"line_end":196,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459569,"byte_end":459576,"line_start":197,"line_end":197,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459578,"byte_end":459581,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::ptr::BitRef","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459583,"byte_end":459610,"line_start":199,"line_end":199,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459612,"byte_end":459621,"line_start":200,"line_end":200,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460492,"byte_end":460498,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"name":"copied","qualname":"<Iter>::copied","value":"pub fn copied(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Yields `bool` values directly, rather than [proxy references][0].","sig":null,"attributes":[{"value":"/ Yields `bool` values directly, rather than [proxy references][0].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459739,"byte_end":459808,"line_start":208,"line_end":208,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459810,"byte_end":459813,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ The original slice iterator yields true `&bool`, and as such allows","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459815,"byte_end":459886,"line_start":210,"line_end":210,"column_start":2,"column_end":73}},{"value":"/ [`Iterator::copied`] to exist. This iterator does not satisfy the bounds","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459888,"byte_end":459964,"line_start":211,"line_end":211,"column_start":2,"column_end":78}},{"value":"/ for that method, so `.copied()` is provided as an inherent in order to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":459966,"byte_end":460040,"line_start":212,"line_end":212,"column_start":2,"column_end":76}},{"value":"/ maintain source compatibility. Prefer [`.by_vals()`] instead, which","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460042,"byte_end":460113,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/ avoids the name collision while still making clear that it yields `bool`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460115,"byte_end":460191,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ values.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460193,"byte_end":460204,"line_start":215,"line_end":215,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460206,"byte_end":460209,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`]: core::iter::Iterator::copied","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460211,"byte_end":460265,"line_start":217,"line_end":217,"column_start":2,"column_end":56}},{"value":"/ [`.by_vals()`]: Self::by_vals","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460267,"byte_end":460300,"line_start":218,"line_end":218,"column_start":2,"column_end":35}},{"value":"/ [0]: crate::ptr::BitRef","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460302,"byte_end":460329,"line_start":219,"line_end":219,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460331,"byte_end":460340,"line_start":220,"line_end":220,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460342,"byte_end":460372,"line_start":221,"line_end":221,"column_start":2,"column_end":32}},{"value":"deprecated =\n\"`Iterator::copied` does not exist on this type. Use \\\n\t                `.by_vals()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460374,"byte_end":460483,"line_start":222,"line_end":223,"column_start":2,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3499},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":461531,"byte_end":461538,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":3503},{"krate":0,"index":3504}],"decl_id":null,"docs":"# Exclusive Bit-Slice Iteration","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":461442,"byte_end":461462,"line_start":271,"line_end":271,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3510},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463039,"byte_end":463052,"line_start":326,"line_end":326,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying bit-slice as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying bit-slice as a subslice of the original data.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462309,"byte_end":462379,"line_start":301,"line_end":301,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462381,"byte_end":462384,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ This consumes the iterator in order to avoid creating aliasing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462386,"byte_end":462452,"line_start":303,"line_end":303,"column_start":2,"column_end":68}},{"value":"/ references between the returned subslice (which has the original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462454,"byte_end":462522,"line_start":304,"line_end":304,"column_start":2,"column_end":70}},{"value":"/ lifetime, and is not borrowed from the iterator) and the proxies the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462524,"byte_end":462596,"line_start":305,"line_end":305,"column_start":2,"column_end":74}},{"value":"/ iterator produces.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462598,"byte_end":462620,"line_start":306,"line_end":306,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462622,"byte_end":462625,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462627,"byte_end":462642,"line_start":308,"line_end":308,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462644,"byte_end":462647,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_slice`](core::slice::IterMut::into_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462649,"byte_end":462710,"line_start":310,"line_end":310,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462712,"byte_end":462715,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462717,"byte_end":462732,"line_start":312,"line_end":312,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462734,"byte_end":462737,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462739,"byte_end":462750,"line_start":314,"line_end":314,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462752,"byte_end":462779,"line_start":315,"line_end":315,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462781,"byte_end":462784,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462786,"byte_end":462823,"line_start":317,"line_end":317,"column_start":2,"column_end":39}},{"value":"/ let mut iter = bits.iter_mut();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462825,"byte_end":462860,"line_start":318,"line_end":318,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462862,"byte_end":462865,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ *iter.next().unwrap() = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462867,"byte_end":462900,"line_start":320,"line_end":320,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(iter.into_bitslice(), bits![0, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462902,"byte_end":462955,"line_start":321,"line_end":321,"column_start":2,"column_end":55}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462957,"byte_end":462978,"line_start":322,"line_end":322,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462980,"byte_end":462987,"line_start":323,"line_end":323,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462989,"byte_end":462998,"line_start":324,"line_end":324,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463000,"byte_end":463030,"line_start":325,"line_end":325,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3511},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463321,"byte_end":463331,"line_start":334,"line_end":334,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463158,"byte_end":463167,"line_start":330,"line_end":330,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463169,"byte_end":463199,"line_start":331,"line_end":331,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.into_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463201,"byte_end":463249,"line_start":332,"line_end":332,"column_start":2,"column_end":50}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463251,"byte_end":463312,"line_start":333,"line_end":333,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464256,"byte_end":464267,"line_start":366,"line_end":366,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IterMut>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining bit-slice that has not yet been iterated.","sig":null,"attributes":[{"value":"/ Views the remaining bit-slice that has not yet been iterated.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463401,"byte_end":463466,"line_start":338,"line_end":338,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463468,"byte_end":463471,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ This borrows the iterator’s own lifetime, preventing it from being used","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463473,"byte_end":463550,"line_start":340,"line_end":340,"column_start":2,"column_end":77}},{"value":"/ while the bit-slice view exists and thus ensuring that no aliasing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463552,"byte_end":463622,"line_start":341,"line_end":341,"column_start":2,"column_end":72}},{"value":"/ references are created. Bits that the iterator has already yielded are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463624,"byte_end":463698,"line_start":342,"line_end":342,"column_start":2,"column_end":76}},{"value":"/ not included in the produced bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463700,"byte_end":463743,"line_start":343,"line_end":343,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463745,"byte_end":463748,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463750,"byte_end":463765,"line_start":345,"line_end":345,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463767,"byte_end":463770,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::as_slice`](core::slice::IterMut::as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463772,"byte_end":463829,"line_start":347,"line_end":347,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463831,"byte_end":463834,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463836,"byte_end":463851,"line_start":349,"line_end":349,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463853,"byte_end":463856,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463858,"byte_end":463869,"line_start":351,"line_end":351,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463871,"byte_end":463898,"line_start":352,"line_end":352,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463900,"byte_end":463903,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 4];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463905,"byte_end":463936,"line_start":354,"line_end":354,"column_start":2,"column_end":33}},{"value":"/ let mut iter = bits.iter_mut();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463938,"byte_end":463973,"line_start":355,"line_end":355,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463975,"byte_end":463978,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ *iter.next().unwrap() = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":463980,"byte_end":464013,"line_start":357,"line_end":357,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(iter.as_bitslice(), bits![0; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464015,"byte_end":464063,"line_start":358,"line_end":358,"column_start":2,"column_end":50}},{"value":"/ *iter.next().unwrap() = true;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464065,"byte_end":464098,"line_start":359,"line_end":359,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(iter.as_bitslice(), bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464100,"byte_end":464148,"line_start":360,"line_end":360,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464150,"byte_end":464153,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464155,"byte_end":464195,"line_start":362,"line_end":362,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464197,"byte_end":464204,"line_start":363,"line_end":363,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464206,"byte_end":464215,"line_start":364,"line_end":364,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464217,"byte_end":464247,"line_start":365,"line_end":365,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3513},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464536,"byte_end":464544,"line_start":374,"line_end":374,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IterMut>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464375,"byte_end":464384,"line_start":370,"line_end":370,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464386,"byte_end":464416,"line_start":371,"line_end":371,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464418,"byte_end":464464,"line_start":372,"line_end":372,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464466,"byte_end":464527,"line_start":373,"line_end":373,"column_start":2,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":3524},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":468954,"byte_end":468964,"line_start":562,"line_end":562,"column_start":10,"column_end":20},"name":"BitRefIter","qualname":"::slice::iter::BitRefIter","value":"Map<BitValIter, fn(: bool) -> &'a bool>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over `BitSlice` that yields `&bool` directly.\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that yields `&bool` directly.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":468883,"byte_end":468944,"line_start":561,"line_end":561,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3528},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":469099,"byte_end":469109,"line_start":565,"line_end":565,"column_start":12,"column_end":22},"name":"BitValIter","qualname":"::slice::iter::BitValIter","value":"BitValIter {  }","parent":null,"children":[{"krate":0,"index":3532},{"krate":0,"index":3533}],"decl_id":null,"docs":" An iterator over `BitSlice` that yields `bool` directly.\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that yields `bool` directly.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":469027,"byte_end":469087,"line_start":564,"line_end":564,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6158},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":469985,"byte_end":469992,"line_start":600,"line_end":600,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":6162},{"krate":0,"index":6163}],"decl_id":null,"docs":"# Bit-Slice Windowing","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6196},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":471677,"byte_end":471683,"line_start":676,"line_end":676,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":6200},{"krate":0,"index":6201}],"decl_id":null,"docs":"# Shared Bit-Slice Chunking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6235},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":473654,"byte_end":473663,"line_start":761,"line_end":761,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":6239},{"krate":0,"index":6240}],"decl_id":null,"docs":"# Exclusive Bit-Slice Chunking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6268},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":475700,"byte_end":475711,"line_start":847,"line_end":847,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":6272},{"krate":0,"index":6273},{"krate":0,"index":6274}],"decl_id":null,"docs":"# Shared Bit-Slice Exact Chunking","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3539},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476624,"byte_end":476633,"line_start":885,"line_end":885,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Gets the remnant bit-slice that the iterator will not yield.","sig":null,"attributes":[{"value":"/ Gets the remnant bit-slice that the iterator will not yield.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476412,"byte_end":476476,"line_start":878,"line_end":878,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476478,"byte_end":476481,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476483,"byte_end":476498,"line_start":880,"line_end":880,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476500,"byte_end":476503,"line_start":881,"line_end":881,"column_start":2,"column_end":5}},{"value":"/ [`ChunksExact::remainder`](core::slice::ChunksExact::remainder)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476505,"byte_end":476572,"line_start":882,"line_end":882,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476574,"byte_end":476583,"line_start":883,"line_end":883,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":476585,"byte_end":476615,"line_start":884,"line_end":884,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":6307},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478035,"byte_end":478049,"line_start":949,"line_end":949,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":6311},{"krate":0,"index":6312},{"krate":0,"index":6313}],"decl_id":null,"docs":"# Exclusive Bit-Slice Exact Chunking","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3545},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479083,"byte_end":479097,"line_start":990,"line_end":990,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the iterator, returning the remnant bit-slice that it will not\n yield.","sig":null,"attributes":[{"value":"/ Consumes the iterator, returning the remnant bit-slice that it will not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478815,"byte_end":478890,"line_start":980,"line_end":980,"column_start":2,"column_end":77}},{"value":"/ yield.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478892,"byte_end":478902,"line_start":981,"line_end":981,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478904,"byte_end":478907,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478909,"byte_end":478924,"line_start":983,"line_end":983,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478926,"byte_end":478929,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ [`ChunksExactMut::into_remainder`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478931,"byte_end":478972,"line_start":985,"line_end":985,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478974,"byte_end":478977,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ [0]: core::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478979,"byte_end":479031,"line_start":987,"line_end":987,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479033,"byte_end":479042,"line_start":988,"line_end":988,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479044,"byte_end":479074,"line_start":989,"line_end":989,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3546},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479639,"byte_end":479653,"line_start":1011,"line_end":1011,"column_start":9,"column_end":23},"name":"take_remainder","qualname":"<ChunksExactMut>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Takes the remnant bit-slice out of the iterator.","sig":null,"attributes":[{"value":"/ Takes the remnant bit-slice out of the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479157,"byte_end":479209,"line_start":994,"line_end":994,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479211,"byte_end":479214,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ The first time this is called, it will produce the remnant; on each","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479216,"byte_end":479287,"line_start":996,"line_end":996,"column_start":2,"column_end":73}},{"value":"/ subsequent call, it will produce an empty bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479289,"byte_end":479345,"line_start":997,"line_end":997,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479347,"byte_end":479350,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479352,"byte_end":479367,"line_start":999,"line_end":999,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479369,"byte_end":479372,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479374,"byte_end":479385,"line_start":1001,"line_end":1001,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479387,"byte_end":479414,"line_start":1002,"line_end":1002,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479416,"byte_end":479419,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479421,"byte_end":479452,"line_start":1004,"line_end":1004,"column_start":2,"column_end":33}},{"value":"/ let mut chunks = bits.chunks_exact_mut(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479454,"byte_end":479500,"line_start":1005,"line_end":1005,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479502,"byte_end":479505,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(chunks.take_remainder(), bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479507,"byte_end":479560,"line_start":1007,"line_end":1007,"column_start":2,"column_end":55}},{"value":"/ assert!(chunks.take_remainder().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479562,"byte_end":479610,"line_start":1008,"line_end":1008,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479612,"byte_end":479619,"line_start":1009,"line_end":1009,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":479621,"byte_end":479630,"line_start":1010,"line_end":1010,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":6341},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":481223,"byte_end":481230,"line_start":1076,"line_end":1076,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":6345},{"krate":0,"index":6346}],"decl_id":null,"docs":"# Shared Bit-Slice Reverse Chunking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6379},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":483999,"byte_end":484009,"line_start":1176,"line_end":1176,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":6383},{"krate":0,"index":6384}],"decl_id":null,"docs":"# Exclusive Bit-Slice Chunking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6412},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486063,"byte_end":486075,"line_start":1259,"line_end":1259,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":6416},{"krate":0,"index":6417},{"krate":0,"index":6418}],"decl_id":null,"docs":"# Shared Bit-Slice Reverse Exact Chunking","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3552},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486954,"byte_end":486963,"line_start":1296,"line_end":1296,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Gets the remnant bit-slice that the iterator will not yield.","sig":null,"attributes":[{"value":"/ Gets the remnant bit-slice that the iterator will not yield.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486740,"byte_end":486804,"line_start":1289,"line_end":1289,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486806,"byte_end":486809,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486811,"byte_end":486826,"line_start":1291,"line_end":1291,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486828,"byte_end":486831,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ [`RChunksExact::remainder`](core::slice::RChunksExact::remainder)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486833,"byte_end":486902,"line_start":1293,"line_end":1293,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486904,"byte_end":486913,"line_start":1294,"line_end":1294,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486915,"byte_end":486945,"line_start":1295,"line_end":1295,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":6451},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":488503,"byte_end":488518,"line_start":1361,"line_end":1361,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":6455},{"krate":0,"index":6456},{"krate":0,"index":6457}],"decl_id":null,"docs":"# Exclusive Bit-Slice Reverse Exact Chunking","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3558},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489518,"byte_end":489532,"line_start":1401,"line_end":1401,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the iterator, returning the remnant bit-slice that it will not\n yield.","sig":null,"attributes":[{"value":"/ Consumes the iterator, returning the remnant bit-slice that it will not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489248,"byte_end":489323,"line_start":1391,"line_end":1391,"column_start":2,"column_end":77}},{"value":"/ yield.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489325,"byte_end":489335,"line_start":1392,"line_end":1392,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489337,"byte_end":489340,"line_start":1393,"line_end":1393,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489342,"byte_end":489357,"line_start":1394,"line_end":1394,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489359,"byte_end":489362,"line_start":1395,"line_end":1395,"column_start":2,"column_end":5}},{"value":"/ [`RChunksExactMut::into_remainder`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489364,"byte_end":489406,"line_start":1396,"line_end":1396,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489408,"byte_end":489411,"line_start":1397,"line_end":1397,"column_start":2,"column_end":5}},{"value":"/ [0]: core::slice::RChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489413,"byte_end":489466,"line_start":1398,"line_end":1398,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489468,"byte_end":489477,"line_start":1399,"line_end":1399,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489479,"byte_end":489509,"line_start":1400,"line_end":1400,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3559},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":490075,"byte_end":490089,"line_start":1422,"line_end":1422,"column_start":9,"column_end":23},"name":"take_remainder","qualname":"<RChunksExactMut>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'a mut BitSlice<T::Alias, O>","parent":null,"children":[],"decl_id":null,"docs":" Takes the remnant bit-slice out of the iterator.","sig":null,"attributes":[{"value":"/ Takes the remnant bit-slice out of the iterator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489592,"byte_end":489644,"line_start":1405,"line_end":1405,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489646,"byte_end":489649,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ The first time this is called, it will produce the remnant; on each","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489651,"byte_end":489722,"line_start":1407,"line_end":1407,"column_start":2,"column_end":73}},{"value":"/ subsequent call, it will produce an empty bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489724,"byte_end":489780,"line_start":1408,"line_end":1408,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489782,"byte_end":489785,"line_start":1409,"line_end":1409,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489787,"byte_end":489802,"line_start":1410,"line_end":1410,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489804,"byte_end":489807,"line_start":1411,"line_end":1411,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489809,"byte_end":489820,"line_start":1412,"line_end":1412,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489822,"byte_end":489849,"line_start":1413,"line_end":1413,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489851,"byte_end":489854,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 5];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489856,"byte_end":489887,"line_start":1415,"line_end":1415,"column_start":2,"column_end":33}},{"value":"/ let mut chunks = bits.rchunks_exact_mut(3);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489889,"byte_end":489936,"line_start":1416,"line_end":1416,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489938,"byte_end":489941,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(chunks.take_remainder(), bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489943,"byte_end":489996,"line_start":1418,"line_end":1418,"column_start":2,"column_end":55}},{"value":"/ assert!(chunks.take_remainder().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":489998,"byte_end":490046,"line_start":1419,"line_end":1419,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":490048,"byte_end":490055,"line_start":1420,"line_end":1420,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":490057,"byte_end":490066,"line_start":1421,"line_end":1421,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":6510},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":494133,"byte_end":494138,"line_start":1617,"line_end":1617,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6515},{"krate":0,"index":6516},{"krate":0,"index":6517}],"decl_id":null,"docs":"# Shared Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3562},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":495329,"byte_end":495337,"line_start":1674,"line_end":1674,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569}],"decl_id":null,"docs":"# Exclusive Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6600},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":496833,"byte_end":496847,"line_start":1740,"line_end":1740,"column_start":12,"column_end":26},"name":"SplitInclusive","qualname":"::slice::iter::SplitInclusive","value":"SplitInclusive {  }","parent":null,"children":[{"krate":0,"index":6605},{"krate":0,"index":6606},{"krate":0,"index":6607}],"decl_id":null,"docs":"# Shared Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3570},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":498196,"byte_end":498213,"line_start":1801,"line_end":1801,"column_start":12,"column_end":29},"name":"SplitInclusiveMut","qualname":"::slice::iter::SplitInclusiveMut","value":"SplitInclusiveMut {  }","parent":null,"children":[{"krate":0,"index":3575},{"krate":0,"index":3576},{"krate":0,"index":3577}],"decl_id":null,"docs":"# Exclusive Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6694},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":499748,"byte_end":499754,"line_start":1870,"line_end":1870,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":6699},{"krate":0,"index":6700},{"krate":0,"index":6701}],"decl_id":null,"docs":"# Shared Bit-Slice Reverse Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3578},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":500786,"byte_end":500795,"line_start":1913,"line_end":1913,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3585}],"decl_id":null,"docs":"# Exclusive Bit-Slice Reverse Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6780},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":502207,"byte_end":502213,"line_start":1964,"line_end":1964,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":6785},{"krate":0,"index":6786}],"decl_id":null,"docs":"# Shared Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3588},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":502494,"byte_end":502503,"line_start":1977,"line_end":1977,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":3593},{"krate":0,"index":3594}],"decl_id":null,"docs":"# Exclusive Bit-Slice Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6793},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":502802,"byte_end":502809,"line_start":1991,"line_end":1991,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":6798},{"krate":0,"index":6799}],"decl_id":null,"docs":"# Shared Bit-Slice Reverse Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3595},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":503092,"byte_end":503102,"line_start":2004,"line_end":2004,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":3600},{"krate":0,"index":3601}],"decl_id":null,"docs":"# Exclusive Bit-Slice Reverse Splitting","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6902},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":505486,"byte_end":505494,"line_start":2107,"line_end":2107,"column_start":12,"column_end":20},"name":"IterOnes","qualname":"::slice::iter::IterOnes","value":"IterOnes {  }","parent":null,"children":[{"krate":0,"index":6906},{"krate":0,"index":6907}],"decl_id":null,"docs":"# Bit Seeking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6954},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508028,"byte_end":508037,"line_start":2239,"line_end":2239,"column_start":12,"column_end":21},"name":"IterZeros","qualname":"::slice::iter::IterZeros","value":"IterZeros {  }","parent":null,"children":[{"krate":0,"index":6958},{"krate":0,"index":6959}],"decl_id":null,"docs":"# Bit Seeking","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7006},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":514599,"byte_end":514613,"line_start":2513,"line_end":2513,"column_start":5,"column_end":19},"name":"IterMutNoAlias","qualname":"::slice::iter::IterMutNoAlias","value":"IterMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7010}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7046},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":514732,"byte_end":514748,"line_start":2517,"line_end":2517,"column_start":5,"column_end":21},"name":"ChunksMutNoAlias","qualname":"::slice::iter::ChunksMutNoAlias","value":"ChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7050}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7086},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":514856,"byte_end":514877,"line_start":2521,"line_end":2521,"column_start":5,"column_end":26},"name":"ChunksExactMutNoAlias","qualname":"::slice::iter::ChunksExactMutNoAlias","value":"ChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7090}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7126},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":514981,"byte_end":514998,"line_start":2525,"line_end":2525,"column_start":5,"column_end":22},"name":"RChunksMutNoAlias","qualname":"::slice::iter::RChunksMutNoAlias","value":"RChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7130}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7166},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515107,"byte_end":515129,"line_start":2529,"line_end":2529,"column_start":5,"column_end":27},"name":"RChunksExactMutNoAlias","qualname":"::slice::iter::RChunksExactMutNoAlias","value":"RChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7170}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7206},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515235,"byte_end":515250,"line_start":2533,"line_end":2533,"column_start":5,"column_end":20},"name":"SplitMutNoAlias","qualname":"::slice::iter::SplitMutNoAlias","value":"SplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7211}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7252},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515365,"byte_end":515389,"line_start":2537,"line_end":2537,"column_start":5,"column_end":29},"name":"SplitInclusiveMutNoAlias","qualname":"::slice::iter::SplitInclusiveMutNoAlias","value":"SplitInclusiveMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7257}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7298},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515496,"byte_end":515512,"line_start":2541,"line_end":2541,"column_start":5,"column_end":21},"name":"RSplitMutNoAlias","qualname":"::slice::iter::RSplitMutNoAlias","value":"RSplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7303}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7344},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515619,"byte_end":515635,"line_start":2545,"line_end":2545,"column_start":5,"column_end":21},"name":"SplitNMutNoAlias","qualname":"::slice::iter::SplitNMutNoAlias","value":"SplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7349}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7390},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515743,"byte_end":515760,"line_start":2549,"line_end":2549,"column_start":5,"column_end":22},"name":"RSplitNMutNoAlias","qualname":"::slice::iter::RSplitNMutNoAlias","value":"RSplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":7395}],"decl_id":null,"docs":"# Anti-Aliasing Iterator Adapter","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510980,"byte_end":511000,"line_start":2383,"line_end":2383,"column_start":3,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516034,"byte_end":516048,"line_start":2562,"line_end":2562,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMutNoAlias>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" See [`ChunksExactMut::into_remainder()`][0].","sig":null,"attributes":[{"value":"/ See [`ChunksExactMut::into_remainder()`][0].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515906,"byte_end":515954,"line_start":2558,"line_end":2558,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515956,"byte_end":515959,"line_start":2559,"line_end":2559,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515961,"byte_end":516014,"line_start":2560,"line_end":2560,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516016,"byte_end":516025,"line_start":2561,"line_end":2561,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516279,"byte_end":516293,"line_start":2570,"line_end":2570,"column_start":9,"column_end":23},"name":"take_remainder","qualname":"<ChunksExactMutNoAlias>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'a mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" See [`ChunksExactMut::take_remainder()`][0]","sig":null,"attributes":[{"value":"/ See [`ChunksExactMut::take_remainder()`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516152,"byte_end":516199,"line_start":2566,"line_end":2566,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516201,"byte_end":516204,"line_start":2567,"line_end":2567,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::slice::ChunksExactMut::take_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516206,"byte_end":516259,"line_start":2568,"line_end":2568,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516261,"byte_end":516270,"line_start":2569,"line_end":2569,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516622,"byte_end":516636,"line_start":2584,"line_end":2584,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMutNoAlias>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" See [`RChunksExactMut::into_remainder()`][0]","sig":null,"attributes":[{"value":"/ See [`RChunksExactMut::into_remainder()`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516493,"byte_end":516541,"line_start":2580,"line_end":2580,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516543,"byte_end":516546,"line_start":2581,"line_end":2581,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::slice::RChunksExactMut::into_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516548,"byte_end":516602,"line_start":2582,"line_end":2582,"column_start":2,"column_end":56}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516604,"byte_end":516613,"line_start":2583,"line_end":2583,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516870,"byte_end":516884,"line_start":2592,"line_end":2592,"column_start":9,"column_end":23},"name":"take_remainder","qualname":"<RChunksExactMutNoAlias>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'a mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" See [`RChunksExactMut::take_remainder()`][0]","sig":null,"attributes":[{"value":"/ See [`RChunksExactMut::take_remainder()`][0]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516740,"byte_end":516788,"line_start":2588,"line_end":2588,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516790,"byte_end":516793,"line_start":2589,"line_end":2589,"column_start":2,"column_end":5}},{"value":"/ [0]:  crate::slice::RChunksExactMut::take_remainder","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516795,"byte_end":516850,"line_start":2590,"line_end":2590,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516852,"byte_end":516861,"line_start":2591,"line_end":2591,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4157},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":324174,"byte_end":324182,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":4160},{"krate":0,"index":4161},{"krate":0,"index":4162}],"decl_id":null,"docs":"# Bit-Addressable Memory","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":324092,"byte_end":324112,"line_start":58,"line_end":58,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4166},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325712,"byte_end":325717,"line_start":109,"line_end":109,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<T, O>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces an empty bit-slice with an arbitrary lifetime.","sig":null,"attributes":[{"value":"/ Produces an empty bit-slice with an arbitrary lifetime.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325358,"byte_end":325417,"line_start":94,"line_end":94,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325419,"byte_end":325422,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325424,"byte_end":325439,"line_start":96,"line_end":96,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325441,"byte_end":325444,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to the `&[]` literal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325446,"byte_end":325490,"line_start":98,"line_end":98,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325492,"byte_end":325495,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325497,"byte_end":325512,"line_start":100,"line_end":100,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325514,"byte_end":325517,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325519,"byte_end":325530,"line_start":102,"line_end":102,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325532,"byte_end":325559,"line_start":103,"line_end":103,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325561,"byte_end":325564,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ assert!(BitSlice::<u16, LocalBits>::empty().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325566,"byte_end":325626,"line_start":105,"line_end":105,"column_start":2,"column_end":62}},{"value":"/ assert_eq!(bits![], BitSlice::<u8, Msb0>::empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325628,"byte_end":325683,"line_start":106,"line_end":106,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325685,"byte_end":325692,"line_start":107,"line_end":107,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325694,"byte_end":325703,"line_start":108,"line_end":108,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4168},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326175,"byte_end":326184,"line_start":128,"line_end":128,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<T, O>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces an empty bit-slice with an arbitrary lifetime.","sig":null,"attributes":[{"value":"/ Produces an empty bit-slice with an arbitrary lifetime.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325806,"byte_end":325865,"line_start":113,"line_end":113,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325867,"byte_end":325870,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325872,"byte_end":325887,"line_start":115,"line_end":115,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325889,"byte_end":325892,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to the `&mut []` literal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325894,"byte_end":325942,"line_start":117,"line_end":117,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325944,"byte_end":325947,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325949,"byte_end":325964,"line_start":119,"line_end":119,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325966,"byte_end":325969,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325971,"byte_end":325982,"line_start":121,"line_end":121,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325984,"byte_end":326011,"line_start":122,"line_end":122,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326013,"byte_end":326016,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ assert!(BitSlice::<u16, LocalBits>::empty_mut().is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326018,"byte_end":326082,"line_start":124,"line_end":124,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bits![mut], BitSlice::<u8, Msb0>::empty_mut());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326084,"byte_end":326146,"line_start":125,"line_end":125,"column_start":2,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326148,"byte_end":326155,"line_start":126,"line_end":126,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326157,"byte_end":326166,"line_start":127,"line_end":127,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4170},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327106,"byte_end":327118,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<T, O>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326275,"byte_end":326343,"line_start":132,"line_end":132,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326345,"byte_end":326348,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326350,"byte_end":326422,"line_start":134,"line_end":134,"column_start":2,"column_end":74}},{"value":"/ provides a [`.view_bits::<O>()`] method which delegates to this function","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326424,"byte_end":326500,"line_start":135,"line_end":135,"column_start":2,"column_end":78}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326502,"byte_end":326550,"line_start":136,"line_end":136,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326552,"byte_end":326555,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326557,"byte_end":326574,"line_start":138,"line_end":138,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326576,"byte_end":326579,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326581,"byte_end":326634,"line_start":140,"line_end":140,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326636,"byte_end":326639,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326641,"byte_end":326655,"line_start":142,"line_end":142,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326657,"byte_end":326660,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over `elem`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326662,"byte_end":326699,"line_start":144,"line_end":144,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326701,"byte_end":326704,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326706,"byte_end":326721,"line_start":146,"line_end":146,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326723,"byte_end":326726,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326728,"byte_end":326739,"line_start":148,"line_end":148,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326741,"byte_end":326768,"line_start":149,"line_end":149,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326770,"byte_end":326773,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326775,"byte_end":326794,"line_start":151,"line_end":151,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<_, Lsb0>::from_element(&elem);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326796,"byte_end":326852,"line_start":152,"line_end":152,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326854,"byte_end":326884,"line_start":153,"line_end":153,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326886,"byte_end":326889,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ let bits = elem.view_bits::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326891,"byte_end":326931,"line_start":155,"line_end":155,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326933,"byte_end":326940,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326942,"byte_end":326945,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326947,"byte_end":326987,"line_start":158,"line_end":158,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":326989,"byte_end":327026,"line_start":159,"line_end":159,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327028,"byte_end":327086,"line_start":160,"line_end":160,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327088,"byte_end":327097,"line_start":161,"line_end":161,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4171},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328311,"byte_end":328327,"line_start":205,"line_end":205,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<T, O>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327257,"byte_end":327327,"line_start":170,"line_end":170,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327329,"byte_end":327332,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327334,"byte_end":327406,"line_start":172,"line_end":172,"column_start":2,"column_end":74}},{"value":"/ provides a [`.view_bits_mut::<O>()`] method which delegates to this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327408,"byte_end":327479,"line_start":173,"line_end":173,"column_start":2,"column_end":73}},{"value":"/ function and may be more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327481,"byte_end":327538,"line_start":174,"line_end":174,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327540,"byte_end":327543,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327545,"byte_end":327562,"line_start":176,"line_end":176,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327564,"byte_end":327567,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327569,"byte_end":327626,"line_start":178,"line_end":178,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327628,"byte_end":327631,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327633,"byte_end":327647,"line_start":180,"line_end":180,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327649,"byte_end":327652,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over `elem`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327654,"byte_end":327699,"line_start":182,"line_end":182,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327701,"byte_end":327704,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327706,"byte_end":327778,"line_start":184,"line_end":184,"column_start":2,"column_end":74}},{"value":"/ duration of the returned bit-slice handle’s lifetime.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327780,"byte_end":327839,"line_start":185,"line_end":185,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327841,"byte_end":327844,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327846,"byte_end":327861,"line_start":187,"line_end":187,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327863,"byte_end":327866,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327868,"byte_end":327879,"line_start":189,"line_end":189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327881,"byte_end":327908,"line_start":190,"line_end":190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327910,"byte_end":327913,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327915,"byte_end":327938,"line_start":192,"line_end":192,"column_start":2,"column_end":25}},{"value":"/ let bits = BitSlice::<_, Lsb0>::from_element_mut(&mut elem);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":327940,"byte_end":328004,"line_start":193,"line_end":193,"column_start":2,"column_end":66}},{"value":"/ bits.set(1, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328006,"byte_end":328028,"line_start":194,"line_end":194,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328030,"byte_end":328051,"line_start":195,"line_end":195,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(elem, 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328053,"byte_end":328077,"line_start":196,"line_end":196,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328079,"byte_end":328082,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ let bits = elem.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328084,"byte_end":328128,"line_start":198,"line_end":198,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328130,"byte_end":328137,"line_start":199,"line_end":199,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328139,"byte_end":328142,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328144,"byte_end":328184,"line_start":201,"line_end":201,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328186,"byte_end":328223,"line_start":202,"line_end":202,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328225,"byte_end":328291,"line_start":203,"line_end":203,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328293,"byte_end":328302,"line_start":204,"line_end":204,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4172},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329377,"byte_end":329387,"line_start":246,"line_end":246,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<T, O>>::from_slice","value":"pub fn from_slice(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a slice of elements.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a slice of elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328474,"byte_end":328545,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328547,"byte_end":328550,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328552,"byte_end":328622,"line_start":215,"line_end":215,"column_start":2,"column_end":72}},{"value":"/ [`.view_bits::<O>()`] method which delegates to this function and may be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328624,"byte_end":328700,"line_start":216,"line_end":216,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328702,"byte_end":328739,"line_start":217,"line_end":217,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328741,"byte_end":328744,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328746,"byte_end":328763,"line_start":219,"line_end":219,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328765,"byte_end":328768,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference to a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328770,"byte_end":328834,"line_start":221,"line_end":221,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328836,"byte_end":328839,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328841,"byte_end":328855,"line_start":223,"line_end":223,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328857,"byte_end":328860,"line_start":224,"line_end":224,"column_start":2,"column_end":5}},{"value":"/ A shared `BitSlice` reference over all of `slice`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328862,"byte_end":328916,"line_start":225,"line_end":225,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328918,"byte_end":328921,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328923,"byte_end":328936,"line_start":227,"line_end":227,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328938,"byte_end":328941,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ This will panic if `slice` is too long to encode as a bit-slice view.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":328943,"byte_end":329016,"line_start":229,"line_end":229,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329018,"byte_end":329021,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329023,"byte_end":329038,"line_start":231,"line_end":231,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329040,"byte_end":329043,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329045,"byte_end":329056,"line_start":233,"line_end":233,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329058,"byte_end":329085,"line_start":234,"line_end":234,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329087,"byte_end":329090,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ let data = [0u16, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329092,"byte_end":329117,"line_start":236,"line_end":236,"column_start":2,"column_end":27}},{"value":"/ let bits = BitSlice::<_, Lsb0>::from_slice(&data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329119,"byte_end":329173,"line_start":237,"line_end":237,"column_start":2,"column_end":56}},{"value":"/ assert!(bits[16]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329175,"byte_end":329197,"line_start":238,"line_end":238,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329199,"byte_end":329202,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329204,"byte_end":329244,"line_start":240,"line_end":240,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329246,"byte_end":329253,"line_start":241,"line_end":241,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329255,"byte_end":329258,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329260,"byte_end":329297,"line_start":243,"line_end":243,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329299,"byte_end":329357,"line_start":244,"line_end":244,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329359,"byte_end":329368,"line_start":245,"line_end":245,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4173},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330610,"byte_end":330624,"line_start":286,"line_end":286,"column_start":9,"column_end":23},"name":"try_from_slice","qualname":"<BitSlice<T, O>>::try_from_slice","value":"pub fn try_from_slice(&[T]) -> Result<&Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a shared `&BitSlice` reference over a slice of\n elements.","sig":null,"attributes":[{"value":"/ Attempts to construct a shared `&BitSlice` reference over a slice of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329456,"byte_end":329528,"line_start":250,"line_end":250,"column_start":2,"column_end":74}},{"value":"/ elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329530,"byte_end":329543,"line_start":251,"line_end":251,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329545,"byte_end":329548,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`], implemented on all `[T]` slices, provides a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329550,"byte_end":329614,"line_start":253,"line_end":253,"column_start":2,"column_end":66}},{"value":"/ [`.try_view_bits::<O>()`] method which delegates to this function and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329616,"byte_end":329689,"line_start":254,"line_end":254,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329691,"byte_end":329735,"line_start":255,"line_end":255,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329737,"byte_end":329740,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ This is *very hard*, if not impossible, to cause to fail. Rust will not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329742,"byte_end":329817,"line_start":257,"line_end":257,"column_start":2,"column_end":77}},{"value":"/ create excessive arrays on 64-bit architectures.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329819,"byte_end":329871,"line_start":258,"line_end":258,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329873,"byte_end":329876,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329878,"byte_end":329895,"line_start":260,"line_end":260,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329897,"byte_end":329900,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference to a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329902,"byte_end":329966,"line_start":262,"line_end":262,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329968,"byte_end":329971,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329973,"byte_end":329987,"line_start":264,"line_end":264,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329989,"byte_end":329992,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over `slice`. If `slice` is longer than can be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":329994,"byte_end":330065,"line_start":266,"line_end":266,"column_start":2,"column_end":73}},{"value":"/ encoded into a `&BitSlice` (see [`MAX_ELTS`]), this will fail and return","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330067,"byte_end":330143,"line_start":267,"line_end":267,"column_start":2,"column_end":78}},{"value":"/ the original `slice` as an error.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330145,"byte_end":330182,"line_start":268,"line_end":268,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330184,"byte_end":330187,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330189,"byte_end":330204,"line_start":270,"line_end":270,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330206,"byte_end":330209,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330211,"byte_end":330222,"line_start":272,"line_end":272,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330224,"byte_end":330251,"line_start":273,"line_end":273,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330253,"byte_end":330256,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330258,"byte_end":330282,"line_start":275,"line_end":275,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<_, Msb0>::try_from_slice(&data).unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330284,"byte_end":330351,"line_start":276,"line_end":276,"column_start":2,"column_end":69}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330353,"byte_end":330375,"line_start":277,"line_end":277,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330377,"byte_end":330380,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ let bits = data.try_view_bits::<Msb0>().unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330382,"byte_end":330435,"line_start":279,"line_end":279,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330437,"byte_end":330444,"line_start":280,"line_end":280,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330446,"byte_end":330449,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330451,"byte_end":330488,"line_start":282,"line_end":282,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330490,"byte_end":330522,"line_start":283,"line_end":283,"column_start":2,"column_end":34}},{"value":"/ [`.try_view_bits::<O>()`]: crate::view::BitView::try_view_bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330524,"byte_end":330590,"line_start":284,"line_end":284,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330592,"byte_end":330601,"line_start":285,"line_end":285,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4174},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331900,"byte_end":331914,"line_start":334,"line_end":334,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<T, O>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice of\n elements.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330901,"byte_end":330970,"line_start":298,"line_end":298,"column_start":2,"column_end":71}},{"value":"/ elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330972,"byte_end":330985,"line_start":299,"line_end":299,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330987,"byte_end":330990,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":330992,"byte_end":331062,"line_start":301,"line_end":301,"column_start":2,"column_end":72}},{"value":"/ [`.view_bits_mut::<O>()`] method which delegates to this function and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331064,"byte_end":331137,"line_start":302,"line_end":302,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331139,"byte_end":331183,"line_start":303,"line_end":303,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331185,"byte_end":331188,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331190,"byte_end":331207,"line_start":305,"line_end":305,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331209,"byte_end":331212,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference to a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331214,"byte_end":331282,"line_start":307,"line_end":307,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331284,"byte_end":331287,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331289,"byte_end":331303,"line_start":309,"line_end":309,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331305,"byte_end":331308,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over all of `slice`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331310,"byte_end":331363,"line_start":311,"line_end":311,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331365,"byte_end":331368,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331370,"byte_end":331383,"line_start":313,"line_end":313,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331385,"byte_end":331388,"line_start":314,"line_end":314,"column_start":2,"column_end":5}},{"value":"/ This panics if `slice` is too long to encode as a bit-slice view.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331390,"byte_end":331459,"line_start":315,"line_end":315,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331461,"byte_end":331464,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331466,"byte_end":331481,"line_start":317,"line_end":317,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331483,"byte_end":331486,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331488,"byte_end":331499,"line_start":319,"line_end":319,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331501,"byte_end":331528,"line_start":320,"line_end":320,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331530,"byte_end":331533,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331535,"byte_end":331564,"line_start":322,"line_end":322,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<_, Lsb0>::from_slice_mut(&mut data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331566,"byte_end":331628,"line_start":323,"line_end":323,"column_start":2,"column_end":64}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331630,"byte_end":331652,"line_start":324,"line_end":324,"column_start":2,"column_end":24}},{"value":"/ bits.set(17, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331654,"byte_end":331677,"line_start":325,"line_end":325,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(data, [1, 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331679,"byte_end":331708,"line_start":326,"line_end":326,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331710,"byte_end":331713,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331715,"byte_end":331759,"line_start":328,"line_end":328,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331761,"byte_end":331768,"line_start":329,"line_end":329,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331770,"byte_end":331773,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331775,"byte_end":331812,"line_start":331,"line_end":331,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331814,"byte_end":331880,"line_start":332,"line_end":332,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331882,"byte_end":331891,"line_start":333,"line_end":333,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333127,"byte_end":333145,"line_start":373,"line_end":373,"column_start":9,"column_end":27},"name":"try_from_slice_mut","qualname":"<BitSlice<T, O>>::try_from_slice_mut","value":"pub fn try_from_slice_mut(&mut [T]) -> Result<&mut Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct an exclusive `&mut BitSlice` reference over a\n slice of elements.","sig":null,"attributes":[{"value":"/ Attempts to construct an exclusive `&mut BitSlice` reference over a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":331995,"byte_end":332066,"line_start":338,"line_end":338,"column_start":2,"column_end":73}},{"value":"/ slice of elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332068,"byte_end":332090,"line_start":339,"line_end":339,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332092,"byte_end":332095,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332097,"byte_end":332167,"line_start":341,"line_end":341,"column_start":2,"column_end":72}},{"value":"/ [`.try_view_bits_mut::<O>()`] method which delegates to this function","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332169,"byte_end":332242,"line_start":342,"line_end":342,"column_start":2,"column_end":75}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332244,"byte_end":332292,"line_start":343,"line_end":343,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332294,"byte_end":332297,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332299,"byte_end":332316,"line_start":345,"line_end":345,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332318,"byte_end":332321,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference to a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332323,"byte_end":332391,"line_start":347,"line_end":347,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332393,"byte_end":332396,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332398,"byte_end":332412,"line_start":349,"line_end":349,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332414,"byte_end":332417,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over `slice`. If `slice` is longer than can","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332419,"byte_end":332495,"line_start":351,"line_end":351,"column_start":2,"column_end":78}},{"value":"/ be encoded into a `&mut BitSlice` (see [`MAX_ELTS`]), this will fail and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332497,"byte_end":332573,"line_start":352,"line_end":352,"column_start":2,"column_end":78}},{"value":"/ return the original `slice` as an error.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332575,"byte_end":332619,"line_start":353,"line_end":353,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332621,"byte_end":332624,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332626,"byte_end":332641,"line_start":355,"line_end":355,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332643,"byte_end":332646,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332648,"byte_end":332659,"line_start":357,"line_end":357,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332661,"byte_end":332688,"line_start":358,"line_end":358,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332690,"byte_end":332693,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332695,"byte_end":332723,"line_start":360,"line_end":360,"column_start":2,"column_end":30}},{"value":"/ let bits = BitSlice::<_, Msb0>::try_from_slice_mut(&mut data).unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332725,"byte_end":332800,"line_start":361,"line_end":361,"column_start":2,"column_end":77}},{"value":"/ bits.set(7, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332802,"byte_end":332824,"line_start":362,"line_end":362,"column_start":2,"column_end":24}},{"value":"/ bits.set(15, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332826,"byte_end":332849,"line_start":363,"line_end":363,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(data, [1; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332851,"byte_end":332880,"line_start":364,"line_end":364,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332882,"byte_end":332885,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ let bits = data.try_view_bits_mut::<Msb0>().unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332887,"byte_end":332944,"line_start":366,"line_end":366,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332946,"byte_end":332953,"line_start":367,"line_end":367,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332955,"byte_end":332958,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332960,"byte_end":332997,"line_start":369,"line_end":369,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":332999,"byte_end":333031,"line_start":370,"line_end":370,"column_start":2,"column_end":34}},{"value":"/ [`.try_view_bits_mut::<O>()`]: crate::view::BitView::try_view_bits_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333033,"byte_end":333107,"line_start":371,"line_end":371,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333109,"byte_end":333118,"line_start":372,"line_end":372,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4176},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334019,"byte_end":334039,"line_start":402,"line_end":402,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<T, O>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` over an element slice, without checking\n its length.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` over an element slice, without checking","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333440,"byte_end":333515,"line_start":387,"line_end":387,"column_start":2,"column_end":77}},{"value":"/ its length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333517,"byte_end":333532,"line_start":388,"line_end":388,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333534,"byte_end":333537,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ If `slice` is too long to encode into a `&BitSlice`, then the produced","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333539,"byte_end":333613,"line_start":390,"line_end":390,"column_start":2,"column_end":76}},{"value":"/ bit-slice’s length is unspecified.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333615,"byte_end":333655,"line_start":391,"line_end":391,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333657,"byte_end":333660,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333662,"byte_end":333675,"line_start":393,"line_end":393,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333677,"byte_end":333680,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `slice.len() < BitSlice::MAX_ELTS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333682,"byte_end":333742,"line_start":395,"line_end":395,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333744,"byte_end":333747,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ Calling this function with an over-long slice is **library-level**","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333749,"byte_end":333819,"line_start":397,"line_end":397,"column_start":2,"column_end":72}},{"value":"/ undefined behavior. You may not assume anything about its implementation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333821,"byte_end":333897,"line_start":398,"line_end":398,"column_start":2,"column_end":78}},{"value":"/ or behavior, and must conservatively assume that over-long slices cause","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333899,"byte_end":333974,"line_start":399,"line_end":399,"column_start":2,"column_end":77}},{"value":"/ compiler UB.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333976,"byte_end":333992,"line_start":400,"line_end":400,"column_start":2,"column_end":18}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":333994,"byte_end":334003,"line_start":401,"line_end":401,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4177},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334802,"byte_end":334826,"line_start":424,"line_end":424,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<T, O>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` over an element slice, without\n checking its length.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` over an element slice, without","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334211,"byte_end":334285,"line_start":409,"line_end":409,"column_start":2,"column_end":76}},{"value":"/ checking its length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334287,"byte_end":334311,"line_start":410,"line_end":410,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334313,"byte_end":334316,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ If `slice` is too long to encode into a `&mut BitSlice`, then the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334318,"byte_end":334387,"line_start":412,"line_end":412,"column_start":2,"column_end":71}},{"value":"/ produced bit-slice’s length is unspecified.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334389,"byte_end":334438,"line_start":413,"line_end":413,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334440,"byte_end":334443,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334445,"byte_end":334458,"line_start":415,"line_end":415,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334460,"byte_end":334463,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `slice.len() < BitSlice::MAX_ELTS`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334465,"byte_end":334525,"line_start":417,"line_end":417,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334527,"byte_end":334530,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ Calling this function with an over-long slice is **library-level**","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334532,"byte_end":334602,"line_start":419,"line_end":419,"column_start":2,"column_end":72}},{"value":"/ undefined behavior. You may not assume anything about its implementation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334604,"byte_end":334680,"line_start":420,"line_end":420,"column_start":2,"column_end":78}},{"value":"/ or behavior, and must conservatively assume that over-long slices cause","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334682,"byte_end":334757,"line_start":421,"line_end":421,"column_start":2,"column_end":77}},{"value":"/ compiler UB.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334759,"byte_end":334775,"line_start":422,"line_end":422,"column_start":2,"column_end":18}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":334777,"byte_end":334786,"line_start":423,"line_end":423,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4181},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335444,"byte_end":335453,"line_start":449,"line_end":449,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitSlice<T, O>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw pointer to the zeroth bit of the bit-slice.","sig":null,"attributes":[{"value":"/ Gets a raw pointer to the zeroth bit of the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335107,"byte_end":335165,"line_start":438,"line_end":438,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335167,"byte_end":335170,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335172,"byte_end":335187,"line_start":440,"line_end":440,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335189,"byte_end":335192,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335194,"byte_end":335281,"line_start":442,"line_end":442,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335283,"byte_end":335286,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335288,"byte_end":335310,"line_start":444,"line_end":444,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335312,"byte_end":335315,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ This is renamed in order to indicate that it is returning a `bitvec`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335317,"byte_end":335389,"line_start":446,"line_end":446,"column_start":2,"column_end":74}},{"value":"/ structure, not a raw pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335391,"byte_end":335424,"line_start":447,"line_end":447,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335426,"byte_end":335435,"line_start":448,"line_end":448,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4182},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335883,"byte_end":335896,"line_start":464,"line_end":464,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitSlice<T, O>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw, write-capable pointer to the zeroth bit of the bit-slice.","sig":null,"attributes":[{"value":"/ Gets a raw, write-capable pointer to the zeroth bit of the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335523,"byte_end":335596,"line_start":453,"line_end":453,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335598,"byte_end":335601,"line_start":454,"line_end":454,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335603,"byte_end":335618,"line_start":455,"line_end":455,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335620,"byte_end":335623,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335625,"byte_end":335720,"line_start":457,"line_end":457,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335722,"byte_end":335725,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335727,"byte_end":335749,"line_start":459,"line_end":459,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335751,"byte_end":335754,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ This is renamed in order to indicate that it is returning a `bitvec`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335756,"byte_end":335828,"line_start":461,"line_end":461,"column_start":2,"column_end":74}},{"value":"/ structure, not a raw pointer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335830,"byte_end":335863,"line_start":462,"line_end":462,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335865,"byte_end":335874,"line_start":463,"line_end":463,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4183},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336653,"byte_end":336668,"line_start":488,"line_end":488,"column_start":9,"column_end":24},"name":"as_bitptr_range","qualname":"<BitSlice<T, O>>::as_bitptr_range","value":"pub fn as_bitptr_range(&Self) -> BitPtrRange<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-slice as a half-open range of bit-pointers, to its first\n bit *in* the bit-slice and first bit *beyond* it.","sig":null,"attributes":[{"value":"/ Views the bit-slice as a half-open range of bit-pointers, to its first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335972,"byte_end":336046,"line_start":468,"line_end":468,"column_start":2,"column_end":76}},{"value":"/ bit *in* the bit-slice and first bit *beyond* it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336048,"byte_end":336101,"line_start":469,"line_end":469,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336103,"byte_end":336106,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336108,"byte_end":336123,"line_start":471,"line_end":471,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336125,"byte_end":336128,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336130,"byte_end":336229,"line_start":473,"line_end":473,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336231,"byte_end":336234,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336236,"byte_end":336258,"line_start":475,"line_end":475,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336260,"byte_end":336263,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ This is renamed to indicate that it returns a `bitvec` structure, rather","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336265,"byte_end":336341,"line_start":477,"line_end":477,"column_start":2,"column_end":78}},{"value":"/ than an ordinary `Range`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336343,"byte_end":336372,"line_start":478,"line_end":478,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336374,"byte_end":336377,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336379,"byte_end":336391,"line_start":480,"line_end":480,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336393,"byte_end":336396,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` does define a [`.as_ptr_range()`], which returns a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336398,"byte_end":336463,"line_start":482,"line_end":482,"column_start":2,"column_end":67}},{"value":"/ `Range<BitPtr>`. `BitPtrRange` has additional capabilities that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336465,"byte_end":336532,"line_start":483,"line_end":483,"column_start":2,"column_end":69}},{"value":"/ `Range<*const T>` and `Range<BitPtr>` do not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336534,"byte_end":336583,"line_start":484,"line_end":484,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336585,"byte_end":336588,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ [`.as_ptr_range()`]: Self::as_ptr_range","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336590,"byte_end":336633,"line_start":486,"line_end":486,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336635,"byte_end":336644,"line_start":487,"line_end":487,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4184},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337408,"byte_end":337427,"line_start":510,"line_end":510,"column_start":9,"column_end":28},"name":"as_mut_bitptr_range","qualname":"<BitSlice<T, O>>::as_mut_bitptr_range","value":"pub fn as_mut_bitptr_range(&mut Self) -> BitPtrRange<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-slice as a half-open range of write-capable bit-pointers,\n to its first bit *in* the bit-slice and the first bit *beyond* it.","sig":null,"attributes":[{"value":"/ Views the bit-slice as a half-open range of write-capable bit-pointers,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336749,"byte_end":336824,"line_start":492,"line_end":492,"column_start":2,"column_end":77}},{"value":"/ to its first bit *in* the bit-slice and the first bit *beyond* it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336826,"byte_end":336896,"line_start":493,"line_end":493,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336898,"byte_end":336901,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336903,"byte_end":336918,"line_start":495,"line_end":495,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336920,"byte_end":336923,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":336925,"byte_end":337032,"line_start":497,"line_end":497,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337034,"byte_end":337037,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337039,"byte_end":337061,"line_start":499,"line_end":499,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337063,"byte_end":337066,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ This is renamed to indicate that it returns a `bitvec` structure, rather","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337068,"byte_end":337144,"line_start":501,"line_end":501,"column_start":2,"column_end":78}},{"value":"/ than an ordinary `Range`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337146,"byte_end":337175,"line_start":502,"line_end":502,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337177,"byte_end":337180,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ ## Notes","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337182,"byte_end":337194,"line_start":504,"line_end":504,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337196,"byte_end":337199,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` does define a [`.as_mut_ptr_range()`], which returns a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337201,"byte_end":337270,"line_start":506,"line_end":506,"column_start":2,"column_end":71}},{"value":"/ `Range<BitPtr>`. `BitPtrRange` has additional capabilities that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337272,"byte_end":337339,"line_start":507,"line_end":507,"column_start":2,"column_end":69}},{"value":"/ `Range<*mut T>` and `Range<BitPtr>` do not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337341,"byte_end":337388,"line_start":508,"line_end":508,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337390,"byte_end":337399,"line_start":509,"line_end":509,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4185},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338709,"byte_end":338728,"line_start":552,"line_end":552,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<T, O>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<T2, O2>(&mut Self, &BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337514,"byte_end":337557,"line_start":514,"line_end":514,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337559,"byte_end":337562,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ `self` and `src` must have the same length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337564,"byte_end":337611,"line_start":516,"line_end":516,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337613,"byte_end":337616,"line_start":517,"line_end":517,"column_start":2,"column_end":5}},{"value":"/ ## Performance","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337618,"byte_end":337636,"line_start":518,"line_end":518,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337638,"byte_end":337641,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ If `src` has the same type arguments as `self`, it will use the same","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337643,"byte_end":337715,"line_start":520,"line_end":520,"column_start":2,"column_end":74}},{"value":"/ implementation as [`.copy_from_bitslice()`]; if you know that this will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337717,"byte_end":337792,"line_start":521,"line_end":521,"column_start":2,"column_end":77}},{"value":"/ always be the case, you should prefer to use that method directly.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337794,"byte_end":337864,"line_start":522,"line_end":522,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337866,"byte_end":337869,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ Only `.copy_from_bitslice()` is *able* to perform acceleration; this","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337871,"byte_end":337943,"line_start":524,"line_end":524,"column_start":2,"column_end":74}},{"value":"/ method is *always* required to perform a bit-by-bit crawl over both","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":337945,"byte_end":338016,"line_start":525,"line_end":525,"column_start":2,"column_end":73}},{"value":"/ bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338018,"byte_end":338033,"line_start":526,"line_end":526,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338035,"byte_end":338038,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338040,"byte_end":338055,"line_start":528,"line_end":528,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338057,"byte_end":338060,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338062,"byte_end":338169,"line_start":530,"line_end":530,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338171,"byte_end":338174,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338176,"byte_end":338198,"line_start":532,"line_end":532,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338200,"byte_end":338203,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ This is renamed to reflect that it copies from another bit-slice, not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338205,"byte_end":338278,"line_start":534,"line_end":534,"column_start":2,"column_end":75}},{"value":"/ from an element slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338280,"byte_end":338306,"line_start":535,"line_end":535,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338308,"byte_end":338311,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ In order to support general usage, it allows `src` to have different","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338313,"byte_end":338385,"line_start":537,"line_end":537,"column_start":2,"column_end":74}},{"value":"/ type parameters than `self`, at the cost of performance optimizations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338387,"byte_end":338461,"line_start":538,"line_end":538,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338463,"byte_end":338466,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338468,"byte_end":338481,"line_start":540,"line_end":540,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338483,"byte_end":338486,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ This panics if the two bit-slices have different lengths.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338488,"byte_end":338549,"line_start":542,"line_end":542,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338551,"byte_end":338554,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338556,"byte_end":338571,"line_start":544,"line_end":544,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338573,"byte_end":338576,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338578,"byte_end":338589,"line_start":546,"line_end":546,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338591,"byte_end":338618,"line_start":547,"line_end":547,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338620,"byte_end":338627,"line_start":548,"line_end":548,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338629,"byte_end":338632,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from_bitslice()`]: Self::copy_from_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338634,"byte_end":338689,"line_start":550,"line_end":550,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":338691,"byte_end":338700,"line_start":551,"line_end":551,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4188},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339702,"byte_end":339720,"line_start":597,"line_end":597,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<T, O>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`, using batched acceleration when\n possible.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`, using batched acceleration when","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339238,"byte_end":339313,"line_start":578,"line_end":578,"column_start":2,"column_end":77}},{"value":"/ possible.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339315,"byte_end":339328,"line_start":579,"line_end":579,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339330,"byte_end":339333,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ `self` and `src` must have the same length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339335,"byte_end":339382,"line_start":581,"line_end":581,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339384,"byte_end":339387,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339389,"byte_end":339404,"line_start":583,"line_end":583,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339406,"byte_end":339409,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.copy_from_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339411,"byte_end":339516,"line_start":585,"line_end":585,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339518,"byte_end":339521,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339523,"byte_end":339536,"line_start":587,"line_end":587,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339538,"byte_end":339541,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ This panics if the two bit-slices have different lengths.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339543,"byte_end":339604,"line_start":589,"line_end":589,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339606,"byte_end":339609,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339611,"byte_end":339626,"line_start":591,"line_end":591,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339628,"byte_end":339631,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339633,"byte_end":339644,"line_start":593,"line_end":593,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339646,"byte_end":339673,"line_start":594,"line_end":594,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339675,"byte_end":339682,"line_start":595,"line_end":595,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":339684,"byte_end":339693,"line_start":596,"line_end":596,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4189},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342096,"byte_end":342114,"line_start":691,"line_end":691,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<T, O>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<T2, O2>(&mut Self, &mut BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Swaps the contents of two bit-slices.","sig":null,"attributes":[{"value":"/ Swaps the contents of two bit-slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341217,"byte_end":341258,"line_start":656,"line_end":656,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341260,"byte_end":341263,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ `self` and `other` must have the same length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341265,"byte_end":341314,"line_start":658,"line_end":658,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341316,"byte_end":341319,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341321,"byte_end":341336,"line_start":660,"line_end":660,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341338,"byte_end":341341,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341343,"byte_end":341448,"line_start":662,"line_end":662,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341450,"byte_end":341453,"line_start":663,"line_end":663,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341455,"byte_end":341477,"line_start":664,"line_end":664,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341479,"byte_end":341482,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit-slice rather than an element","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341484,"byte_end":341558,"line_start":666,"line_end":666,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341560,"byte_end":341570,"line_start":667,"line_end":667,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341572,"byte_end":341575,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341577,"byte_end":341590,"line_start":669,"line_end":669,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341592,"byte_end":341595,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ This panics if the two bit-slices have different lengths.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341597,"byte_end":341658,"line_start":671,"line_end":671,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341660,"byte_end":341663,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341665,"byte_end":341680,"line_start":673,"line_end":673,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341682,"byte_end":341685,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341687,"byte_end":341698,"line_start":675,"line_end":675,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341700,"byte_end":341727,"line_start":676,"line_end":676,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341729,"byte_end":341732,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341734,"byte_end":341767,"line_start":678,"line_end":678,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341769,"byte_end":341797,"line_start":679,"line_end":679,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341799,"byte_end":341846,"line_start":680,"line_end":680,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341848,"byte_end":341895,"line_start":681,"line_end":681,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341897,"byte_end":341900,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341902,"byte_end":341944,"line_start":683,"line_end":683,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341946,"byte_end":341949,"line_start":684,"line_end":684,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341951,"byte_end":341985,"line_start":685,"line_end":685,"column_start":2,"column_end":36}},{"value":"/ # if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":341987,"byte_end":342028,"line_start":686,"line_end":686,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342030,"byte_end":342058,"line_start":687,"line_end":687,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342060,"byte_end":342067,"line_start":688,"line_end":688,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342069,"byte_end":342076,"line_start":689,"line_end":689,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342078,"byte_end":342087,"line_start":690,"line_end":690,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4196},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343528,"byte_end":343531,"line_start":753,"line_end":753,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<T, O>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a single bit.","sig":null,"attributes":[{"value":"/ Writes a new value into a single bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342850,"byte_end":342891,"line_start":726,"line_end":726,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342893,"byte_end":342896,"line_start":727,"line_end":727,"column_start":2,"column_end":5}},{"value":"/ This is the replacement for `*slice[index] = value;`, as `bitvec` is not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342898,"byte_end":342974,"line_start":728,"line_end":728,"column_start":2,"column_end":78}},{"value":"/ able to express that under the current `IndexMut` API signature.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342976,"byte_end":343044,"line_start":729,"line_end":729,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343046,"byte_end":343049,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343051,"byte_end":343068,"line_start":731,"line_end":731,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343070,"byte_end":343073,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343075,"byte_end":343092,"line_start":733,"line_end":733,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit-index to set. It must be in `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343094,"byte_end":343163,"line_start":734,"line_end":734,"column_start":2,"column_end":71}},{"value":"/ - `value`: The new bit-value to write into the bit at `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343165,"byte_end":343231,"line_start":735,"line_end":735,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343233,"byte_end":343236,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343238,"byte_end":343251,"line_start":737,"line_end":737,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343253,"byte_end":343256,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is out of bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343258,"byte_end":343302,"line_start":739,"line_end":739,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343304,"byte_end":343307,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343309,"byte_end":343324,"line_start":741,"line_end":741,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343326,"byte_end":343329,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343331,"byte_end":343342,"line_start":743,"line_end":743,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343344,"byte_end":343371,"line_start":744,"line_end":744,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343373,"byte_end":343376,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343378,"byte_end":343409,"line_start":746,"line_end":746,"column_start":2,"column_end":33}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343411,"byte_end":343433,"line_start":747,"line_end":747,"column_start":2,"column_end":24}},{"value":"/ bits.set(1, false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343435,"byte_end":343458,"line_start":748,"line_end":748,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343460,"byte_end":343463,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343465,"byte_end":343499,"line_start":750,"line_end":750,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343501,"byte_end":343508,"line_start":751,"line_end":751,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343510,"byte_end":343519,"line_start":752,"line_end":752,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4197},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344466,"byte_end":344479,"line_start":787,"line_end":787,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<T, O>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a single bit, without bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new value into a single bit, without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343607,"byte_end":343673,"line_start":757,"line_end":757,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343675,"byte_end":343678,"line_start":758,"line_end":758,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343680,"byte_end":343697,"line_start":759,"line_end":759,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343699,"byte_end":343702,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343704,"byte_end":343721,"line_start":761,"line_end":761,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit-index to set. It must be in `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343723,"byte_end":343792,"line_start":762,"line_end":762,"column_start":2,"column_end":71}},{"value":"/ - `value`: The new bit-value to write into the bit at `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343794,"byte_end":343860,"line_start":763,"line_end":763,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343862,"byte_end":343865,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343867,"byte_end":343880,"line_start":765,"line_end":765,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343882,"byte_end":343885,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `index` is in the range `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343887,"byte_end":343954,"line_start":767,"line_end":767,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343956,"byte_end":343959,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ This performs bit-pointer offset arithmetic without doing any bounds","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":343961,"byte_end":344033,"line_start":769,"line_end":769,"column_start":2,"column_end":74}},{"value":"/ checks. If `index` is out of bounds, then this will issue an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344035,"byte_end":344099,"line_start":770,"line_end":770,"column_start":2,"column_end":66}},{"value":"/ out-of-bounds access and will trigger memory unsafety.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344101,"byte_end":344159,"line_start":771,"line_end":771,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344161,"byte_end":344164,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344166,"byte_end":344181,"line_start":773,"line_end":773,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344183,"byte_end":344186,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344188,"byte_end":344199,"line_start":775,"line_end":775,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344201,"byte_end":344228,"line_start":776,"line_end":776,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344230,"byte_end":344233,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344235,"byte_end":344258,"line_start":778,"line_end":778,"column_start":2,"column_end":25}},{"value":"/ let bits = &mut data.view_bits_mut::<Lsb0>()[.. 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344260,"byte_end":344315,"line_start":779,"line_end":779,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(bits.len(), 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344317,"byte_end":344347,"line_start":780,"line_end":780,"column_start":2,"column_end":32}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344349,"byte_end":344361,"line_start":781,"line_end":781,"column_start":2,"column_end":14}},{"value":"/   bits.set_unchecked(3, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344363,"byte_end":344397,"line_start":782,"line_end":782,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344399,"byte_end":344404,"line_start":783,"line_end":783,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344406,"byte_end":344430,"line_start":784,"line_end":784,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344432,"byte_end":344439,"line_start":785,"line_end":785,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344441,"byte_end":344450,"line_start":786,"line_end":786,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4198},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344909,"byte_end":344916,"line_start":807,"line_end":807,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitSlice<T, O>>::replace","value":"pub fn replace(&mut Self, usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a bit, and returns its previous value.","sig":null,"attributes":[{"value":"/ Writes a new value into a bit, and returns its previous value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344565,"byte_end":344631,"line_start":791,"line_end":791,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344633,"byte_end":344636,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344638,"byte_end":344651,"line_start":793,"line_end":793,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344653,"byte_end":344656,"line_start":794,"line_end":794,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is not less than `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344658,"byte_end":344715,"line_start":795,"line_end":795,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344717,"byte_end":344720,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344722,"byte_end":344737,"line_start":797,"line_end":797,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344739,"byte_end":344742,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344744,"byte_end":344755,"line_start":799,"line_end":799,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344757,"byte_end":344784,"line_start":800,"line_end":800,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344786,"byte_end":344789,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344791,"byte_end":344819,"line_start":802,"line_end":802,"column_start":2,"column_end":30}},{"value":"/ assert!(!bits.replace(0, true));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344821,"byte_end":344857,"line_start":803,"line_end":803,"column_start":2,"column_end":38}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344859,"byte_end":344880,"line_start":804,"line_end":804,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344882,"byte_end":344889,"line_start":805,"line_end":805,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":344891,"byte_end":344900,"line_start":806,"line_end":806,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4199},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345519,"byte_end":345536,"line_start":833,"line_end":833,"column_start":16,"column_end":33},"name":"replace_unchecked","qualname":"<BitSlice<T, O>>::replace_unchecked","value":"pub unsafe fn replace_unchecked(&mut Self, usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a bit, returning the previous value, without\n bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new value into a bit, returning the previous value, without","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345069,"byte_end":345141,"line_start":812,"line_end":812,"column_start":2,"column_end":74}},{"value":"/ bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345143,"byte_end":345163,"line_start":813,"line_end":813,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345165,"byte_end":345168,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345170,"byte_end":345183,"line_start":815,"line_end":815,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345185,"byte_end":345188,"line_start":816,"line_end":816,"column_start":2,"column_end":5}},{"value":"/ `index` must be less than `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345190,"byte_end":345233,"line_start":817,"line_end":817,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345235,"byte_end":345238,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345240,"byte_end":345255,"line_start":819,"line_end":819,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345257,"byte_end":345260,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345262,"byte_end":345273,"line_start":821,"line_end":821,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345275,"byte_end":345302,"line_start":822,"line_end":822,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345304,"byte_end":345307,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345309,"byte_end":345340,"line_start":824,"line_end":824,"column_start":2,"column_end":33}},{"value":"/ let old = unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345342,"byte_end":345364,"line_start":825,"line_end":825,"column_start":2,"column_end":24}},{"value":"/   let a = &mut bits[.. 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345366,"byte_end":345396,"line_start":826,"line_end":826,"column_start":2,"column_end":32}},{"value":"/   a.replace_unchecked(1, true)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345398,"byte_end":345432,"line_start":827,"line_end":827,"column_start":2,"column_end":36}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345434,"byte_end":345440,"line_start":828,"line_end":828,"column_start":2,"column_end":8}},{"value":"/ assert!(!old);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345442,"byte_end":345460,"line_start":829,"line_end":829,"column_start":2,"column_end":20}},{"value":"/ assert!(bits[1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345462,"byte_end":345483,"line_start":830,"line_end":830,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345485,"byte_end":345492,"line_start":831,"line_end":831,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345494,"byte_end":345503,"line_start":832,"line_end":832,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4200},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346139,"byte_end":346153,"line_start":856,"line_end":856,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<T, O>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in a bit-slice, without bounds checking.","sig":null,"attributes":[{"value":"/ Swaps two bits in a bit-slice, without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345649,"byte_end":345708,"line_start":841,"line_end":841,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345710,"byte_end":345713,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ See [`.swap()`] for documentation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345715,"byte_end":345753,"line_start":843,"line_end":843,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345755,"byte_end":345758,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345760,"byte_end":345773,"line_start":845,"line_end":845,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345775,"byte_end":345778,"line_start":846,"line_end":846,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `a` and `b` are both in the range `0 ..","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345780,"byte_end":345844,"line_start":847,"line_end":847,"column_start":2,"column_end":66}},{"value":"/ self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345846,"byte_end":345862,"line_start":848,"line_end":848,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345864,"byte_end":345867,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ This method performs bit-pointer offset arithmetic without doing any","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345869,"byte_end":345941,"line_start":850,"line_end":850,"column_start":2,"column_end":74}},{"value":"/ bounds checks. If `a` or `b` are out of bounds, then this will issue an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":345943,"byte_end":346018,"line_start":851,"line_end":851,"column_start":2,"column_end":77}},{"value":"/ out-of-bounds access and will trigger memory unsafety.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346020,"byte_end":346078,"line_start":852,"line_end":852,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346080,"byte_end":346083,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ [`.swap()`]: Self::swap","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346085,"byte_end":346112,"line_start":854,"line_end":854,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346114,"byte_end":346123,"line_start":855,"line_end":855,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4201},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346800,"byte_end":346818,"line_start":877,"line_end":877,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<T, O>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a bit-slice at an index, without bounds checking.","sig":null,"attributes":[{"value":"/ Splits a bit-slice at an index, without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346292,"byte_end":346352,"line_start":862,"line_end":862,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346354,"byte_end":346357,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at()`] for documentation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346359,"byte_end":346401,"line_start":864,"line_end":864,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346403,"byte_end":346406,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346408,"byte_end":346421,"line_start":866,"line_end":866,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346423,"byte_end":346426,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `mid` is in the range `0 ..= self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346428,"byte_end":346494,"line_start":868,"line_end":868,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346496,"byte_end":346499,"line_start":869,"line_end":869,"column_start":2,"column_end":5}},{"value":"/ This method produces new bit-slice references. If `mid` is out of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346501,"byte_end":346570,"line_start":870,"line_end":870,"column_start":2,"column_end":71}},{"value":"/ bounds, its behavior is **library-level** undefined. You must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346572,"byte_end":346637,"line_start":871,"line_end":871,"column_start":2,"column_end":67}},{"value":"/ conservatively assume that an out-of-bounds split point produces","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346639,"byte_end":346707,"line_start":872,"line_end":872,"column_start":2,"column_end":70}},{"value":"/ compiler-level UB.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346709,"byte_end":346731,"line_start":873,"line_end":873,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346733,"byte_end":346736,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ [`.split_at()`]: Self::split_at","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346738,"byte_end":346773,"line_start":875,"line_end":875,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":346775,"byte_end":346784,"line_start":876,"line_end":876,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4202},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347657,"byte_end":347679,"line_start":903,"line_end":903,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<T, O>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<T::Alias, O>, &mut BitSlice<T::Alias, O>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable bit-slice at an index, without bounds checking.","sig":null,"attributes":[{"value":"/ Splits a mutable bit-slice at an index, without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347129,"byte_end":347197,"line_start":888,"line_end":888,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347199,"byte_end":347202,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at_mut()`] for documentation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347204,"byte_end":347250,"line_start":890,"line_end":890,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347252,"byte_end":347255,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347257,"byte_end":347270,"line_start":892,"line_end":892,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347272,"byte_end":347275,"line_start":893,"line_end":893,"column_start":2,"column_end":5}},{"value":"/ You must ensure that `mid` is in the range `0 ..= self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347277,"byte_end":347343,"line_start":894,"line_end":894,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347345,"byte_end":347348,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ This method produces new bit-slice references. If `mid` is out of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347350,"byte_end":347419,"line_start":896,"line_end":896,"column_start":2,"column_end":71}},{"value":"/ bounds, its behavior is **library-level** undefined. You must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347421,"byte_end":347486,"line_start":897,"line_end":897,"column_start":2,"column_end":67}},{"value":"/ conservatively assume that an out-of-bounds split point produces","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347488,"byte_end":347556,"line_start":898,"line_end":898,"column_start":2,"column_end":70}},{"value":"/ compiler-level UB.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347558,"byte_end":347580,"line_start":899,"line_end":899,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347582,"byte_end":347585,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347587,"byte_end":347630,"line_start":901,"line_end":901,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347632,"byte_end":347641,"line_start":902,"line_end":902,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4203},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348880,"byte_end":348901,"line_start":950,"line_end":950,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<T, O>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeExt<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one region of the bit-slice to another region of\n itself, without doing bounds checks.","sig":null,"attributes":[{"value":"/ Copies bits from one region of the bit-slice to another region of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":347991,"byte_end":348060,"line_start":916,"line_end":916,"column_start":2,"column_end":71}},{"value":"/ itself, without doing bounds checks.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348062,"byte_end":348102,"line_start":917,"line_end":917,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348104,"byte_end":348107,"line_start":918,"line_end":918,"column_start":2,"column_end":5}},{"value":"/ The regions are allowed to overlap.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348109,"byte_end":348148,"line_start":919,"line_end":919,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348150,"byte_end":348153,"line_start":920,"line_end":920,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348155,"byte_end":348172,"line_start":921,"line_end":921,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348174,"byte_end":348177,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348179,"byte_end":348196,"line_start":923,"line_end":923,"column_start":2,"column_end":19}},{"value":"/ - `src`: The range within `self` from which to copy.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348198,"byte_end":348254,"line_start":924,"line_end":924,"column_start":2,"column_end":58}},{"value":"/ - `dst`: The starting index within `self` at which to paste.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348256,"byte_end":348320,"line_start":925,"line_end":925,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348322,"byte_end":348325,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ ## Effects","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348327,"byte_end":348341,"line_start":927,"line_end":927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348343,"byte_end":348346,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.len()]`. The bits of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348348,"byte_end":348422,"line_start":929,"line_end":929,"column_start":2,"column_end":76}},{"value":"/ `self[src]` are in an unspecified, but initialized, state.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348424,"byte_end":348486,"line_start":930,"line_end":930,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348488,"byte_end":348491,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348493,"byte_end":348506,"line_start":932,"line_end":932,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348508,"byte_end":348511,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ `src.end()` and `dest + src.len()` must be entirely within bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348513,"byte_end":348583,"line_start":934,"line_end":934,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348585,"byte_end":348588,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348590,"byte_end":348605,"line_start":936,"line_end":936,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348607,"byte_end":348610,"line_start":937,"line_end":937,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348612,"byte_end":348623,"line_start":938,"line_end":938,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348625,"byte_end":348652,"line_start":939,"line_end":939,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348654,"byte_end":348657,"line_start":940,"line_end":940,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b1011_0000u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348659,"byte_end":348692,"line_start":941,"line_end":941,"column_start":2,"column_end":35}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348694,"byte_end":348738,"line_start":942,"line_end":942,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348740,"byte_end":348743,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348745,"byte_end":348757,"line_start":944,"line_end":944,"column_start":2,"column_end":14}},{"value":"/   bits.copy_within_unchecked(.. 4, 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348759,"byte_end":348801,"line_start":945,"line_end":945,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348803,"byte_end":348808,"line_start":946,"line_end":946,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b1010_1100);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348810,"byte_end":348844,"line_start":947,"line_end":947,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348846,"byte_end":348853,"line_start":948,"line_end":948,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":348855,"byte_end":348864,"line_start":949,"line_end":949,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4205},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349638,"byte_end":349646,"line_start":976,"line_end":976,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<T, O>>::for_each","value":"pub fn for_each<impl FnMut(usize, bool) -> bool: FnMut(usize, bool) ->\nbool>(&mut Self, impl FnMut(usize, bool) -> bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349523,"byte_end":349532,"line_start":972,"line_end":972,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349550,"byte_end":349580,"line_start":974,"line_end":974,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.iter_mut().enumerate()`\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349582,"byte_end":349629,"line_start":975,"line_end":975,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4210},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350326,"byte_end":350336,"line_start":999,"line_end":999,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<T, O>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Partitions a bit-slice into maybe-contended and known-uncontended parts.","sig":null,"attributes":[{"value":"/ Partitions a bit-slice into maybe-contended and known-uncontended parts.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349924,"byte_end":350000,"line_start":991,"line_end":991,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350002,"byte_end":350005,"line_start":992,"line_end":992,"column_start":2,"column_end":5}},{"value":"/ The documentation of `BitDomain` goes into this in more detail. In","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350007,"byte_end":350077,"line_start":993,"line_end":993,"column_start":2,"column_end":72}},{"value":"/ short, this produces a `&BitSlice` that is as large as possible without","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350079,"byte_end":350154,"line_start":994,"line_end":994,"column_start":2,"column_end":77}},{"value":"/ requiring alias protection, as well as any bits that were not able to be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350156,"byte_end":350232,"line_start":995,"line_end":995,"column_start":2,"column_end":78}},{"value":"/ included in the unaliased bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350234,"byte_end":350274,"line_start":996,"line_end":996,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350276,"byte_end":350285,"line_start":997,"line_end":997,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350287,"byte_end":350317,"line_start":998,"line_end":998,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4211},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350830,"byte_end":350844,"line_start":1012,"line_end":1012,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<T, O>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomain<, Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Partitions a mutable bit-slice into maybe-contended and\n known-uncontended parts.","sig":null,"attributes":[{"value":"/ Partitions a mutable bit-slice into maybe-contended and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350411,"byte_end":350470,"line_start":1003,"line_end":1003,"column_start":2,"column_end":61}},{"value":"/ known-uncontended parts.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350472,"byte_end":350500,"line_start":1004,"line_end":1004,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350502,"byte_end":350505,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ The documentation of `BitDomain` goes into this in more detail. In","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350507,"byte_end":350577,"line_start":1006,"line_end":1006,"column_start":2,"column_end":72}},{"value":"/ short, this produces a `&mut BitSlice` that is as large as possible","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350579,"byte_end":350650,"line_start":1007,"line_end":1007,"column_start":2,"column_end":73}},{"value":"/ without requiring alias protection, as well as any bits that were not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350652,"byte_end":350725,"line_start":1008,"line_end":1008,"column_start":2,"column_end":75}},{"value":"/ able to be included in the unaliased bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350727,"byte_end":350778,"line_start":1009,"line_end":1009,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350780,"byte_end":350789,"line_start":1010,"line_end":1010,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350791,"byte_end":350821,"line_start":1011,"line_end":1011,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4212},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351376,"byte_end":351382,"line_start":1025,"line_end":1025,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<T, O>>::domain","value":"pub fn domain(&Self) -> Domain<, Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory of a bit-slice, removing alias protections\n where possible.","sig":null,"attributes":[{"value":"/ Views the underlying memory of a bit-slice, removing alias protections","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":350925,"byte_end":350999,"line_start":1016,"line_end":1016,"column_start":2,"column_end":76}},{"value":"/ where possible.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351001,"byte_end":351020,"line_start":1017,"line_end":1017,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351022,"byte_end":351025,"line_start":1018,"line_end":1018,"column_start":2,"column_end":5}},{"value":"/ The documentation of `Domain` goes into this in more detail. In short,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351027,"byte_end":351101,"line_start":1019,"line_end":1019,"column_start":2,"column_end":76}},{"value":"/ this produces a `&[T]` slice with alias protections removed, covering","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351103,"byte_end":351176,"line_start":1020,"line_end":1020,"column_start":2,"column_end":75}},{"value":"/ all elements that `self` completely fills. Partially-used elements on","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351178,"byte_end":351251,"line_start":1021,"line_end":1021,"column_start":2,"column_end":75}},{"value":"/ either the front or back edge of the slice are returned separately.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351253,"byte_end":351324,"line_start":1022,"line_end":1022,"column_start":2,"column_end":73}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351326,"byte_end":351335,"line_start":1023,"line_end":1023,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351337,"byte_end":351367,"line_start":1024,"line_end":1024,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4213},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351888,"byte_end":351898,"line_start":1038,"line_end":1038,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<T, O>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> Domain<, Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory of a bit-slice, removing alias protections\n where possible.","sig":null,"attributes":[{"value":"/ Views the underlying memory of a bit-slice, removing alias protections","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351440,"byte_end":351514,"line_start":1029,"line_end":1029,"column_start":2,"column_end":76}},{"value":"/ where possible.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351516,"byte_end":351535,"line_start":1030,"line_end":1030,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351537,"byte_end":351540,"line_start":1031,"line_end":1031,"column_start":2,"column_end":5}},{"value":"/ The documentation of `Domain` goes into this in more detail. In short,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351542,"byte_end":351616,"line_start":1032,"line_end":1032,"column_start":2,"column_end":76}},{"value":"/ this produces a `&mut [T]` slice with alias protections removed,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351618,"byte_end":351686,"line_start":1033,"line_end":1033,"column_start":2,"column_end":70}},{"value":"/ covering all elements that `self` completely fills. Partially-used","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351688,"byte_end":351758,"line_start":1034,"line_end":1034,"column_start":2,"column_end":72}},{"value":"/ elements on the front or back edge of the slice are returned separately.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351760,"byte_end":351836,"line_start":1035,"line_end":1035,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351838,"byte_end":351847,"line_start":1036,"line_end":1036,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351849,"byte_end":351879,"line_start":1037,"line_end":1037,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4217},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352382,"byte_end":352392,"line_start":1062,"line_end":1062,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<T, O>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits set to `1` in the bit-slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits set to `1` in the bit-slice contents.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352045,"byte_end":352112,"line_start":1049,"line_end":1049,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352114,"byte_end":352117,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352119,"byte_end":352134,"line_start":1051,"line_end":1051,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352136,"byte_end":352139,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352141,"byte_end":352152,"line_start":1053,"line_end":1053,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352154,"byte_end":352181,"line_start":1054,"line_end":1054,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352183,"byte_end":352186,"line_start":1055,"line_end":1055,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352188,"byte_end":352221,"line_start":1056,"line_end":1056,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352223,"byte_end":352266,"line_start":1057,"line_end":1057,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352268,"byte_end":352311,"line_start":1058,"line_end":1058,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![].count_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352313,"byte_end":352353,"line_start":1059,"line_end":1059,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352355,"byte_end":352362,"line_start":1060,"line_end":1060,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352364,"byte_end":352373,"line_start":1061,"line_end":1061,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4221},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353172,"byte_end":353183,"line_start":1090,"line_end":1090,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<T, O>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits cleared to `0` in the bit-slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits cleared to `0` in the bit-slice contents.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352828,"byte_end":352899,"line_start":1077,"line_end":1077,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352901,"byte_end":352904,"line_start":1078,"line_end":1078,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352906,"byte_end":352921,"line_start":1079,"line_end":1079,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352923,"byte_end":352926,"line_start":1080,"line_end":1080,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352928,"byte_end":352939,"line_start":1081,"line_end":1081,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352941,"byte_end":352968,"line_start":1082,"line_end":1082,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352970,"byte_end":352973,"line_start":1083,"line_end":1083,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":352975,"byte_end":353008,"line_start":1084,"line_end":1084,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353010,"byte_end":353054,"line_start":1085,"line_end":1085,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353056,"byte_end":353100,"line_start":1086,"line_end":1086,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![].count_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353102,"byte_end":353143,"line_start":1087,"line_end":1087,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353145,"byte_end":353152,"line_start":1088,"line_end":1088,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353154,"byte_end":353163,"line_start":1089,"line_end":1089,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4225},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355012,"byte_end":355021,"line_start":1146,"line_end":1146,"column_start":9,"column_end":18},"name":"iter_ones","qualname":"<BitSlice<T, O>>::iter_ones","value":"pub fn iter_ones(&Self) -> IterOnes<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates the index of each bit in a bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Enumerates the index of each bit in a bit-slice set to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353744,"byte_end":353807,"line_start":1111,"line_end":1111,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353809,"byte_end":353812,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ This is a shorthand for a `.enumerate().filter_map()` iterator that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353814,"byte_end":353885,"line_start":1113,"line_end":1113,"column_start":2,"column_end":73}},{"value":"/ selects the index of each `true` bit; however, its implementation is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353887,"byte_end":353959,"line_start":1114,"line_end":1114,"column_start":2,"column_end":74}},{"value":"/ eligible for optimizations that the individual-bit iterator is not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":353961,"byte_end":354032,"line_start":1115,"line_end":1115,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354034,"byte_end":354037,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ Specializations for the `Lsb0` and `Msb0` orderings allow processors","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354039,"byte_end":354111,"line_start":1117,"line_end":1117,"column_start":2,"column_end":74}},{"value":"/ with instructions that seek particular bits within an element to operate","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354113,"byte_end":354189,"line_start":1118,"line_end":1118,"column_start":2,"column_end":78}},{"value":"/ on whole elements, rather than on each bit individually.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354191,"byte_end":354251,"line_start":1119,"line_end":1119,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354253,"byte_end":354256,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354258,"byte_end":354273,"line_start":1121,"line_end":1121,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354275,"byte_end":354278,"line_start":1122,"line_end":1122,"column_start":2,"column_end":5}},{"value":"/ This example uses `.iter_ones()`, a `.filter_map()` that finds the index","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354280,"byte_end":354356,"line_start":1123,"line_end":1123,"column_start":2,"column_end":78}},{"value":"/ of each set bit, and the known indices, in order to show that they have","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354358,"byte_end":354433,"line_start":1124,"line_end":1124,"column_start":2,"column_end":77}},{"value":"/ equivalent behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354435,"byte_end":354459,"line_start":1125,"line_end":1125,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354461,"byte_end":354464,"line_start":1126,"line_end":1126,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354466,"byte_end":354477,"line_start":1127,"line_end":1127,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354479,"byte_end":354506,"line_start":1128,"line_end":1128,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354508,"byte_end":354511,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354513,"byte_end":354561,"line_start":1130,"line_end":1130,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354563,"byte_end":354566,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ let iter_ones = bits.iter_ones();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354568,"byte_end":354605,"line_start":1132,"line_end":1132,"column_start":2,"column_end":39}},{"value":"/ let known_indices = [1, 4, 8].iter().copied();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354607,"byte_end":354657,"line_start":1133,"line_end":1133,"column_start":2,"column_end":52}},{"value":"/ let filter = bits.iter()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354659,"byte_end":354687,"line_start":1134,"line_end":1134,"column_start":2,"column_end":30}},{"value":"/   .by_vals()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354689,"byte_end":354705,"line_start":1135,"line_end":1135,"column_start":2,"column_end":18}},{"value":"/   .enumerate()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354707,"byte_end":354725,"line_start":1136,"line_end":1136,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if bit { Some(idx) } else { None });","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354727,"byte_end":354794,"line_start":1137,"line_end":1137,"column_start":2,"column_end":69}},{"value":"/ let all = iter_ones.zip(known_indices).zip(filter);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354796,"byte_end":354851,"line_start":1138,"line_end":1138,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354853,"byte_end":354856,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ for ((iter_one, known), filtered) in all {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354858,"byte_end":354904,"line_start":1140,"line_end":1140,"column_start":2,"column_end":48}},{"value":"/   assert_eq!(iter_one, known);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354906,"byte_end":354940,"line_start":1141,"line_end":1141,"column_start":2,"column_end":36}},{"value":"/   assert_eq!(known, filtered);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354942,"byte_end":354976,"line_start":1142,"line_end":1142,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354978,"byte_end":354983,"line_start":1143,"line_end":1143,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354985,"byte_end":354992,"line_start":1144,"line_end":1144,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":354994,"byte_end":355003,"line_start":1145,"line_end":1145,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4226},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356360,"byte_end":356370,"line_start":1185,"line_end":1185,"column_start":9,"column_end":19},"name":"iter_zeros","qualname":"<BitSlice<T, O>>::iter_zeros","value":"pub fn iter_zeros(&Self) -> IterZeros<, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates the index of each bit in a bit-slice cleared to `0`.","sig":null,"attributes":[{"value":"/ Enumerates the index of each bit in a bit-slice cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355076,"byte_end":355143,"line_start":1150,"line_end":1150,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355145,"byte_end":355148,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ This is a shorthand for a `.enumerate().filter_map()` iterator that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355150,"byte_end":355221,"line_start":1152,"line_end":1152,"column_start":2,"column_end":73}},{"value":"/ selects the index of each `false` bit; however, its implementation is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355223,"byte_end":355296,"line_start":1153,"line_end":1153,"column_start":2,"column_end":75}},{"value":"/ eligible for optimizations that the individual-bit iterator is not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355298,"byte_end":355369,"line_start":1154,"line_end":1154,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355371,"byte_end":355374,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ Specializations for the `Lsb0` and `Msb0` orderings allow processors","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355376,"byte_end":355448,"line_start":1156,"line_end":1156,"column_start":2,"column_end":74}},{"value":"/ with instructions that seek particular bits within an element to operate","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355450,"byte_end":355526,"line_start":1157,"line_end":1157,"column_start":2,"column_end":78}},{"value":"/ on whole elements, rather than on each bit individually.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355528,"byte_end":355588,"line_start":1158,"line_end":1158,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355590,"byte_end":355593,"line_start":1159,"line_end":1159,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355595,"byte_end":355610,"line_start":1160,"line_end":1160,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355612,"byte_end":355615,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ This example uses `.iter_zeros()`, a `.filter_map()` that finds the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355617,"byte_end":355688,"line_start":1162,"line_end":1162,"column_start":2,"column_end":73}},{"value":"/ index of each cleared bit, and the known indices, in order to show that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355690,"byte_end":355765,"line_start":1163,"line_end":1163,"column_start":2,"column_end":77}},{"value":"/ they have equivalent behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355767,"byte_end":355801,"line_start":1164,"line_end":1164,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355803,"byte_end":355806,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355808,"byte_end":355819,"line_start":1166,"line_end":1166,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355821,"byte_end":355848,"line_start":1167,"line_end":1167,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355850,"byte_end":355853,"line_start":1168,"line_end":1168,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 1, 0, 1, 1, 1, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355855,"byte_end":355903,"line_start":1169,"line_end":1169,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355905,"byte_end":355908,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ let iter_zeros = bits.iter_zeros();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355910,"byte_end":355949,"line_start":1171,"line_end":1171,"column_start":2,"column_end":41}},{"value":"/ let known_indices = [1, 4, 8].iter().copied();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":355951,"byte_end":356001,"line_start":1172,"line_end":1172,"column_start":2,"column_end":52}},{"value":"/ let filter = bits.iter()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356003,"byte_end":356031,"line_start":1173,"line_end":1173,"column_start":2,"column_end":30}},{"value":"/   .by_vals()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356033,"byte_end":356049,"line_start":1174,"line_end":1174,"column_start":2,"column_end":18}},{"value":"/   .enumerate()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356051,"byte_end":356069,"line_start":1175,"line_end":1175,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if !bit { Some(idx) } else { None });","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356071,"byte_end":356139,"line_start":1176,"line_end":1176,"column_start":2,"column_end":70}},{"value":"/ let all = iter_zeros.zip(known_indices).zip(filter);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356141,"byte_end":356197,"line_start":1177,"line_end":1177,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356199,"byte_end":356202,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ for ((iter_zero, known), filtered) in all {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356204,"byte_end":356251,"line_start":1179,"line_end":1179,"column_start":2,"column_end":49}},{"value":"/   assert_eq!(iter_zero, known);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356253,"byte_end":356288,"line_start":1180,"line_end":1180,"column_start":2,"column_end":37}},{"value":"/   assert_eq!(known, filtered);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356290,"byte_end":356324,"line_start":1181,"line_end":1181,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356326,"byte_end":356331,"line_start":1182,"line_end":1182,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356333,"byte_end":356340,"line_start":1183,"line_end":1183,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356342,"byte_end":356351,"line_start":1184,"line_end":1184,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4227},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356806,"byte_end":356815,"line_start":1203,"line_end":1203,"column_start":9,"column_end":18},"name":"first_one","qualname":"<BitSlice<T, O>>::first_one","value":"pub fn first_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Finds the index of the first bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Finds the index of the first bit in the bit-slice set to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356427,"byte_end":356492,"line_start":1189,"line_end":1189,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356494,"byte_end":356497,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if there is no `true` bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356499,"byte_end":356561,"line_start":1191,"line_end":1191,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356563,"byte_end":356566,"line_start":1192,"line_end":1192,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356568,"byte_end":356583,"line_start":1193,"line_end":1193,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356585,"byte_end":356588,"line_start":1194,"line_end":1194,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356590,"byte_end":356601,"line_start":1195,"line_end":1195,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356603,"byte_end":356630,"line_start":1196,"line_end":1196,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356632,"byte_end":356635,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_one().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356637,"byte_end":356680,"line_start":1198,"line_end":1198,"column_start":2,"column_end":45}},{"value":"/ assert!(bits![0].first_one().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356682,"byte_end":356726,"line_start":1199,"line_end":1199,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1].first_one(), Some(1));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356728,"byte_end":356777,"line_start":1200,"line_end":1200,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356779,"byte_end":356786,"line_start":1201,"line_end":1201,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356788,"byte_end":356797,"line_start":1202,"line_end":1202,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4228},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357260,"byte_end":357270,"line_start":1221,"line_end":1221,"column_start":9,"column_end":19},"name":"first_zero","qualname":"<BitSlice<T, O>>::first_zero","value":"pub fn first_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Finds the index of the first bit in the bit-slice cleared to `0`.","sig":null,"attributes":[{"value":"/ Finds the index of the first bit in the bit-slice cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356873,"byte_end":356942,"line_start":1207,"line_end":1207,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356944,"byte_end":356947,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if there is no `false` bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":356949,"byte_end":357012,"line_start":1209,"line_end":1209,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357014,"byte_end":357017,"line_start":1210,"line_end":1210,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357019,"byte_end":357034,"line_start":1211,"line_end":1211,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357036,"byte_end":357039,"line_start":1212,"line_end":1212,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357041,"byte_end":357052,"line_start":1213,"line_end":1213,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357054,"byte_end":357081,"line_start":1214,"line_end":1214,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357083,"byte_end":357086,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_zero().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357088,"byte_end":357132,"line_start":1216,"line_end":1216,"column_start":2,"column_end":46}},{"value":"/ assert!(bits![1].first_zero().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357134,"byte_end":357179,"line_start":1217,"line_end":1217,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![1, 0].first_zero(), Some(1));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357181,"byte_end":357231,"line_start":1218,"line_end":1218,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357233,"byte_end":357240,"line_start":1219,"line_end":1219,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357242,"byte_end":357251,"line_start":1220,"line_end":1220,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4229},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357704,"byte_end":357712,"line_start":1239,"line_end":1239,"column_start":9,"column_end":17},"name":"last_one","qualname":"<BitSlice<T, O>>::last_one","value":"pub fn last_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Finds the index of the last bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Finds the index of the last bit in the bit-slice set to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357329,"byte_end":357393,"line_start":1225,"line_end":1225,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357395,"byte_end":357398,"line_start":1226,"line_end":1226,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if there is no `true` bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357400,"byte_end":357462,"line_start":1227,"line_end":1227,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357464,"byte_end":357467,"line_start":1228,"line_end":1228,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357469,"byte_end":357484,"line_start":1229,"line_end":1229,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357486,"byte_end":357489,"line_start":1230,"line_end":1230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357491,"byte_end":357502,"line_start":1231,"line_end":1231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357504,"byte_end":357531,"line_start":1232,"line_end":1232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357533,"byte_end":357536,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_one().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357538,"byte_end":357580,"line_start":1234,"line_end":1234,"column_start":2,"column_end":44}},{"value":"/ assert!(bits![0].last_one().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357582,"byte_end":357625,"line_start":1235,"line_end":1235,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0].last_one(), Some(0));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357627,"byte_end":357675,"line_start":1236,"line_end":1236,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357677,"byte_end":357684,"line_start":1237,"line_end":1237,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357686,"byte_end":357695,"line_start":1238,"line_end":1238,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4230},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358158,"byte_end":358167,"line_start":1257,"line_end":1257,"column_start":9,"column_end":18},"name":"last_zero","qualname":"<BitSlice<T, O>>::last_zero","value":"pub fn last_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Finds the index of the last bit in the bit-slice cleared to `0`.","sig":null,"attributes":[{"value":"/ Finds the index of the last bit in the bit-slice cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357775,"byte_end":357843,"line_start":1243,"line_end":1243,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357845,"byte_end":357848,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if there is no `false` bit in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357850,"byte_end":357913,"line_start":1245,"line_end":1245,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357915,"byte_end":357918,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357920,"byte_end":357935,"line_start":1247,"line_end":1247,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357937,"byte_end":357940,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357942,"byte_end":357953,"line_start":1249,"line_end":1249,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357955,"byte_end":357982,"line_start":1250,"line_end":1250,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357984,"byte_end":357987,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_zero().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":357989,"byte_end":358032,"line_start":1252,"line_end":1252,"column_start":2,"column_end":45}},{"value":"/ assert!(bits![1].last_zero().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358034,"byte_end":358078,"line_start":1253,"line_end":1253,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1].last_zero(), Some(0));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358080,"byte_end":358129,"line_start":1254,"line_end":1254,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358131,"byte_end":358138,"line_start":1255,"line_end":1255,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358140,"byte_end":358149,"line_start":1256,"line_end":1256,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4231},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358620,"byte_end":358632,"line_start":1276,"line_end":1276,"column_start":9,"column_end":21},"name":"leading_ones","qualname":"<BitSlice<T, O>>::leading_ones","value":"pub fn leading_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358231,"byte_end":358305,"line_start":1261,"line_end":1261,"column_start":2,"column_end":76}},{"value":"/ bit set to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358307,"byte_end":358326,"line_start":1262,"line_end":1262,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358328,"byte_end":358331,"line_start":1263,"line_end":1263,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358333,"byte_end":358380,"line_start":1264,"line_end":1264,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358382,"byte_end":358385,"line_start":1265,"line_end":1265,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358387,"byte_end":358402,"line_start":1266,"line_end":1266,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358404,"byte_end":358407,"line_start":1267,"line_end":1267,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358409,"byte_end":358420,"line_start":1268,"line_end":1268,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358422,"byte_end":358449,"line_start":1269,"line_end":1269,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358451,"byte_end":358454,"line_start":1270,"line_end":1270,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358456,"byte_end":358498,"line_start":1271,"line_end":1271,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![0].leading_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358500,"byte_end":358543,"line_start":1272,"line_end":1272,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0].leading_ones(), 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358545,"byte_end":358591,"line_start":1273,"line_end":1273,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358593,"byte_end":358600,"line_start":1274,"line_end":1274,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358602,"byte_end":358611,"line_start":1275,"line_end":1275,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4233},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359098,"byte_end":359111,"line_start":1295,"line_end":1295,"column_start":9,"column_end":22},"name":"leading_zeros","qualname":"<BitSlice<T, O>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358706,"byte_end":358780,"line_start":1280,"line_end":1280,"column_start":2,"column_end":76}},{"value":"/ bit set to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358782,"byte_end":358801,"line_start":1281,"line_end":1281,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358803,"byte_end":358806,"line_start":1282,"line_end":1282,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358808,"byte_end":358855,"line_start":1283,"line_end":1283,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358857,"byte_end":358860,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358862,"byte_end":358877,"line_start":1285,"line_end":1285,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358879,"byte_end":358882,"line_start":1286,"line_end":1286,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358884,"byte_end":358895,"line_start":1287,"line_end":1287,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358897,"byte_end":358924,"line_start":1288,"line_end":1288,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358926,"byte_end":358929,"line_start":1289,"line_end":1289,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358931,"byte_end":358974,"line_start":1290,"line_end":1290,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1].leading_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":358976,"byte_end":359020,"line_start":1291,"line_end":1291,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1].leading_zeros(), 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359022,"byte_end":359069,"line_start":1292,"line_end":1292,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359071,"byte_end":359078,"line_start":1293,"line_end":1293,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359080,"byte_end":359089,"line_start":1294,"line_end":1294,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4235},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359573,"byte_end":359586,"line_start":1314,"line_end":1314,"column_start":9,"column_end":22},"name":"trailing_ones","qualname":"<BitSlice<T, O>>::trailing_ones","value":"pub fn trailing_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359184,"byte_end":359259,"line_start":1299,"line_end":1299,"column_start":2,"column_end":77}},{"value":"/ set to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359261,"byte_end":359276,"line_start":1300,"line_end":1300,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359278,"byte_end":359281,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359283,"byte_end":359330,"line_start":1302,"line_end":1302,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359332,"byte_end":359335,"line_start":1303,"line_end":1303,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359337,"byte_end":359352,"line_start":1304,"line_end":1304,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359354,"byte_end":359357,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359359,"byte_end":359370,"line_start":1306,"line_end":1306,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359372,"byte_end":359399,"line_start":1307,"line_end":1307,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359401,"byte_end":359404,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359406,"byte_end":359449,"line_start":1309,"line_end":1309,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0].trailing_ones(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359451,"byte_end":359495,"line_start":1310,"line_end":1310,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1].trailing_ones(), 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359497,"byte_end":359544,"line_start":1311,"line_end":1311,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359546,"byte_end":359553,"line_start":1312,"line_end":1312,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359555,"byte_end":359564,"line_start":1313,"line_end":1313,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4237},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360085,"byte_end":360099,"line_start":1334,"line_end":1334,"column_start":9,"column_end":23},"name":"trailing_zeros","qualname":"<BitSlice<T, O>>::trailing_zeros","value":"pub fn trailing_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359693,"byte_end":359768,"line_start":1319,"line_end":1319,"column_start":2,"column_end":77}},{"value":"/ set to `1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359770,"byte_end":359785,"line_start":1320,"line_end":1320,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359787,"byte_end":359790,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359792,"byte_end":359839,"line_start":1322,"line_end":1322,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359841,"byte_end":359844,"line_start":1323,"line_end":1323,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359846,"byte_end":359861,"line_start":1324,"line_end":1324,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359863,"byte_end":359866,"line_start":1325,"line_end":1325,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359868,"byte_end":359879,"line_start":1326,"line_end":1326,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359881,"byte_end":359908,"line_start":1327,"line_end":1327,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359910,"byte_end":359913,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359915,"byte_end":359959,"line_start":1329,"line_end":1329,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1].trailing_zeros(), 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":359961,"byte_end":360006,"line_start":1330,"line_end":1330,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![1, 0].trailing_zeros(), 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360008,"byte_end":360056,"line_start":1331,"line_end":1331,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360058,"byte_end":360065,"line_start":1332,"line_end":1332,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360067,"byte_end":360076,"line_start":1333,"line_end":1333,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4239},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360517,"byte_end":360520,"line_start":1353,"line_end":1353,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<T, O>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if there is at least one bit set to `1` in the bit-slice.","sig":null,"attributes":[{"value":"/ Tests if there is at least one bit set to `1` in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360205,"byte_end":360272,"line_start":1339,"line_end":1339,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360274,"byte_end":360277,"line_start":1340,"line_end":1340,"column_start":2,"column_end":5}},{"value":"/ Returns `false` when `self` is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360279,"byte_end":360320,"line_start":1341,"line_end":1341,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360322,"byte_end":360325,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360327,"byte_end":360342,"line_start":1343,"line_end":1343,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360344,"byte_end":360347,"line_start":1344,"line_end":1344,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360349,"byte_end":360360,"line_start":1345,"line_end":1345,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360362,"byte_end":360389,"line_start":1346,"line_end":1346,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360391,"byte_end":360394,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits![].any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360396,"byte_end":360424,"line_start":1348,"line_end":1348,"column_start":2,"column_end":30}},{"value":"/ assert!(!bits![0].any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360426,"byte_end":360455,"line_start":1349,"line_end":1349,"column_start":2,"column_end":31}},{"value":"/ assert!(bits![0, 1].any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360457,"byte_end":360488,"line_start":1350,"line_end":1350,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360490,"byte_end":360497,"line_start":1351,"line_end":1351,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360499,"byte_end":360508,"line_start":1352,"line_end":1352,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360863,"byte_end":360866,"line_start":1371,"line_end":1371,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<T, O>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if every bit is set to `1` in the bit-slice.","sig":null,"attributes":[{"value":"/ Tests if every bit is set to `1` in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360567,"byte_end":360621,"line_start":1357,"line_end":1357,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360623,"byte_end":360626,"line_start":1358,"line_end":1358,"column_start":2,"column_end":5}},{"value":"/ Returns `true` when `self` is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360628,"byte_end":360668,"line_start":1359,"line_end":1359,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360670,"byte_end":360673,"line_start":1360,"line_end":1360,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360675,"byte_end":360690,"line_start":1361,"line_end":1361,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360692,"byte_end":360695,"line_start":1362,"line_end":1362,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360697,"byte_end":360708,"line_start":1363,"line_end":1363,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360710,"byte_end":360737,"line_start":1364,"line_end":1364,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360739,"byte_end":360742,"line_start":1365,"line_end":1365,"column_start":2,"column_end":5}},{"value":"/ assert!( bits![].all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360744,"byte_end":360772,"line_start":1366,"line_end":1366,"column_start":2,"column_end":30}},{"value":"/ assert!(!bits![0].all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360774,"byte_end":360803,"line_start":1367,"line_end":1367,"column_start":2,"column_end":31}},{"value":"/ assert!( bits![1].all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360805,"byte_end":360834,"line_start":1368,"line_end":1368,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360836,"byte_end":360843,"line_start":1369,"line_end":1369,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360845,"byte_end":360854,"line_start":1370,"line_end":1370,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4241},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361227,"byte_end":361234,"line_start":1389,"line_end":1389,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<T, O>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if every bit is cleared to `0` in the bit-slice.","sig":null,"attributes":[{"value":"/ Tests if every bit is cleared to `0` in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360915,"byte_end":360973,"line_start":1375,"line_end":1375,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360975,"byte_end":360978,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ Returns `true` when `self` is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":360980,"byte_end":361020,"line_start":1377,"line_end":1377,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361022,"byte_end":361025,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361027,"byte_end":361042,"line_start":1379,"line_end":1379,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361044,"byte_end":361047,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361049,"byte_end":361060,"line_start":1381,"line_end":1381,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361062,"byte_end":361089,"line_start":1382,"line_end":1382,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361091,"byte_end":361094,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ assert!( bits![].not_any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361096,"byte_end":361128,"line_start":1384,"line_end":1384,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits![1].not_any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361130,"byte_end":361163,"line_start":1385,"line_end":1385,"column_start":2,"column_end":35}},{"value":"/ assert!( bits![0].not_any());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361165,"byte_end":361198,"line_start":1386,"line_end":1386,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361200,"byte_end":361207,"line_start":1387,"line_end":1387,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361209,"byte_end":361218,"line_start":1388,"line_end":1388,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4242},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361602,"byte_end":361609,"line_start":1407,"line_end":1407,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<T, O>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if at least one bit is cleared to `0` in the bit-slice.","sig":null,"attributes":[{"value":"/ Tests if at least one bit is cleared to `0` in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361282,"byte_end":361347,"line_start":1393,"line_end":1393,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361349,"byte_end":361352,"line_start":1394,"line_end":1394,"column_start":2,"column_end":5}},{"value":"/ Returns `false` when `self` is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361354,"byte_end":361395,"line_start":1395,"line_end":1395,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361397,"byte_end":361400,"line_start":1396,"line_end":1396,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361402,"byte_end":361417,"line_start":1397,"line_end":1397,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361419,"byte_end":361422,"line_start":1398,"line_end":1398,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361424,"byte_end":361435,"line_start":1399,"line_end":1399,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361437,"byte_end":361464,"line_start":1400,"line_end":1400,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361466,"byte_end":361469,"line_start":1401,"line_end":1401,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits![].not_all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361471,"byte_end":361503,"line_start":1402,"line_end":1402,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits![1].not_all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361505,"byte_end":361538,"line_start":1403,"line_end":1403,"column_start":2,"column_end":35}},{"value":"/ assert!( bits![0].not_all());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361540,"byte_end":361573,"line_start":1404,"line_end":1404,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361575,"byte_end":361582,"line_start":1405,"line_end":1405,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361584,"byte_end":361593,"line_start":1406,"line_end":1406,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4243},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362045,"byte_end":362049,"line_start":1427,"line_end":1427,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<T, O>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if at least one bit is set to `1`, and at least one bit is cleared\n to `0`, in the bit-slice.","sig":null,"attributes":[{"value":"/ Tests if at least one bit is set to `1`, and at least one bit is cleared","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361657,"byte_end":361733,"line_start":1411,"line_end":1411,"column_start":2,"column_end":78}},{"value":"/ to `0`, in the bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361735,"byte_end":361764,"line_start":1412,"line_end":1412,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361766,"byte_end":361769,"line_start":1413,"line_end":1413,"column_start":2,"column_end":5}},{"value":"/ Returns `false` when `self` is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361771,"byte_end":361812,"line_start":1414,"line_end":1414,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361814,"byte_end":361817,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361819,"byte_end":361834,"line_start":1416,"line_end":1416,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361836,"byte_end":361839,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361841,"byte_end":361852,"line_start":1418,"line_end":1418,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361854,"byte_end":361881,"line_start":1419,"line_end":1419,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361883,"byte_end":361886,"line_start":1420,"line_end":1420,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits![].some());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361888,"byte_end":361917,"line_start":1421,"line_end":1421,"column_start":2,"column_end":31}},{"value":"/ assert!(!bits![0].some());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361919,"byte_end":361949,"line_start":1422,"line_end":1422,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits![1].some());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361951,"byte_end":361981,"line_start":1423,"line_end":1423,"column_start":2,"column_end":32}},{"value":"/ assert!( bits![0, 1].some());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":361983,"byte_end":362016,"line_start":1424,"line_end":1424,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362018,"byte_end":362025,"line_start":1425,"line_end":1425,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362027,"byte_end":362036,"line_start":1426,"line_end":1426,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4247},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363537,"byte_end":363547,"line_start":1474,"line_end":1474,"column_start":9,"column_end":19},"name":"shift_left","qualname":"<BitSlice<T, O>>::shift_left","value":"pub fn shift_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice “left” (towards the zero-index),\n clearing the “right” bits to `0`.","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice “left” (towards the zero-index),","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362192,"byte_end":362267,"line_start":1438,"line_end":1438,"column_start":2,"column_end":73}},{"value":"/ clearing the “right” bits to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362269,"byte_end":362310,"line_start":1439,"line_end":1439,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362312,"byte_end":362315,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ This is a strictly-worse analogue to taking `bits = &bits[by ..]`: it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362317,"byte_end":362390,"line_start":1441,"line_end":1441,"column_start":2,"column_end":75}},{"value":"/ has to modify the entire memory region that `bits` governs, and destroys","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362392,"byte_end":362468,"line_start":1442,"line_end":1442,"column_start":2,"column_end":78}},{"value":"/ contained information. Unless the actual memory layout and contents of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362470,"byte_end":362544,"line_start":1443,"line_end":1443,"column_start":2,"column_end":76}},{"value":"/ your bit-slice matters to your program, you should *probably* prefer to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362546,"byte_end":362621,"line_start":1444,"line_end":1444,"column_start":2,"column_end":77}},{"value":"/ munch your way forward through a bit-slice handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362623,"byte_end":362677,"line_start":1445,"line_end":1445,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362679,"byte_end":362682,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ Note also that the “left” here is semantic only, and **does not**","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362684,"byte_end":362757,"line_start":1447,"line_end":1447,"column_start":2,"column_end":71}},{"value":"/ necessarily correspond to a left-shift instruction applied to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362759,"byte_end":362828,"line_start":1448,"line_end":1448,"column_start":2,"column_end":71}},{"value":"/ underlying integer storage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362830,"byte_end":362861,"line_start":1449,"line_end":1449,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362863,"byte_end":362866,"line_start":1450,"line_end":1450,"column_start":2,"column_end":5}},{"value":"/ This has no effect when `by` is `0`. When `by` is `self.len()`, the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362868,"byte_end":362939,"line_start":1451,"line_end":1451,"column_start":2,"column_end":73}},{"value":"/ bit-slice is entirely cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362941,"byte_end":362982,"line_start":1452,"line_end":1452,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362984,"byte_end":362987,"line_start":1453,"line_end":1453,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362989,"byte_end":363002,"line_start":1454,"line_end":1454,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363004,"byte_end":363007,"line_start":1455,"line_end":1455,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363009,"byte_end":363063,"line_start":1456,"line_end":1456,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363065,"byte_end":363068,"line_start":1457,"line_end":1457,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363070,"byte_end":363085,"line_start":1458,"line_end":1458,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363087,"byte_end":363090,"line_start":1459,"line_end":1459,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363092,"byte_end":363103,"line_start":1460,"line_end":1460,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363105,"byte_end":363132,"line_start":1461,"line_end":1461,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363134,"byte_end":363137,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363139,"byte_end":363200,"line_start":1463,"line_end":1463,"column_start":2,"column_end":63}},{"value":"/ // these bits are retained ^--------------------------^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363202,"byte_end":363261,"line_start":1464,"line_end":1464,"column_start":2,"column_end":61}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363263,"byte_end":363286,"line_start":1465,"line_end":1465,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363288,"byte_end":363352,"line_start":1466,"line_end":1466,"column_start":2,"column_end":66}},{"value":"/ // and move here       ^--------------------------^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363354,"byte_end":363409,"line_start":1467,"line_end":1467,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363411,"byte_end":363414,"line_start":1468,"line_end":1468,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363416,"byte_end":363447,"line_start":1469,"line_end":1469,"column_start":2,"column_end":33}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363449,"byte_end":363472,"line_start":1470,"line_end":1470,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363474,"byte_end":363508,"line_start":1471,"line_end":1471,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363510,"byte_end":363517,"line_start":1472,"line_end":1472,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363519,"byte_end":363528,"line_start":1473,"line_end":1473,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4248},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365266,"byte_end":365277,"line_start":1532,"line_end":1532,"column_start":9,"column_end":20},"name":"shift_right","qualname":"<BitSlice<T, O>>::shift_right","value":"pub fn shift_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice “right” (away from the zero-index),\n clearing the “left” bits to `0`.","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice “right” (away from the zero-index),","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363903,"byte_end":363981,"line_start":1496,"line_end":1496,"column_start":2,"column_end":76}},{"value":"/ clearing the “left” bits to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":363983,"byte_end":364023,"line_start":1497,"line_end":1497,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364025,"byte_end":364028,"line_start":1498,"line_end":1498,"column_start":2,"column_end":5}},{"value":"/ This is a strictly-worse analogue to taking `bits = &bits[.. bits.len()","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364030,"byte_end":364105,"line_start":1499,"line_end":1499,"column_start":2,"column_end":77}},{"value":"/ - by]`: it must modify the entire memory region that `bits` governs, and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364107,"byte_end":364183,"line_start":1500,"line_end":1500,"column_start":2,"column_end":78}},{"value":"/ destroys contained information. Unless the actual memory layout and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364185,"byte_end":364256,"line_start":1501,"line_end":1501,"column_start":2,"column_end":73}},{"value":"/ contents of your bit-slice matters to your program, you should","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364258,"byte_end":364324,"line_start":1502,"line_end":1502,"column_start":2,"column_end":68}},{"value":"/ *probably* prefer to munch your way backward through a bit-slice handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364326,"byte_end":364402,"line_start":1503,"line_end":1503,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364404,"byte_end":364407,"line_start":1504,"line_end":1504,"column_start":2,"column_end":5}},{"value":"/ Note also that the “right” here is semantic only, and **does not**","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364409,"byte_end":364483,"line_start":1505,"line_end":1505,"column_start":2,"column_end":72}},{"value":"/ necessarily correspond to a right-shift instruction applied to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364485,"byte_end":364555,"line_start":1506,"line_end":1506,"column_start":2,"column_end":72}},{"value":"/ underlying integer storage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364557,"byte_end":364588,"line_start":1507,"line_end":1507,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364590,"byte_end":364593,"line_start":1508,"line_end":1508,"column_start":2,"column_end":5}},{"value":"/ This has no effect when `by` is `0`. When `by` is `self.len()`, the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364595,"byte_end":364666,"line_start":1509,"line_end":1509,"column_start":2,"column_end":73}},{"value":"/ bit-slice is entirely cleared to `0`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364668,"byte_end":364709,"line_start":1510,"line_end":1510,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364711,"byte_end":364714,"line_start":1511,"line_end":1511,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364716,"byte_end":364729,"line_start":1512,"line_end":1512,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364731,"byte_end":364734,"line_start":1513,"line_end":1513,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364736,"byte_end":364790,"line_start":1514,"line_end":1514,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364792,"byte_end":364795,"line_start":1515,"line_end":1515,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364797,"byte_end":364812,"line_start":1516,"line_end":1516,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364814,"byte_end":364817,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364819,"byte_end":364830,"line_start":1518,"line_end":1518,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364832,"byte_end":364859,"line_start":1519,"line_end":1519,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364861,"byte_end":364864,"line_start":1520,"line_end":1520,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364866,"byte_end":364927,"line_start":1521,"line_end":1521,"column_start":2,"column_end":63}},{"value":"/ // these bits stay   ^--------------------------^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364929,"byte_end":364982,"line_start":1522,"line_end":1522,"column_start":2,"column_end":55}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":364984,"byte_end":365008,"line_start":1523,"line_end":1523,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365010,"byte_end":365074,"line_start":1524,"line_end":1524,"column_start":2,"column_end":66}},{"value":"/ // and move here             ^--------------------------^","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365076,"byte_end":365137,"line_start":1525,"line_end":1525,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365139,"byte_end":365142,"line_start":1526,"line_end":1526,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365144,"byte_end":365175,"line_start":1527,"line_end":1527,"column_start":2,"column_end":33}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365177,"byte_end":365201,"line_start":1528,"line_end":1528,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0; 2]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365203,"byte_end":365237,"line_start":1529,"line_end":1529,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365239,"byte_end":365246,"line_start":1530,"line_end":1530,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365248,"byte_end":365257,"line_start":1531,"line_end":1531,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4262},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369205,"byte_end":369216,"line_start":1674,"line_end":1674,"column_start":9,"column_end":20},"name":"set_aliased","qualname":"<BitSlice<T, O>>::set_aliased","value":"pub fn set_aliased(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a single bit, using alias-safe operations.","sig":null,"attributes":[{"value":"/ Writes a new value into a single bit, using alias-safe operations.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368254,"byte_end":368324,"line_start":1642,"line_end":1642,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368326,"byte_end":368329,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to [`.set()`], except that it does not require an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368331,"byte_end":368403,"line_start":1644,"line_end":1644,"column_start":2,"column_end":74}},{"value":"/ `&mut` reference, and allows bit-slices with alias-safe storage to share","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368405,"byte_end":368481,"line_start":1645,"line_end":1645,"column_start":2,"column_end":78}},{"value":"/ write permissions.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368483,"byte_end":368505,"line_start":1646,"line_end":1646,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368507,"byte_end":368510,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368512,"byte_end":368529,"line_start":1648,"line_end":1648,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368531,"byte_end":368534,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ - `&self`: This method only exists on bit-slices with alias-safe","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368536,"byte_end":368604,"line_start":1650,"line_end":1650,"column_start":2,"column_end":70}},{"value":"/   storage, and so does not require exclusive access.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368606,"byte_end":368662,"line_start":1651,"line_end":1651,"column_start":2,"column_end":58}},{"value":"/ - `index`: The bit index to set. It must be in `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368664,"byte_end":368733,"line_start":1652,"line_end":1652,"column_start":2,"column_end":71}},{"value":"/ - `value`: The new bit-value to write into the bit at `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368735,"byte_end":368801,"line_start":1653,"line_end":1653,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368803,"byte_end":368806,"line_start":1654,"line_end":1654,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368808,"byte_end":368821,"line_start":1655,"line_end":1655,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368823,"byte_end":368826,"line_start":1656,"line_end":1656,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is out of bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368828,"byte_end":368872,"line_start":1657,"line_end":1657,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368874,"byte_end":368877,"line_start":1658,"line_end":1658,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368879,"byte_end":368894,"line_start":1659,"line_end":1659,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368896,"byte_end":368899,"line_start":1660,"line_end":1660,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368901,"byte_end":368912,"line_start":1661,"line_end":1661,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368914,"byte_end":368941,"line_start":1662,"line_end":1662,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368943,"byte_end":368968,"line_start":1663,"line_end":1663,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368970,"byte_end":368973,"line_start":1664,"line_end":1664,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice<_, _> = bits![Cell<usize>, Lsb0; 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368975,"byte_end":369038,"line_start":1665,"line_end":1665,"column_start":2,"column_end":65}},{"value":"/ bits.set_aliased(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369040,"byte_end":369070,"line_start":1666,"line_end":1666,"column_start":2,"column_end":32}},{"value":"/ bits.set_aliased(1, false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369072,"byte_end":369103,"line_start":1667,"line_end":1667,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369105,"byte_end":369108,"line_start":1668,"line_end":1668,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369110,"byte_end":369144,"line_start":1669,"line_end":1669,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369146,"byte_end":369153,"line_start":1670,"line_end":1670,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369155,"byte_end":369158,"line_start":1671,"line_end":1671,"column_start":2,"column_end":5}},{"value":"/ [`.set()`]: Self::set","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369160,"byte_end":369185,"line_start":1672,"line_end":1672,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369187,"byte_end":369196,"line_start":1673,"line_end":1673,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4263},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370412,"byte_end":370433,"line_start":1715,"line_end":1715,"column_start":16,"column_end":37},"name":"set_aliased_unchecked","qualname":"<BitSlice<T, O>>::set_aliased_unchecked","value":"pub unsafe fn set_aliased_unchecked(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new value into a single bit, using alias-safe operations and\n without bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new value into a single bit, using alias-safe operations and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369367,"byte_end":369440,"line_start":1681,"line_end":1681,"column_start":2,"column_end":75}},{"value":"/ without bounds checking.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369442,"byte_end":369470,"line_start":1682,"line_end":1682,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369472,"byte_end":369475,"line_start":1683,"line_end":1683,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to [`.set_unchecked()`], except that it does not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369477,"byte_end":369548,"line_start":1684,"line_end":1684,"column_start":2,"column_end":73}},{"value":"/ require an `&mut` reference, and allows bit-slices with alias-safe","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369550,"byte_end":369620,"line_start":1685,"line_end":1685,"column_start":2,"column_end":72}},{"value":"/ storage to share write permissions.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369622,"byte_end":369661,"line_start":1686,"line_end":1686,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369663,"byte_end":369666,"line_start":1687,"line_end":1687,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369668,"byte_end":369685,"line_start":1688,"line_end":1688,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369687,"byte_end":369690,"line_start":1689,"line_end":1689,"column_start":2,"column_end":5}},{"value":"/ - `&self`: This method only exists on bit-slices with alias-safe","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369692,"byte_end":369760,"line_start":1690,"line_end":1690,"column_start":2,"column_end":70}},{"value":"/   storage, and so does not require exclusive access.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369762,"byte_end":369818,"line_start":1691,"line_end":1691,"column_start":2,"column_end":58}},{"value":"/ - `index`: The bit index to set. It must be in `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369820,"byte_end":369889,"line_start":1692,"line_end":1692,"column_start":2,"column_end":71}},{"value":"/ - `value`: The new bit-value to write into the bit at `index`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369891,"byte_end":369957,"line_start":1693,"line_end":1693,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369959,"byte_end":369962,"line_start":1694,"line_end":1694,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369964,"byte_end":369977,"line_start":1695,"line_end":1695,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369979,"byte_end":369982,"line_start":1696,"line_end":1696,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that `index` is not out of bounds.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":369984,"byte_end":370045,"line_start":1697,"line_end":1697,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370047,"byte_end":370050,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370052,"byte_end":370067,"line_start":1699,"line_end":1699,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370069,"byte_end":370072,"line_start":1700,"line_end":1700,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370074,"byte_end":370085,"line_start":1701,"line_end":1701,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370087,"byte_end":370114,"line_start":1702,"line_end":1702,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370116,"byte_end":370141,"line_start":1703,"line_end":1703,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370143,"byte_end":370146,"line_start":1704,"line_end":1704,"column_start":2,"column_end":5}},{"value":"/ let data = Cell::new(0u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370148,"byte_end":370178,"line_start":1705,"line_end":1705,"column_start":2,"column_end":32}},{"value":"/ let bits = &data.view_bits::<Lsb0>()[.. 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370180,"byte_end":370227,"line_start":1706,"line_end":1706,"column_start":2,"column_end":49}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370229,"byte_end":370241,"line_start":1707,"line_end":1707,"column_start":2,"column_end":14}},{"value":"/   bits.set_aliased_unchecked(3, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370243,"byte_end":370285,"line_start":1708,"line_end":1708,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370287,"byte_end":370292,"line_start":1709,"line_end":1709,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data.get(), 8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370294,"byte_end":370324,"line_start":1710,"line_end":1710,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370326,"byte_end":370333,"line_start":1711,"line_end":1711,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370335,"byte_end":370338,"line_start":1712,"line_end":1712,"column_start":2,"column_end":5}},{"value":"/ [`.set_unchecked()`]: Self::set_unchecked","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370340,"byte_end":370385,"line_start":1713,"line_end":1713,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370387,"byte_end":370396,"line_start":1714,"line_end":1714,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":4267},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370994,"byte_end":371002,"line_start":1735,"line_end":1735,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<T, O>::MAX_BITS","value":"usize","parent":{"krate":0,"index":4264},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370634,"byte_end":370689,"line_start":1726,"line_end":1726,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370691,"byte_end":370694,"line_start":1727,"line_end":1727,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible *index* is one less","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370696,"byte_end":370771,"line_start":1728,"line_end":1728,"column_start":2,"column_end":77}},{"value":"/ than this value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370773,"byte_end":370793,"line_start":1729,"line_end":1729,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370795,"byte_end":370798,"line_start":1730,"line_end":1730,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370800,"byte_end":370844,"line_start":1731,"line_end":1731,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370846,"byte_end":370890,"line_start":1732,"line_end":1732,"column_start":2,"column_end":46}},{"value":"/ |   32 bits    |     `0x1fff_ffff`     |","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370892,"byte_end":370936,"line_start":1733,"line_end":1733,"column_start":2,"column_end":46}},{"value":"/ |   64 bits    |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370938,"byte_end":370982,"line_start":1734,"line_end":1734,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":4268},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371860,"byte_end":371868,"line_start":1751,"line_end":1751,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<T, O>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":4264},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a `[T]` slice can be for\n  `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a `[T]` slice can be for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371054,"byte_end":371116,"line_start":1736,"line_end":1736,"column_start":2,"column_end":64}},{"value":"/  `BitSlice<_, T>` to cover it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371118,"byte_end":371152,"line_start":1737,"line_end":1737,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371154,"byte_end":371157,"line_start":1738,"line_end":1738,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371159,"byte_end":371227,"line_start":1739,"line_end":1739,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371229,"byte_end":371301,"line_start":1740,"line_end":1740,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the bit-slice began at the zeroth bit. Such a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371303,"byte_end":371379,"line_start":1741,"line_end":1741,"column_start":2,"column_end":78}},{"value":"/ bit-slice is difficult to manually construct, but would not otherwise","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371381,"byte_end":371454,"line_start":1742,"line_end":1742,"column_start":2,"column_end":75}},{"value":"/ fail.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371456,"byte_end":371465,"line_start":1743,"line_end":1743,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371467,"byte_end":371470,"line_start":1744,"line_end":1744,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371472,"byte_end":371533,"line_start":1745,"line_end":1745,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371535,"byte_end":371596,"line_start":1746,"line_end":1746,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371598,"byte_end":371659,"line_start":1747,"line_end":1747,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371661,"byte_end":371722,"line_start":1748,"line_end":1748,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371724,"byte_end":371785,"line_start":1749,"line_end":1749,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371787,"byte_end":371848,"line_start":1750,"line_end":1750,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4272},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372673,"byte_end":372682,"line_start":1783,"line_end":1783,"column_start":9,"column_end":18},"name":"to_bitvec","qualname":"<BitSlice<T, O>>::to_bitvec","value":"pub fn to_bitvec(&Self) -> BitVec<T::Unalias, O>","parent":null,"children":[],"decl_id":null,"docs":" Copies a bit-slice into an owned bit-vector.","sig":null,"attributes":[{"value":"/ Copies a bit-slice into an owned bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372011,"byte_end":372059,"line_start":1760,"line_end":1760,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372061,"byte_end":372064,"line_start":1761,"line_end":1761,"column_start":2,"column_end":5}},{"value":"/ Since the new vector is freshly owned, this gets marked as `::Unalias`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372066,"byte_end":372140,"line_start":1762,"line_end":1762,"column_start":2,"column_end":76}},{"value":"/ to remove any guards that may have been inserted by the bit-slice’s","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372142,"byte_end":372215,"line_start":1763,"line_end":1763,"column_start":2,"column_end":73}},{"value":"/ history.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372217,"byte_end":372229,"line_start":1764,"line_end":1764,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372231,"byte_end":372234,"line_start":1765,"line_end":1765,"column_start":2,"column_end":5}},{"value":"/ It does *not* use the underlying memory type, so that a `BitSlice<_,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372236,"byte_end":372308,"line_start":1766,"line_end":1766,"column_start":2,"column_end":74}},{"value":"/ Cell<_>>` will produce a `BitVec<_, Cell<_>>`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372310,"byte_end":372360,"line_start":1767,"line_end":1767,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372362,"byte_end":372365,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372367,"byte_end":372382,"line_start":1769,"line_end":1769,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372384,"byte_end":372387,"line_start":1770,"line_end":1770,"column_start":2,"column_end":5}},{"value":"/ [`slice::to_vec`](https://doc.rust-lang.org/std/primitive.slice.html#method.to_vec)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372389,"byte_end":372476,"line_start":1771,"line_end":1771,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372478,"byte_end":372481,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372483,"byte_end":372498,"line_start":1773,"line_end":1773,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372500,"byte_end":372503,"line_start":1774,"line_end":1774,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372505,"byte_end":372516,"line_start":1775,"line_end":1775,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372518,"byte_end":372545,"line_start":1776,"line_end":1776,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372547,"byte_end":372550,"line_start":1777,"line_end":1777,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372552,"byte_end":372585,"line_start":1778,"line_end":1778,"column_start":2,"column_end":35}},{"value":"/ let bv = bits.to_bitvec();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372587,"byte_end":372617,"line_start":1779,"line_end":1779,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits, bv);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372619,"byte_end":372644,"line_start":1780,"line_end":1780,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372646,"byte_end":372653,"line_start":1781,"line_end":1781,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372655,"byte_end":372664,"line_start":1782,"line_end":1782,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":4274},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":373022,"byte_end":373046,"line_start":1797,"line_end":1797,"column_start":15,"column_end":39},"name":"from_raw_parts_unchecked","qualname":"::slice::from_raw_parts_unchecked","value":"pub unsafe fn from_raw_parts_unchecked<'a, T, O>(BitPtr<Const, T, O>, usize)\n-> &'a BitSlice<T, O> where O: BitOrder, T: 'a + BitStore","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":372932,"byte_end":372941,"line_start":1795,"line_end":1795,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4278},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":373305,"byte_end":373333,"line_start":1810,"line_end":1810,"column_start":15,"column_end":43},"name":"from_raw_parts_unchecked_mut","qualname":"::slice::from_raw_parts_unchecked_mut","value":"pub unsafe fn from_raw_parts_unchecked_mut<'a, T, O>(BitPtr<Mut, T, O>, usize)\n-> &'a mut BitSlice<T, O> where O: BitOrder, T: 'a + BitStore","parent":null,"children":[],"decl_id":null,"docs":"# Raw Bit-Slice Construction","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":373211,"byte_end":373220,"line_start":1808,"line_end":1808,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":4282},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","parent":null,"children":[{"krate":0,"index":4283},{"krate":0,"index":4284},{"krate":0,"index":4287},{"krate":0,"index":4288},{"krate":0,"index":4290},{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4302},{"krate":0,"index":4305},{"krate":0,"index":4308},{"krate":0,"index":4323},{"krate":0,"index":7526},{"krate":0,"index":7541},{"krate":0,"index":7555},{"krate":0,"index":7569},{"krate":0,"index":7584},{"krate":0,"index":7598},{"krate":0,"index":7612},{"krate":0,"index":7627},{"krate":0,"index":7641},{"krate":0,"index":7655},{"krate":0,"index":7670},{"krate":0,"index":7684},{"krate":0,"index":7698},{"krate":0,"index":7713},{"krate":0,"index":7727},{"krate":0,"index":4324},{"krate":0,"index":7741},{"krate":0,"index":7744},{"krate":0,"index":7758},{"krate":0,"index":7761},{"krate":0,"index":7775},{"krate":0,"index":7778},{"krate":0,"index":7792},{"krate":0,"index":7795},{"krate":0,"index":7809},{"krate":0,"index":7812}],"decl_id":null,"docs":"# Storage Memory Description","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4308},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561306,"byte_end":561314,"line_start":21,"line_end":21,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: 'static + Debug","parent":null,"children":[{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4317},{"krate":0,"index":4319},{"krate":0,"index":4321}],"decl_id":null,"docs":"# Bit Storage","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4309},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561475,"byte_end":561478,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" The element type used in the memory region underlying a `BitSlice`. It\n is *always* one of the unsigned integer fundamentals.\n","sig":null,"attributes":[{"value":"/ The element type used in the memory region underlying a `BitSlice`. It","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561335,"byte_end":561409,"line_start":22,"line_end":22,"column_start":2,"column_end":76}},{"value":"/ is *always* one of the unsigned integer fundamentals.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561411,"byte_end":561468,"line_start":23,"line_end":23,"column_start":2,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":4310},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561810,"byte_end":561816,"line_start":30,"line_end":30,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem> + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" A type that selects the appropriate load/store instructions when\n accessing the memory bus. It determines what instructions are used when\n moving a `Self::Mem` value between the processor and the memory system.","sig":null,"attributes":[{"value":"/ A type that selects the appropriate load/store instructions when","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561522,"byte_end":561590,"line_start":25,"line_end":25,"column_start":2,"column_end":70}},{"value":"/ accessing the memory bus. It determines what instructions are used when","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561592,"byte_end":561667,"line_start":26,"line_end":26,"column_start":2,"column_end":77}},{"value":"/ moving a `Self::Mem` value between the processor and the memory system.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561669,"byte_end":561744,"line_start":27,"line_end":27,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561746,"byte_end":561749,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ This must be *at least* able to manage aliasing.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561751,"byte_end":561803,"line_start":29,"line_end":29,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":4311},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562225,"byte_end":562230,"line_start":36,"line_end":36,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor that is known to be alias-safe. It is\n used when a `BitSlice` introduces multiple handles that view the same\n memory location, and at least one of them has write capabilities to it.\n It must have the same underlying memory type, and can only change access\n patterns or public-facing usage.\n","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor that is known to be alias-safe. It is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561876,"byte_end":561950,"line_start":31,"line_end":31,"column_start":2,"column_end":76}},{"value":"/ used when a `BitSlice` introduces multiple handles that view the same","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561952,"byte_end":562025,"line_start":32,"line_end":32,"column_start":2,"column_end":75}},{"value":"/ memory location, and at least one of them has write capabilities to it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562027,"byte_end":562102,"line_start":33,"line_end":33,"column_start":2,"column_end":77}},{"value":"/ It must have the same underlying memory type, and can only change access","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562104,"byte_end":562180,"line_start":34,"line_end":34,"column_start":2,"column_end":78}},{"value":"/ patterns or public-facing usage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562182,"byte_end":562218,"line_start":35,"line_end":35,"column_start":2,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":4312},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562397,"byte_end":562404,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"name":"Unalias","qualname":"::store::BitStore::Unalias","value":"type Unalias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" The inverse of `::Alias`. It is used when a `BitSlice` removes the\n conditions that required a `T -> T::Alias` transition.\n","sig":null,"attributes":[{"value":"/ The inverse of `::Alias`. It is used when a `BitSlice` removes the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562260,"byte_end":562330,"line_start":37,"line_end":37,"column_start":2,"column_end":72}},{"value":"/ conditions that required a `T -> T::Alias` transition.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562332,"byte_end":562390,"line_start":38,"line_end":38,"column_start":2,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":4313},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562465,"byte_end":562469,"line_start":42,"line_end":42,"column_start":8,"column_end":12},"name":"ZERO","qualname":"::store::BitStore::ZERO","value":"Self","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" The zero constant.\n","sig":null,"attributes":[{"value":"/ The zero constant.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562435,"byte_end":562457,"line_start":41,"line_end":41,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4314},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562534,"byte_end":562537,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"new","qualname":"::store::BitStore::new","value":"pub fn new(Self::Mem) -> Self","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" Wraps a raw memory value as a `BitStore` type.\n","sig":null,"attributes":[{"value":"/ Wraps a raw memory value as a `BitStore` type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562479,"byte_end":562529,"line_start":44,"line_end":44,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4315},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562734,"byte_end":562744,"line_start":50,"line_end":50,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" Loads a value out of the memory system according to the `::Access`\n rules. This may be called when the value is aliased by a write-capable\n reference.\n","sig":null,"attributes":[{"value":"/ Loads a value out of the memory system according to the `::Access`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562567,"byte_end":562637,"line_start":47,"line_end":47,"column_start":2,"column_end":72}},{"value":"/ rules. This may be called when the value is aliased by a write-capable","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562639,"byte_end":562713,"line_start":48,"line_end":48,"column_start":2,"column_end":76}},{"value":"/ reference.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562715,"byte_end":562729,"line_start":49,"line_end":49,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562933,"byte_end":562944,"line_start":55,"line_end":55,"column_start":5,"column_end":16},"name":"store_value","qualname":"::store::BitStore::store_value","value":"pub fn store_value(&mut Self, Self::Mem)","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" Stores a value into the memory system. This is only called when there\n are no other handles to the value, and it may bypass `::Access`\n constraints.\n","sig":null,"attributes":[{"value":"/ Stores a value into the memory system. This is only called when there","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562768,"byte_end":562841,"line_start":52,"line_end":52,"column_start":2,"column_end":75}},{"value":"/ are no other handles to the value, and it may bypass `::Access`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562843,"byte_end":562910,"line_start":53,"line_end":53,"column_start":2,"column_end":69}},{"value":"/ constraints.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562912,"byte_end":562928,"line_start":54,"line_end":54,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":4317},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563510,"byte_end":563517,"line_start":75,"line_end":75,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" Reads a single bit out of the memory system according to the `::Access`\n rules. This is lifted from [`BitAccess`] so that it can be used\n elsewhere without additional casts.","sig":null,"attributes":[{"value":"/ Reads a single bit out of the memory system according to the `::Access`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":562977,"byte_end":563052,"line_start":57,"line_end":57,"column_start":2,"column_end":77}},{"value":"/ rules. This is lifted from [`BitAccess`] so that it can be used","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563054,"byte_end":563121,"line_start":58,"line_end":58,"column_start":2,"column_end":69}},{"value":"/ elsewhere without additional casts.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563123,"byte_end":563162,"line_start":59,"line_end":59,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563164,"byte_end":563167,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ ## Type Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563169,"byte_end":563191,"line_start":61,"line_end":61,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563193,"byte_end":563196,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ - `O`: The ordering of bits within `Self::Mem` governing the lookup.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563198,"byte_end":563270,"line_start":63,"line_end":63,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563272,"byte_end":563275,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563277,"byte_end":563294,"line_start":65,"line_end":65,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563296,"byte_end":563299,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit in `*self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563301,"byte_end":563355,"line_start":67,"line_end":67,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563357,"byte_end":563360,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ ## Returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563362,"byte_end":563376,"line_start":69,"line_end":69,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563378,"byte_end":563381,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` at `BitOrder::at(index)`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563383,"byte_end":563444,"line_start":71,"line_end":71,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563446,"byte_end":563449,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ [`BitAccess`]: crate::access::BitAccess","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563451,"byte_end":563494,"line_start":73,"line_end":73,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563496,"byte_end":563505,"line_start":74,"line_end":74,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":4319},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563872,"byte_end":563887,"line_start":86,"line_end":86,"column_start":8,"column_end":23},"name":"ALIGNED_TO_SIZE","qualname":"::store::BitStore::ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" All implementors are required to have their alignment match their size.","sig":null,"attributes":[{"value":"/ All implementors are required to have their alignment match their size.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563679,"byte_end":563754,"line_start":81,"line_end":81,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563756,"byte_end":563759,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ Use [`mem::aligned_to_size::<Self>()`][0] to prove this.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563761,"byte_end":563821,"line_start":83,"line_end":83,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563823,"byte_end":563826,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::mem::aligned_to_size","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563828,"byte_end":563864,"line_start":85,"line_end":85,"column_start":2,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":4321},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564188,"byte_end":564199,"line_start":95,"line_end":95,"column_start":8,"column_end":19},"name":"ALIAS_WIDTH","qualname":"::store::BitStore::ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":4308},"children":[],"decl_id":null,"docs":" All implementors are required to have `Self` and `Self::Alias` be equal\n in representation. This is true by fiat for all types except the\n unsigned integers.","sig":null,"attributes":[{"value":"/ All implementors are required to have `Self` and `Self::Alias` be equal","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563900,"byte_end":563975,"line_start":88,"line_end":88,"column_start":2,"column_end":77}},{"value":"/ in representation. This is true by fiat for all types except the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":563977,"byte_end":564045,"line_start":89,"line_end":89,"column_start":2,"column_end":70}},{"value":"/ unsigned integers.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564047,"byte_end":564069,"line_start":90,"line_end":90,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564071,"byte_end":564074,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ Use [`mem::layout_eq::<Self, Self::Alias>()`][0] to prove this.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564076,"byte_end":564143,"line_start":92,"line_end":92,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564145,"byte_end":564148,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ [0]: crate::mem::layout_eq","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":564150,"byte_end":564180,"line_start":94,"line_end":94,"column_start":2,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":4325},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","parent":null,"children":[{"krate":0,"index":4326},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4334},{"krate":0,"index":4337},{"krate":0,"index":4340},{"krate":0,"index":4343},{"krate":0,"index":4346},{"krate":0,"index":4347},{"krate":0,"index":4348},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4357},{"krate":0,"index":4360},{"krate":0,"index":4363},{"krate":0,"index":4364},{"krate":0,"index":4367},{"krate":0,"index":4370},{"krate":0,"index":4373},{"krate":0,"index":4374},{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4384},{"krate":0,"index":4387},{"krate":0,"index":4390},{"krate":0,"index":4393},{"krate":0,"index":4396},{"krate":0,"index":4399},{"krate":0,"index":4402},{"krate":0,"index":4515},{"krate":0,"index":4774},{"krate":0,"index":4919},{"krate":0,"index":5125},{"krate":0,"index":5130},{"krate":0,"index":5148},{"krate":0,"index":5159}],"decl_id":null,"docs":"# Dynamically-Allocated, Adjustable-Size, Bit Buffer","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570124,"byte_end":570150,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4469},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589101,"byte_end":589104,"line_start":64,"line_end":64,"column_start":9,"column_end":12},"name":"new","qualname":"<BitVec<T, O>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty, bit-vector.","sig":null,"attributes":[{"value":"/ Constructs a new, empty, bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588636,"byte_end":588676,"line_start":43,"line_end":43,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588678,"byte_end":588681,"line_start":44,"line_end":44,"column_start":2,"column_end":5}},{"value":"/ This does not allocate until bits are [`.push()`]ed into it, or space is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588683,"byte_end":588759,"line_start":45,"line_end":45,"column_start":2,"column_end":78}},{"value":"/ explicitly [`.reserve()`]d.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588761,"byte_end":588792,"line_start":46,"line_end":46,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588794,"byte_end":588797,"line_start":47,"line_end":47,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588799,"byte_end":588814,"line_start":48,"line_end":48,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588816,"byte_end":588819,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ [`Vec::new`](alloc::vec::Vec::new)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588821,"byte_end":588859,"line_start":50,"line_end":50,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588861,"byte_end":588864,"line_start":51,"line_end":51,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588866,"byte_end":588881,"line_start":52,"line_end":52,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588883,"byte_end":588886,"line_start":53,"line_end":53,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588888,"byte_end":588899,"line_start":54,"line_end":54,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588901,"byte_end":588928,"line_start":55,"line_end":55,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588930,"byte_end":588933,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<u8, Msb0>::new();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588935,"byte_end":588974,"line_start":57,"line_end":57,"column_start":2,"column_end":41}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588976,"byte_end":589003,"line_start":58,"line_end":58,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589005,"byte_end":589012,"line_start":59,"line_end":59,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589014,"byte_end":589017,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ [`.push()`]: Self::push","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589019,"byte_end":589046,"line_start":61,"line_end":61,"column_start":2,"column_end":29}},{"value":"/ [`.reserve()`]: Self::reserve","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589048,"byte_end":589081,"line_start":62,"line_end":62,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589083,"byte_end":589092,"line_start":63,"line_end":63,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4470},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590002,"byte_end":590015,"line_start":103,"line_end":103,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BitVec<T, O>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new, empty, bit-vector with space for at least `capacity`\n bits before reallocating.","sig":null,"attributes":[{"value":"/ Allocates a new, empty, bit-vector with space for at least `capacity`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589136,"byte_end":589209,"line_start":68,"line_end":68,"column_start":2,"column_end":75}},{"value":"/ bits before reallocating.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589211,"byte_end":589240,"line_start":69,"line_end":69,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589242,"byte_end":589245,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589247,"byte_end":589262,"line_start":71,"line_end":71,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589264,"byte_end":589267,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ [`Vec::with_capacity`](alloc::vec::Vec::with_capacity)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589269,"byte_end":589327,"line_start":73,"line_end":73,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589329,"byte_end":589332,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589334,"byte_end":589347,"line_start":75,"line_end":75,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589349,"byte_end":589352,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ This panics if the requested capacity is longer than what the bit-vector","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589354,"byte_end":589430,"line_start":77,"line_end":77,"column_start":2,"column_end":78}},{"value":"/ can represent. See [`BitSlice::MAX_BITS`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589432,"byte_end":589478,"line_start":78,"line_end":78,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589480,"byte_end":589483,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589485,"byte_end":589500,"line_start":80,"line_end":80,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589502,"byte_end":589505,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589507,"byte_end":589518,"line_start":82,"line_end":82,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589520,"byte_end":589547,"line_start":83,"line_end":83,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589549,"byte_end":589552,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(128);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589554,"byte_end":589606,"line_start":85,"line_end":85,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589608,"byte_end":589611,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589613,"byte_end":589640,"line_start":87,"line_end":87,"column_start":2,"column_end":29}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589642,"byte_end":589676,"line_start":88,"line_end":88,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589678,"byte_end":589681,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. 128 {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589683,"byte_end":589706,"line_start":90,"line_end":90,"column_start":2,"column_end":25}},{"value":"/   bv.push(i & 0xC0 == i);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589708,"byte_end":589737,"line_start":91,"line_end":91,"column_start":2,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589739,"byte_end":589744,"line_start":92,"line_end":92,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv.len(), 128);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589746,"byte_end":589776,"line_start":93,"line_end":93,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589778,"byte_end":589812,"line_start":94,"line_end":94,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589814,"byte_end":589817,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ bv.push(false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589819,"byte_end":589838,"line_start":96,"line_end":96,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 129);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589840,"byte_end":589870,"line_start":97,"line_end":97,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 129);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589872,"byte_end":589906,"line_start":98,"line_end":98,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589908,"byte_end":589915,"line_start":99,"line_end":99,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589917,"byte_end":589920,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589922,"byte_end":589982,"line_start":101,"line_end":101,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":589984,"byte_end":589993,"line_start":102,"line_end":102,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4471},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591391,"byte_end":591405,"line_start":146,"line_end":146,"column_start":16,"column_end":30},"name":"from_raw_parts","qualname":"<BitVec<T, O>>::from_raw_parts","value":"pub unsafe fn from_raw_parts(BitPtr<Mut, T, O>, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a bit-vector handle from its constituent fields.","sig":null,"attributes":[{"value":"/ Constructs a bit-vector handle from its constituent fields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590368,"byte_end":590431,"line_start":114,"line_end":114,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590433,"byte_end":590436,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590438,"byte_end":590453,"line_start":116,"line_end":116,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590455,"byte_end":590458,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ [`Vec::from_raw_parts`](alloc::vec::Vec::from_raw_parts)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590460,"byte_end":590520,"line_start":118,"line_end":118,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590522,"byte_end":590525,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590527,"byte_end":590540,"line_start":120,"line_end":120,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590542,"byte_end":590545,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ The **only** acceptable argument values for this function are those that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590547,"byte_end":590623,"line_start":122,"line_end":122,"column_start":2,"column_end":78}},{"value":"/ were previously produced by calling [`.into_raw_parts()`]. Furthermore,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590625,"byte_end":590700,"line_start":123,"line_end":123,"column_start":2,"column_end":77}},{"value":"/ you may only call this **at most once** on any set of arguments. Using","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590702,"byte_end":590776,"line_start":124,"line_end":124,"column_start":2,"column_end":76}},{"value":"/ the same arguments in more than one call to this function will result in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590778,"byte_end":590854,"line_start":125,"line_end":125,"column_start":2,"column_end":78}},{"value":"/ a double- or use-after free error.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590856,"byte_end":590894,"line_start":126,"line_end":126,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590896,"byte_end":590899,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ Attempting to conjure your own values and pass them into this function","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590901,"byte_end":590975,"line_start":128,"line_end":128,"column_start":2,"column_end":76}},{"value":"/ will break the allocator state.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":590977,"byte_end":591012,"line_start":129,"line_end":129,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591014,"byte_end":591017,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591019,"byte_end":591034,"line_start":131,"line_end":131,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591036,"byte_end":591039,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591041,"byte_end":591052,"line_start":133,"line_end":133,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591054,"byte_end":591081,"line_start":134,"line_end":134,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591083,"byte_end":591086,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591088,"byte_end":591124,"line_start":136,"line_end":136,"column_start":2,"column_end":38}},{"value":"/ let (bitptr, len, capa) = bv.into_raw_parts();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591126,"byte_end":591176,"line_start":137,"line_end":137,"column_start":2,"column_end":52}},{"value":"/ let bv2 = unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591178,"byte_end":591200,"line_start":138,"line_end":138,"column_start":2,"column_end":24}},{"value":"/   BitVec::from_raw_parts(bitptr, len, capa)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591202,"byte_end":591249,"line_start":139,"line_end":139,"column_start":2,"column_end":49}},{"value":"/ };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591251,"byte_end":591257,"line_start":140,"line_end":140,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(bv2, bits![0, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591259,"byte_end":591301,"line_start":141,"line_end":141,"column_start":2,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591303,"byte_end":591310,"line_start":142,"line_end":142,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591312,"byte_end":591315,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ [`.into_raw_parts()`]: Self::into_raw_parts","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591317,"byte_end":591364,"line_start":144,"line_end":144,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591366,"byte_end":591375,"line_start":145,"line_end":145,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4472},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592247,"byte_end":592261,"line_start":177,"line_end":177,"column_start":9,"column_end":23},"name":"into_raw_parts","qualname":"<BitVec<T, O>>::into_raw_parts","value":"pub fn into_raw_parts(Self) -> (BitPtr<Mut, T, O>, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a bit-vector into its constituent member fields.","sig":null,"attributes":[{"value":"/ Decomposes a bit-vector into its constituent member fields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591664,"byte_end":591727,"line_start":160,"line_end":160,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591729,"byte_end":591732,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ This disarms the destructor. In order to prevent a memory leak, you must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591734,"byte_end":591810,"line_start":162,"line_end":162,"column_start":2,"column_end":78}},{"value":"/ pass **these exact values** back into [`::from_raw_parts()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591812,"byte_end":591877,"line_start":163,"line_end":163,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591879,"byte_end":591882,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591884,"byte_end":591899,"line_start":165,"line_end":165,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591901,"byte_end":591904,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_raw_parts`](alloc::vec::Vec::into_raw_parts)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591906,"byte_end":591966,"line_start":167,"line_end":167,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591968,"byte_end":591971,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591973,"byte_end":591995,"line_start":169,"line_end":169,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":591997,"byte_end":592000,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ This method is still unstable as of 1.54. It is provided here as a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592002,"byte_end":592072,"line_start":171,"line_end":171,"column_start":2,"column_end":72}},{"value":"/ convenience, under the expectation that the standard-library method will","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592074,"byte_end":592150,"line_start":172,"line_end":172,"column_start":2,"column_end":78}},{"value":"/ stabilize as-is.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592152,"byte_end":592172,"line_start":173,"line_end":173,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592174,"byte_end":592177,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ [`::from_raw_parts()`]: Self::from_raw_parts","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592179,"byte_end":592227,"line_start":175,"line_end":175,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592229,"byte_end":592238,"line_start":176,"line_end":176,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4473},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592973,"byte_end":592981,"line_start":208,"line_end":208,"column_start":9,"column_end":17},"name":"capacity","qualname":"<BitVec<T, O>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the allocation capacity, measured in bits.","sig":null,"attributes":[{"value":"/ Gets the allocation capacity, measured in bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592430,"byte_end":592481,"line_start":186,"line_end":186,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592483,"byte_end":592486,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ This counts how many total bits the bit-vector can store before it must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592488,"byte_end":592563,"line_start":188,"line_end":188,"column_start":2,"column_end":77}},{"value":"/ perform a reällocation to acquire more memory.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592565,"byte_end":592616,"line_start":189,"line_end":189,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592618,"byte_end":592621,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ If the capacity is not a multiple of 8, you should call","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592623,"byte_end":592682,"line_start":191,"line_end":191,"column_start":2,"column_end":61}},{"value":"/ [`.force_align()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592684,"byte_end":592707,"line_start":192,"line_end":192,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592709,"byte_end":592712,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592714,"byte_end":592729,"line_start":194,"line_end":194,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592731,"byte_end":592734,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ [`Vec::capacity`](alloc::vec::Vec::capacity)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592736,"byte_end":592784,"line_start":196,"line_end":196,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592786,"byte_end":592789,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592791,"byte_end":592806,"line_start":198,"line_end":198,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592808,"byte_end":592811,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592813,"byte_end":592824,"line_start":200,"line_end":200,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592826,"byte_end":592853,"line_start":201,"line_end":201,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592855,"byte_end":592858,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592860,"byte_end":592896,"line_start":203,"line_end":203,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592898,"byte_end":592905,"line_start":204,"line_end":204,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592907,"byte_end":592910,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ [`.force_align()`]: Self::force_align","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592912,"byte_end":592953,"line_start":206,"line_end":206,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":592955,"byte_end":592964,"line_start":207,"line_end":207,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4474},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594166,"byte_end":594173,"line_start":246,"line_end":246,"column_start":9,"column_end":16},"name":"reserve","qualname":"<BitVec<T, O>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the bit-vector has allocation capacity for *at least*\n `additional` more bits to be appended to it.","sig":null,"attributes":[{"value":"/ Ensures that the bit-vector has allocation capacity for *at least*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593163,"byte_end":593233,"line_start":215,"line_end":215,"column_start":2,"column_end":72}},{"value":"/ `additional` more bits to be appended to it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593235,"byte_end":593283,"line_start":216,"line_end":216,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593285,"byte_end":593288,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ For convenience, this method *guarantees* that the underlying memory for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593290,"byte_end":593366,"line_start":218,"line_end":218,"column_start":2,"column_end":78}},{"value":"/ `self[.. self.len() + additional]` is initialized, and may be safely","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593368,"byte_end":593440,"line_start":219,"line_end":219,"column_start":2,"column_end":74}},{"value":"/ accessed directly without requiring use of `.push()` or `.extend()` to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593442,"byte_end":593516,"line_start":220,"line_end":220,"column_start":2,"column_end":76}},{"value":"/ initialize it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593518,"byte_end":593536,"line_start":221,"line_end":221,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593538,"byte_end":593541,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ Newly-allocated memory is always initialized to zero. It is still *dead*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593543,"byte_end":593619,"line_start":223,"line_end":223,"column_start":2,"column_end":78}},{"value":"/ until the bit-vector is grown (by `.push()`, `.extend()`, or","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593621,"byte_end":593685,"line_start":224,"line_end":224,"column_start":2,"column_end":66}},{"value":"/ `.set_len()`), but direct access will not trigger UB.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593687,"byte_end":593744,"line_start":225,"line_end":225,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593746,"byte_end":593749,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593751,"byte_end":593766,"line_start":227,"line_end":227,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593768,"byte_end":593771,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve`](alloc::vec::Vec::reserve)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593773,"byte_end":593819,"line_start":229,"line_end":229,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593821,"byte_end":593824,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593826,"byte_end":593839,"line_start":231,"line_end":231,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593841,"byte_end":593844,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ This panics if the new capacity exceeds the bit-vector’s maximum.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593846,"byte_end":593917,"line_start":233,"line_end":233,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593919,"byte_end":593922,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593924,"byte_end":593939,"line_start":235,"line_end":235,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593941,"byte_end":593944,"line_start":236,"line_end":236,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593946,"byte_end":593957,"line_start":237,"line_end":237,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593959,"byte_end":593986,"line_start":238,"line_end":238,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593988,"byte_end":593991,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(80);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":593993,"byte_end":594044,"line_start":240,"line_end":240,"column_start":2,"column_end":53}},{"value":"/ assert!(bv.capacity() >= 80);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594046,"byte_end":594079,"line_start":241,"line_end":241,"column_start":2,"column_end":35}},{"value":"/ bv.reserve(800);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594081,"byte_end":594101,"line_start":242,"line_end":242,"column_start":2,"column_end":22}},{"value":"/ assert!(bv.capacity() >= 800);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594103,"byte_end":594137,"line_start":243,"line_end":243,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594139,"byte_end":594146,"line_start":244,"line_end":244,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594148,"byte_end":594157,"line_start":245,"line_end":245,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4475},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595401,"byte_end":595414,"line_start":284,"line_end":284,"column_start":9,"column_end":22},"name":"reserve_exact","qualname":"<BitVec<T, O>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the bit-vector has allocation capacity for *at least*\n `additional` more bits to be appended to it.","sig":null,"attributes":[{"value":"/ Ensures that the bit-vector has allocation capacity for *at least*","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594320,"byte_end":594390,"line_start":251,"line_end":251,"column_start":2,"column_end":72}},{"value":"/ `additional` more bits to be appended to it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594392,"byte_end":594440,"line_start":252,"line_end":252,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594442,"byte_end":594445,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ This differs from [`.reserve()`] by requesting that the allocator","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594447,"byte_end":594516,"line_start":254,"line_end":254,"column_start":2,"column_end":71}},{"value":"/ provide the minimum capacity necessary, rather than a potentially larger","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594518,"byte_end":594594,"line_start":255,"line_end":255,"column_start":2,"column_end":78}},{"value":"/ amount that the allocator may find more convenient.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594596,"byte_end":594651,"line_start":256,"line_end":256,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594653,"byte_end":594656,"line_start":257,"line_end":257,"column_start":2,"column_end":5}},{"value":"/ Remember that this is a *request*: the allocator provides what it","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594658,"byte_end":594727,"line_start":258,"line_end":258,"column_start":2,"column_end":71}},{"value":"/ provides, and you cannot rely on the new capacity to be exactly minimal.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594729,"byte_end":594805,"line_start":259,"line_end":259,"column_start":2,"column_end":78}},{"value":"/ You should still prefer `.reserve()`, especially if you expect to append","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594807,"byte_end":594883,"line_start":260,"line_end":260,"column_start":2,"column_end":78}},{"value":"/ to the bit-vector in the future.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594885,"byte_end":594921,"line_start":261,"line_end":261,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594923,"byte_end":594926,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594928,"byte_end":594943,"line_start":263,"line_end":263,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594945,"byte_end":594948,"line_start":264,"line_end":264,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve_exact`](alloc::vec::Vec::reserve_exact)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":594950,"byte_end":595008,"line_start":265,"line_end":265,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595010,"byte_end":595013,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595015,"byte_end":595028,"line_start":267,"line_end":267,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595030,"byte_end":595033,"line_start":268,"line_end":268,"column_start":2,"column_end":5}},{"value":"/ This panics if the new capacity exceeds the bit-vector’s maximum.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595035,"byte_end":595106,"line_start":269,"line_end":269,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595108,"byte_end":595111,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595113,"byte_end":595128,"line_start":271,"line_end":271,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595130,"byte_end":595133,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595135,"byte_end":595146,"line_start":273,"line_end":273,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595148,"byte_end":595175,"line_start":274,"line_end":274,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595177,"byte_end":595180,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(80);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595182,"byte_end":595233,"line_start":276,"line_end":276,"column_start":2,"column_end":53}},{"value":"/ assert!(bv.capacity() >= 80);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595235,"byte_end":595268,"line_start":277,"line_end":277,"column_start":2,"column_end":35}},{"value":"/ bv.reserve_exact(800);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595270,"byte_end":595296,"line_start":278,"line_end":278,"column_start":2,"column_end":28}},{"value":"/ assert!(bv.capacity() >= 800);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595298,"byte_end":595332,"line_start":279,"line_end":279,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595334,"byte_end":595341,"line_start":280,"line_end":280,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595343,"byte_end":595346,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ [`.reserve()`]: Self::reserve","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595348,"byte_end":595381,"line_start":282,"line_end":282,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595383,"byte_end":595392,"line_start":283,"line_end":283,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596052,"byte_end":596065,"line_start":309,"line_end":309,"column_start":9,"column_end":22},"name":"shrink_to_fit","qualname":"<BitVec<T, O>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases excess capacity back to the allocator.","sig":null,"attributes":[{"value":"/ Releases excess capacity back to the allocator.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595512,"byte_end":595563,"line_start":288,"line_end":288,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595565,"byte_end":595568,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ Like [`.reserve_exact()`], this is a *request* to the allocator, not a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595570,"byte_end":595644,"line_start":290,"line_end":290,"column_start":2,"column_end":76}},{"value":"/ command. The allocator may reclaim excess memory or may not.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595646,"byte_end":595710,"line_start":291,"line_end":291,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595712,"byte_end":595715,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595717,"byte_end":595732,"line_start":293,"line_end":293,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595734,"byte_end":595737,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ [`Vec::shrink_to_fit`](alloc::vec::Vec::shrink_to_fit)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595739,"byte_end":595797,"line_start":295,"line_end":295,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595799,"byte_end":595802,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595804,"byte_end":595819,"line_start":297,"line_end":297,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595821,"byte_end":595824,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595826,"byte_end":595837,"line_start":299,"line_end":299,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595839,"byte_end":595866,"line_start":300,"line_end":300,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595868,"byte_end":595871,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(1000);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595873,"byte_end":595926,"line_start":302,"line_end":302,"column_start":2,"column_end":55}},{"value":"/ bv.push(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595928,"byte_end":595946,"line_start":303,"line_end":303,"column_start":2,"column_end":20}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595948,"byte_end":595971,"line_start":304,"line_end":304,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595973,"byte_end":595980,"line_start":305,"line_end":305,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595982,"byte_end":595985,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ [`.reserve_exact()`]: Self::reserve_exact","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":595987,"byte_end":596032,"line_start":307,"line_end":307,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596034,"byte_end":596043,"line_start":308,"line_end":308,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4478},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596299,"byte_end":596315,"line_start":317,"line_end":317,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitVec<T, O>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> BitBox<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596128,"byte_end":596137,"line_start":313,"line_end":313,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596139,"byte_end":596169,"line_start":314,"line_end":314,"column_start":2,"column_end":32}},{"value":"deprecated = \"prefer `.into_boxed_bitslice() instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596171,"byte_end":596227,"line_start":315,"line_end":315,"column_start":2,"column_end":58}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596229,"byte_end":596290,"line_start":316,"line_end":316,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4479},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597584,"byte_end":597592,"line_start":359,"line_end":359,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BitVec<T, O>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the bit-vector, keeping the first `new_len` bits and discarding\n the rest.","sig":null,"attributes":[{"value":"/ Shortens the bit-vector, keeping the first `new_len` bits and discarding","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596374,"byte_end":596450,"line_start":321,"line_end":321,"column_start":2,"column_end":78}},{"value":"/ the rest.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596452,"byte_end":596465,"line_start":322,"line_end":322,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596467,"byte_end":596470,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ If `len` is greater than the bit-vector’s current length, this has no","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596472,"byte_end":596547,"line_start":324,"line_end":324,"column_start":2,"column_end":75}},{"value":"/ effect.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596549,"byte_end":596560,"line_start":325,"line_end":325,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596562,"byte_end":596565,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ The [`.drain()`] method can emulate `.truncate()`, except that it yields","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596567,"byte_end":596643,"line_start":327,"line_end":327,"column_start":2,"column_end":78}},{"value":"/ the excess bits rather than discarding them.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596645,"byte_end":596693,"line_start":328,"line_end":328,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596695,"byte_end":596698,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ Note that this has no effect on the allocated capacity of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596700,"byte_end":596765,"line_start":330,"line_end":330,"column_start":2,"column_end":67}},{"value":"/ bit-vector, **nor does it erase truncated memory**. Bits in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596767,"byte_end":596834,"line_start":331,"line_end":331,"column_start":2,"column_end":69}},{"value":"/ allocated memory that are outside of the [`.as_bitslice()`] view are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596836,"byte_end":596908,"line_start":332,"line_end":332,"column_start":2,"column_end":74}},{"value":"/ always considered to have *initialized*, but **unspecified**, values,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596910,"byte_end":596983,"line_start":333,"line_end":333,"column_start":2,"column_end":75}},{"value":"/ and you cannot rely on them to be zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":596985,"byte_end":597028,"line_start":334,"line_end":334,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597030,"byte_end":597033,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597035,"byte_end":597050,"line_start":336,"line_end":336,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597052,"byte_end":597055,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ [`Vec::truncate`](alloc::vec::Vec::truncate)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597057,"byte_end":597105,"line_start":338,"line_end":338,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597107,"byte_end":597110,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597112,"byte_end":597127,"line_start":340,"line_end":340,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597129,"byte_end":597132,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ Truncating a five-bit vector to two bits:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597134,"byte_end":597179,"line_start":342,"line_end":342,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597181,"byte_end":597184,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597186,"byte_end":597197,"line_start":344,"line_end":344,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597199,"byte_end":597226,"line_start":345,"line_end":345,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597228,"byte_end":597231,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597233,"byte_end":597273,"line_start":347,"line_end":347,"column_start":2,"column_end":42}},{"value":"/ bv.truncate(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597275,"byte_end":597294,"line_start":348,"line_end":348,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597296,"byte_end":597324,"line_start":349,"line_end":349,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.as_raw_slice()[0].count_ones() >= 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597326,"byte_end":597378,"line_start":350,"line_end":350,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597380,"byte_end":597387,"line_start":351,"line_end":351,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597389,"byte_end":597392,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ No truncation occurs when `len` is greater than the bit-vector’s current","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597394,"byte_end":597472,"line_start":353,"line_end":353,"column_start":2,"column_end":78}},{"value":"/ length:","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597474,"byte_end":597485,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597487,"byte_end":597490,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597492,"byte_end":597533,"line_start":356,"line_end":356,"column_start":2,"column_end":43}},{"value":"/ [`.drain()`]: Self::drain","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597535,"byte_end":597564,"line_start":357,"line_end":357,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597566,"byte_end":597575,"line_start":358,"line_end":358,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4480},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597874,"byte_end":597882,"line_start":371,"line_end":371,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitVec<T, O>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597713,"byte_end":597722,"line_start":367,"line_end":367,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597724,"byte_end":597754,"line_start":368,"line_end":368,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597756,"byte_end":597802,"line_start":369,"line_end":369,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597804,"byte_end":597865,"line_start":370,"line_end":370,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4481},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598102,"byte_end":598114,"line_start":379,"line_end":379,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitVec<T, O>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597937,"byte_end":597946,"line_start":375,"line_end":375,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597948,"byte_end":597978,"line_start":376,"line_end":376,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_mut_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":597980,"byte_end":598030,"line_start":377,"line_end":377,"column_start":2,"column_end":52}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598032,"byte_end":598093,"line_start":378,"line_end":378,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4482},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598340,"byte_end":598346,"line_start":387,"line_end":387,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitVec<T, O>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598181,"byte_end":598190,"line_start":383,"line_end":383,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598192,"byte_end":598222,"line_start":384,"line_end":384,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitptr()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598224,"byte_end":598268,"line_start":385,"line_end":385,"column_start":2,"column_end":46}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598270,"byte_end":598331,"line_start":386,"line_end":386,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4483},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598566,"byte_end":598576,"line_start":395,"line_end":395,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitVec<T, O>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598403,"byte_end":598412,"line_start":391,"line_end":391,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598414,"byte_end":598444,"line_start":392,"line_end":392,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_mut_bitptr()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598446,"byte_end":598494,"line_start":393,"line_end":393,"column_start":2,"column_end":50}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598496,"byte_end":598557,"line_start":394,"line_end":394,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4484},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599978,"byte_end":599985,"line_start":445,"line_end":445,"column_start":16,"column_end":23},"name":"set_len","qualname":"<BitVec<T, O>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resizes a bit-vector to a new length.","sig":null,"attributes":[{"value":"/ Resizes a bit-vector to a new length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598639,"byte_end":598680,"line_start":399,"line_end":399,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598682,"byte_end":598685,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598687,"byte_end":598702,"line_start":401,"line_end":401,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598704,"byte_end":598707,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ [`Vec::set_len`](alloc::vec::Vec::set_len)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598709,"byte_end":598755,"line_start":403,"line_end":403,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598757,"byte_end":598760,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598762,"byte_end":598775,"line_start":405,"line_end":405,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598777,"byte_end":598780,"line_start":406,"line_end":406,"column_start":2,"column_end":5}},{"value":"/ **NOT ALL MEMORY IN THE ALLOCATION IS INITIALIZED!**","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598782,"byte_end":598838,"line_start":407,"line_end":407,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598840,"byte_end":598843,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ Memory in a bit-vector’s allocation is only initialized when the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598845,"byte_end":598915,"line_start":409,"line_end":409,"column_start":2,"column_end":70}},{"value":"/ bit-vector grows into it normally (through [`.push()`] or one of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598917,"byte_end":598989,"line_start":410,"line_end":410,"column_start":2,"column_end":74}},{"value":"/ various `.extend*()` methods). Setting the length to a value beyond what","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":598991,"byte_end":599067,"line_start":411,"line_end":411,"column_start":2,"column_end":78}},{"value":"/ was previously initialized, but still within the allocation, is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599069,"byte_end":599136,"line_start":412,"line_end":412,"column_start":2,"column_end":69}},{"value":"/ undefined behavior.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599138,"byte_end":599161,"line_start":413,"line_end":413,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599163,"byte_end":599166,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ The caller is responsible for ensuring that all memory up to (but not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599168,"byte_end":599241,"line_start":415,"line_end":415,"column_start":2,"column_end":75}},{"value":"/ including) the new length has already been initialized.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599243,"byte_end":599302,"line_start":416,"line_end":416,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599304,"byte_end":599307,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599309,"byte_end":599322,"line_start":418,"line_end":418,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599324,"byte_end":599327,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ This panics if `new_len` exceeds the capacity as reported by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599329,"byte_end":599393,"line_start":420,"line_end":420,"column_start":2,"column_end":66}},{"value":"/ [`.capacity()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599395,"byte_end":599415,"line_start":421,"line_end":421,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599417,"byte_end":599420,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599422,"byte_end":599437,"line_start":423,"line_end":423,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599439,"byte_end":599442,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599444,"byte_end":599455,"line_start":425,"line_end":425,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599457,"byte_end":599484,"line_start":426,"line_end":426,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599486,"byte_end":599489,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599491,"byte_end":599531,"line_start":428,"line_end":428,"column_start":2,"column_end":42}},{"value":"/ unsafe {","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599533,"byte_end":599545,"line_start":429,"line_end":429,"column_start":2,"column_end":14}},{"value":"/   // The default storage type, `usize`, is at least 32 bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599547,"byte_end":599611,"line_start":430,"line_end":430,"column_start":2,"column_end":66}},{"value":"/   bv.set_len(32);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599613,"byte_end":599634,"line_start":431,"line_end":431,"column_start":2,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599636,"byte_end":599641,"line_start":432,"line_end":432,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv, bits![","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599643,"byte_end":599668,"line_start":433,"line_end":433,"column_start":2,"column_end":27}},{"value":"/   0, 1, 0, 0, 1, 0, 0, 0,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599670,"byte_end":599699,"line_start":434,"line_end":434,"column_start":2,"column_end":31}},{"value":"/   0, 0, 0, 0, 0, 0, 0, 0,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599701,"byte_end":599730,"line_start":435,"line_end":435,"column_start":2,"column_end":31}},{"value":"/   0, 0, 0, 0, 0, 0, 0, 0,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599732,"byte_end":599761,"line_start":436,"line_end":436,"column_start":2,"column_end":31}},{"value":"/   0, 0, 0, 0, 0, 0, 0, 0,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599763,"byte_end":599792,"line_start":437,"line_end":437,"column_start":2,"column_end":31}},{"value":"/ ]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599794,"byte_end":599801,"line_start":438,"line_end":438,"column_start":2,"column_end":9}},{"value":"/ //  `BitVec` guarantees that newly-initialized memory is zeroed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599803,"byte_end":599871,"line_start":439,"line_end":439,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599873,"byte_end":599880,"line_start":440,"line_end":440,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599882,"byte_end":599885,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ [`.push()`]: Self::push","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599887,"byte_end":599914,"line_start":442,"line_end":442,"column_start":2,"column_end":29}},{"value":"/ [`.capacity()`]: Self::capacity","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599916,"byte_end":599951,"line_start":443,"line_end":443,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":599953,"byte_end":599962,"line_start":444,"line_end":444,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4485},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600760,"byte_end":600771,"line_start":479,"line_end":479,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BitVec<T, O>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Takes a bit out of the bit-vector.","sig":null,"attributes":[{"value":"/ Takes a bit out of the bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600186,"byte_end":600224,"line_start":456,"line_end":456,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600226,"byte_end":600229,"line_start":457,"line_end":457,"column_start":2,"column_end":5}},{"value":"/ The empty slot is filled with the last bit in the bit-vector, rather","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600231,"byte_end":600303,"line_start":458,"line_end":458,"column_start":2,"column_end":74}},{"value":"/ than shunting `index + 1 .. self.len()` down by one.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600305,"byte_end":600361,"line_start":459,"line_end":459,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600363,"byte_end":600366,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600368,"byte_end":600383,"line_start":461,"line_end":461,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600385,"byte_end":600388,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ [`Vec::swap_remove`](alloc::vec::Vec::swap_remove)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600390,"byte_end":600444,"line_start":463,"line_end":463,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600446,"byte_end":600449,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600451,"byte_end":600464,"line_start":465,"line_end":465,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600466,"byte_end":600469,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is out of bounds (`self.len()` or greater).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600471,"byte_end":600541,"line_start":467,"line_end":467,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600543,"byte_end":600546,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600548,"byte_end":600563,"line_start":469,"line_end":469,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600565,"byte_end":600568,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600570,"byte_end":600581,"line_start":471,"line_end":471,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600583,"byte_end":600610,"line_start":472,"line_end":472,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600612,"byte_end":600615,"line_start":473,"line_end":473,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600617,"byte_end":600657,"line_start":474,"line_end":474,"column_start":2,"column_end":42}},{"value":"/ assert!(!bv.swap_remove(2));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600659,"byte_end":600691,"line_start":475,"line_end":475,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600693,"byte_end":600731,"line_start":476,"line_end":476,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600733,"byte_end":600740,"line_start":477,"line_end":477,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600742,"byte_end":600751,"line_start":478,"line_end":478,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4486},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601413,"byte_end":601419,"line_start":503,"line_end":503,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitVec<T, O>>::insert","value":"pub fn insert(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a bit at a given position, shifting all bits after it one spot\n to the right.","sig":null,"attributes":[{"value":"/ Inserts a bit at a given position, shifting all bits after it one spot","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":600994,"byte_end":601068,"line_start":489,"line_end":489,"column_start":2,"column_end":76}},{"value":"/ to the right.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601070,"byte_end":601087,"line_start":490,"line_end":490,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601089,"byte_end":601092,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ `index` may be any value up to *and including* `self.len()`. If it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601094,"byte_end":601167,"line_start":492,"line_end":492,"column_start":2,"column_end":75}},{"value":"/ `self.len()`, it behaves equivalently to `.push()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601169,"byte_end":601224,"line_start":493,"line_end":493,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601226,"byte_end":601229,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601231,"byte_end":601246,"line_start":495,"line_end":495,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601248,"byte_end":601251,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ [`Vec::insert`](alloc::vec::Vec::insert)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601253,"byte_end":601297,"line_start":497,"line_end":497,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601299,"byte_end":601302,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601304,"byte_end":601317,"line_start":499,"line_end":499,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601319,"byte_end":601322,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is out of bounds (including `self.len()`).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601324,"byte_end":601393,"line_start":501,"line_end":501,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601395,"byte_end":601404,"line_start":502,"line_end":502,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4487},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601958,"byte_end":601964,"line_start":522,"line_end":522,"column_start":9,"column_end":15},"name":"remove","qualname":"<BitVec<T, O>>::remove","value":"pub fn remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a bit at a given position, shifting all bits after it one spot\n to the left.","sig":null,"attributes":[{"value":"/ Removes a bit at a given position, shifting all bits after it one spot","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601598,"byte_end":601672,"line_start":509,"line_end":509,"column_start":2,"column_end":76}},{"value":"/ to the left.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601674,"byte_end":601690,"line_start":510,"line_end":510,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601692,"byte_end":601695,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ `index` may be any value up to, but **not** including, `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601697,"byte_end":601769,"line_start":512,"line_end":512,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601771,"byte_end":601774,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601776,"byte_end":601791,"line_start":514,"line_end":514,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601793,"byte_end":601796,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ [`Vec::remove`](alloc::vec::Vec::remove)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601798,"byte_end":601842,"line_start":516,"line_end":516,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601844,"byte_end":601847,"line_start":517,"line_end":517,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601849,"byte_end":601862,"line_start":518,"line_end":518,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601864,"byte_end":601867,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ This panics if `index` is out of bounds (excluding `self.len()`).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601869,"byte_end":601938,"line_start":520,"line_end":520,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":601940,"byte_end":601949,"line_start":521,"line_end":521,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4488},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602911,"byte_end":602917,"line_start":558,"line_end":558,"column_start":9,"column_end":15},"name":"retain","qualname":"<BitVec<T, O>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the bits that the predicate allows.","sig":null,"attributes":[{"value":"/ Retains only the bits that the predicate allows.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602220,"byte_end":602272,"line_start":533,"line_end":533,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602274,"byte_end":602277,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ Bits are deleted from the vector when the predicate function returns","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602279,"byte_end":602351,"line_start":535,"line_end":535,"column_start":2,"column_end":74}},{"value":"/ false. This function is linear in `self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602353,"byte_end":602404,"line_start":536,"line_end":536,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602406,"byte_end":602409,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602411,"byte_end":602426,"line_start":538,"line_end":538,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602428,"byte_end":602431,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ [`Vec::retain`](alloc::vec::Vec::retain)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602433,"byte_end":602477,"line_start":540,"line_end":540,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602479,"byte_end":602482,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602484,"byte_end":602506,"line_start":542,"line_end":542,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602508,"byte_end":602511,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ The predicate receives both the index of the bit as well as its value,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602513,"byte_end":602587,"line_start":544,"line_end":544,"column_start":2,"column_end":76}},{"value":"/ in order to allow the predicate to have more than one bit of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602589,"byte_end":602653,"line_start":545,"line_end":545,"column_start":2,"column_end":66}},{"value":"/ keep/discard information.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602655,"byte_end":602684,"line_start":546,"line_end":546,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602686,"byte_end":602689,"line_start":547,"line_end":547,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602691,"byte_end":602706,"line_start":548,"line_end":548,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602708,"byte_end":602711,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602713,"byte_end":602724,"line_start":550,"line_end":550,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602726,"byte_end":602753,"line_start":551,"line_end":551,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602755,"byte_end":602758,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602760,"byte_end":602800,"line_start":553,"line_end":553,"column_start":2,"column_end":42}},{"value":"/ bv.retain(|idx, _| idx % 2 == 0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602802,"byte_end":602839,"line_start":554,"line_end":554,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(bv, bits![0,    0,    1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602841,"byte_end":602882,"line_start":555,"line_end":555,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602884,"byte_end":602891,"line_start":556,"line_end":556,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":602893,"byte_end":602902,"line_start":557,"line_end":557,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4490},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604280,"byte_end":604284,"line_start":617,"line_end":617,"column_start":9,"column_end":13},"name":"push","qualname":"<BitVec<T, O>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Appends a single bit to the vector.","sig":null,"attributes":[{"value":"/ Appends a single bit to the vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603847,"byte_end":603886,"line_start":596,"line_end":596,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603888,"byte_end":603891,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603893,"byte_end":603908,"line_start":598,"line_end":598,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603910,"byte_end":603913,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ [`Vec::push`](alloc::vec::Vec::push)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603915,"byte_end":603955,"line_start":600,"line_end":600,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603957,"byte_end":603960,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603962,"byte_end":603975,"line_start":602,"line_end":602,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603977,"byte_end":603980,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ This panics if the push would cause the bit-vector to exceed its maximum","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":603982,"byte_end":604058,"line_start":604,"line_end":604,"column_start":2,"column_end":78}},{"value":"/ capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604060,"byte_end":604073,"line_start":605,"line_end":605,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604075,"byte_end":604078,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604080,"byte_end":604095,"line_start":607,"line_end":607,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604097,"byte_end":604100,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604102,"byte_end":604113,"line_start":609,"line_end":609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604115,"byte_end":604142,"line_start":610,"line_end":610,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604144,"byte_end":604147,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604149,"byte_end":604180,"line_start":612,"line_end":612,"column_start":2,"column_end":33}},{"value":"/ bv.push(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604182,"byte_end":604200,"line_start":613,"line_end":613,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv.as_bitslice(), bits![0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604202,"byte_end":604251,"line_start":614,"line_end":614,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604253,"byte_end":604260,"line_start":615,"line_end":615,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604262,"byte_end":604271,"line_start":616,"line_end":616,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4492},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605134,"byte_end":605137,"line_start":651,"line_end":651,"column_start":9,"column_end":12},"name":"pop","qualname":"<BitVec<T, O>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to remove the trailing bit from the bit-vector.","sig":null,"attributes":[{"value":"/ Attempts to remove the trailing bit from the bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604712,"byte_end":604772,"line_start":632,"line_end":632,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604774,"byte_end":604777,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ This returns `None` if the bit-vector is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604779,"byte_end":604830,"line_start":634,"line_end":634,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604832,"byte_end":604835,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604837,"byte_end":604852,"line_start":636,"line_end":636,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604854,"byte_end":604857,"line_start":637,"line_end":637,"column_start":2,"column_end":5}},{"value":"/ [`Vec::pop`](alloc::vec::Vec::pop)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604859,"byte_end":604897,"line_start":638,"line_end":638,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604899,"byte_end":604902,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604904,"byte_end":604919,"line_start":640,"line_end":640,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604921,"byte_end":604924,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604926,"byte_end":604937,"line_start":642,"line_end":642,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604939,"byte_end":604966,"line_start":643,"line_end":643,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604968,"byte_end":604971,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":604973,"byte_end":605004,"line_start":645,"line_end":645,"column_start":2,"column_end":33}},{"value":"/ assert!(bv.pop().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605006,"byte_end":605037,"line_start":646,"line_end":646,"column_start":2,"column_end":33}},{"value":"/ assert!(!bv.pop().unwrap());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605039,"byte_end":605071,"line_start":647,"line_end":647,"column_start":2,"column_end":34}},{"value":"/ assert!(bv.pop().is_none());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605073,"byte_end":605105,"line_start":648,"line_end":648,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605107,"byte_end":605114,"line_start":649,"line_end":649,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605116,"byte_end":605125,"line_start":650,"line_end":650,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4493},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606178,"byte_end":606184,"line_start":696,"line_end":696,"column_start":9,"column_end":15},"name":"append","qualname":"<BitVec<T, O>>::append","value":"pub fn append<T2, O2>(&mut Self, &mut BitVec<T2, O2>) where T2: BitStore,\nO2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Moves all the bits out of `other` into the back of `self`.","sig":null,"attributes":[{"value":"/ Moves all the bits out of `other` into the back of `self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605354,"byte_end":605416,"line_start":663,"line_end":663,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605418,"byte_end":605421,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ The `other` bit-vector is emptied after this occurs.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605423,"byte_end":605479,"line_start":665,"line_end":665,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605481,"byte_end":605484,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605486,"byte_end":605501,"line_start":667,"line_end":667,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605503,"byte_end":605506,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ [`Vec::append`](alloc::vec::Vec::append)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605508,"byte_end":605552,"line_start":669,"line_end":669,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605554,"byte_end":605557,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605559,"byte_end":605581,"line_start":671,"line_end":671,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605583,"byte_end":605586,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ This permits `other` to have different type parameters than `self`, and","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605588,"byte_end":605663,"line_start":673,"line_end":673,"column_start":2,"column_end":77}},{"value":"/ does not require that it be literally `Self`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605665,"byte_end":605714,"line_start":674,"line_end":674,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605716,"byte_end":605719,"line_start":675,"line_end":675,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605721,"byte_end":605734,"line_start":676,"line_end":676,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605736,"byte_end":605739,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ This panics if `self.len() + other.len()` exceeds the maximum capacity","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605741,"byte_end":605815,"line_start":678,"line_end":678,"column_start":2,"column_end":76}},{"value":"/ of a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605817,"byte_end":605837,"line_start":679,"line_end":679,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605839,"byte_end":605842,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605844,"byte_end":605859,"line_start":681,"line_end":681,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605861,"byte_end":605864,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605866,"byte_end":605877,"line_start":683,"line_end":683,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605879,"byte_end":605906,"line_start":684,"line_end":684,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605908,"byte_end":605911,"line_start":685,"line_end":685,"column_start":2,"column_end":5}},{"value":"/ let mut bv1 = bitvec![u16, Msb0; 0; 10];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605913,"byte_end":605957,"line_start":686,"line_end":686,"column_start":2,"column_end":46}},{"value":"/ let mut bv2 = bitvec![u32, Lsb0; 1; 10];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":605959,"byte_end":606003,"line_start":687,"line_end":687,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606005,"byte_end":606008,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ bv1.append(&mut bv2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606010,"byte_end":606035,"line_start":689,"line_end":689,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606037,"byte_end":606040,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv1.count_ones(), 10);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606042,"byte_end":606079,"line_start":691,"line_end":691,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(bv1.count_zeros(), 10);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606081,"byte_end":606119,"line_start":692,"line_end":692,"column_start":2,"column_end":40}},{"value":"/ assert!(bv2.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606121,"byte_end":606149,"line_start":693,"line_end":693,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606151,"byte_end":606158,"line_start":694,"line_end":694,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606160,"byte_end":606169,"line_start":695,"line_end":695,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607253,"byte_end":607258,"line_start":736,"line_end":736,"column_start":9,"column_end":14},"name":"drain","qualname":"<BitVec<T, O>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T, O> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over a portion of the bit-vector, *removing* all yielded bits\n from it.","sig":null,"attributes":[{"value":"/ Iterates over a portion of the bit-vector, *removing* all yielded bits","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606332,"byte_end":606406,"line_start":705,"line_end":705,"column_start":2,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606408,"byte_end":606420,"line_start":706,"line_end":706,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606422,"byte_end":606425,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ When the iterator drops, *all* bits in its coverage are removed from","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606427,"byte_end":606499,"line_start":708,"line_end":708,"column_start":2,"column_end":74}},{"value":"/ `self`, even if the iterator did not yield them. If the iterator is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606501,"byte_end":606572,"line_start":709,"line_end":709,"column_start":2,"column_end":73}},{"value":"/ leaked or otherwise forgotten, and its destructor never runs, then the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606574,"byte_end":606648,"line_start":710,"line_end":710,"column_start":2,"column_end":76}},{"value":"/ amount of un-yielded bits removed from the bit-vector is not specified.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606650,"byte_end":606725,"line_start":711,"line_end":711,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606727,"byte_end":606730,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606732,"byte_end":606747,"line_start":713,"line_end":713,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606749,"byte_end":606752,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ [`Vec::drain`](alloc::vec::Vec::drain)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606754,"byte_end":606796,"line_start":715,"line_end":715,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606798,"byte_end":606801,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606803,"byte_end":606816,"line_start":717,"line_end":717,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606818,"byte_end":606821,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ This panics if `range` departs `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606823,"byte_end":606876,"line_start":719,"line_end":719,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606878,"byte_end":606881,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606883,"byte_end":606898,"line_start":721,"line_end":721,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606900,"byte_end":606903,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606905,"byte_end":606916,"line_start":723,"line_end":723,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606918,"byte_end":606945,"line_start":724,"line_end":724,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606947,"byte_end":606950,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606952,"byte_end":606992,"line_start":726,"line_end":726,"column_start":2,"column_end":42}},{"value":"/ let bv2 = bv.drain(1 ..= 3).collect::<BitVec>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":606994,"byte_end":607046,"line_start":727,"line_end":727,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(bv, bits![0,          1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607048,"byte_end":607089,"line_start":728,"line_end":728,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(bv2, bits![1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607091,"byte_end":607127,"line_start":729,"line_end":729,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607129,"byte_end":607132,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ // A full range clears the bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607134,"byte_end":607176,"line_start":731,"line_end":731,"column_start":2,"column_end":44}},{"value":"/ bv.drain(..);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607178,"byte_end":607195,"line_start":732,"line_end":732,"column_start":2,"column_end":19}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607197,"byte_end":607224,"line_start":733,"line_end":733,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607226,"byte_end":607233,"line_start":734,"line_end":734,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607235,"byte_end":607244,"line_start":735,"line_end":735,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4498},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607704,"byte_end":607709,"line_start":759,"line_end":759,"column_start":9,"column_end":14},"name":"clear","qualname":"<BitVec<T, O>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Empties the bit-vector.","sig":null,"attributes":[{"value":"/ Empties the bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607360,"byte_end":607387,"line_start":741,"line_end":741,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607389,"byte_end":607392,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ This does not affect the allocated capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607394,"byte_end":607442,"line_start":743,"line_end":743,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607444,"byte_end":607447,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607449,"byte_end":607464,"line_start":745,"line_end":745,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607466,"byte_end":607469,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ [`Vec::clear`](alloc::vec::Vec::clear)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607471,"byte_end":607513,"line_start":747,"line_end":747,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607515,"byte_end":607518,"line_start":748,"line_end":748,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607520,"byte_end":607535,"line_start":749,"line_end":749,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607537,"byte_end":607540,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607542,"byte_end":607553,"line_start":751,"line_end":751,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607555,"byte_end":607582,"line_start":752,"line_end":752,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607584,"byte_end":607587,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607589,"byte_end":607629,"line_start":754,"line_end":754,"column_start":2,"column_end":42}},{"value":"/ bv.clear();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607631,"byte_end":607646,"line_start":755,"line_end":755,"column_start":2,"column_end":17}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607648,"byte_end":607675,"line_start":756,"line_end":756,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607677,"byte_end":607684,"line_start":757,"line_end":757,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607686,"byte_end":607695,"line_start":758,"line_end":758,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4499},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608110,"byte_end":608113,"line_start":774,"line_end":774,"column_start":9,"column_end":12},"name":"len","qualname":"<BitVec<T, O>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the length of the bit-vector.","sig":null,"attributes":[{"value":"/ Gets the length of the bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607748,"byte_end":607786,"line_start":763,"line_end":763,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607788,"byte_end":607791,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `BitSlice::len`; it is provided as an inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607793,"byte_end":607865,"line_start":765,"line_end":765,"column_start":2,"column_end":74}},{"value":"/ method here rather than relying on `Deref` forwarding so that you can","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607867,"byte_end":607940,"line_start":766,"line_end":766,"column_start":2,"column_end":75}},{"value":"/ write `BitVec::len` as a named function item.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607942,"byte_end":607991,"line_start":767,"line_end":767,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607993,"byte_end":607996,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":607998,"byte_end":608013,"line_start":769,"line_end":769,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608015,"byte_end":608018,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ [`Vec::len`](alloc::vec::Vec::len)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608020,"byte_end":608058,"line_start":771,"line_end":771,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608060,"byte_end":608069,"line_start":772,"line_end":772,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608071,"byte_end":608101,"line_start":773,"line_end":773,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4500},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608539,"byte_end":608547,"line_start":789,"line_end":789,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitVec<T, O>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the bit-vector is empty.","sig":null,"attributes":[{"value":"/ Tests if the bit-vector is empty.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608158,"byte_end":608195,"line_start":778,"line_end":778,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608197,"byte_end":608200,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `BitSlice::is_empty`; it is provided as an","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608202,"byte_end":608270,"line_start":780,"line_end":780,"column_start":2,"column_end":70}},{"value":"/ inherent method here rather than relying on `Deref` forwarding so that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608272,"byte_end":608346,"line_start":781,"line_end":781,"column_start":2,"column_end":76}},{"value":"/ you can write `BitVec::is_empty` as a named function item.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608348,"byte_end":608410,"line_start":782,"line_end":782,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608412,"byte_end":608415,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608417,"byte_end":608432,"line_start":784,"line_end":784,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608434,"byte_end":608437,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ [`Vec::is_empty`](alloc::vec::Vec::is_empty)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608439,"byte_end":608487,"line_start":786,"line_end":786,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608489,"byte_end":608498,"line_start":787,"line_end":787,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608500,"byte_end":608530,"line_start":788,"line_end":788,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4501},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609014,"byte_end":609023,"line_start":810,"line_end":810,"column_start":9,"column_end":18},"name":"split_off","qualname":"<BitVec<T, O>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the bit-vector in half at an index, moving `self[at ..]` out into\n a new bit-vector.","sig":null,"attributes":[{"value":"/ Splits the bit-vector in half at an index, moving `self[at ..]` out into","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608596,"byte_end":608672,"line_start":793,"line_end":793,"column_start":2,"column_end":78}},{"value":"/ a new bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608674,"byte_end":608695,"line_start":794,"line_end":794,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608697,"byte_end":608700,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608702,"byte_end":608717,"line_start":796,"line_end":796,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608719,"byte_end":608722,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ [`Vec::split_off`](alloc::vec::Vec::split_off)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608724,"byte_end":608774,"line_start":798,"line_end":798,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608776,"byte_end":608779,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608781,"byte_end":608796,"line_start":800,"line_end":800,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608798,"byte_end":608801,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608803,"byte_end":608814,"line_start":802,"line_end":802,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608816,"byte_end":608843,"line_start":803,"line_end":803,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608845,"byte_end":608848,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608850,"byte_end":608890,"line_start":805,"line_end":805,"column_start":2,"column_end":42}},{"value":"/ let bv2 = bv.split_off(2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608892,"byte_end":608922,"line_start":806,"line_end":806,"column_start":2,"column_end":32}},{"value":"/ assert_eq!((&*bv, &*bv2), (bits![0, 1], bits![0, 0, 1]));","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608924,"byte_end":608985,"line_start":807,"line_end":807,"column_start":2,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608987,"byte_end":608994,"line_start":808,"line_end":808,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":608996,"byte_end":609005,"line_start":809,"line_end":809,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609990,"byte_end":610001,"line_start":847,"line_end":847,"column_start":9,"column_end":20},"name":"resize_with","qualname":"<BitVec<T, O>>::resize_with","value":"pub fn resize_with<F>(&mut Self, usize, F) where F: FnMut(usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Resizes the bit-vector to a new length, using a function to produce each\n inserted bit.","sig":null,"attributes":[{"value":"/ Resizes the bit-vector to a new length, using a function to produce each","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609309,"byte_end":609385,"line_start":822,"line_end":822,"column_start":2,"column_end":78}},{"value":"/ inserted bit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609387,"byte_end":609404,"line_start":823,"line_end":823,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609406,"byte_end":609409,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is less than `self.len()`, this is a truncate operation; if","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609411,"byte_end":609487,"line_start":825,"line_end":825,"column_start":2,"column_end":78}},{"value":"/ it is greater, then `self` is extended by repeatedly pushing `func()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609489,"byte_end":609563,"line_start":826,"line_end":826,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609565,"byte_end":609568,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609570,"byte_end":609585,"line_start":828,"line_end":828,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609587,"byte_end":609590,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize_with`](alloc::vec::Vec::resize_with)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609592,"byte_end":609646,"line_start":830,"line_end":830,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609648,"byte_end":609651,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ ## API Differences","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609653,"byte_end":609675,"line_start":832,"line_end":832,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609677,"byte_end":609680,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ The generator function receives the index into which its bit will be","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609682,"byte_end":609754,"line_start":834,"line_end":834,"column_start":2,"column_end":74}},{"value":"/ placed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609756,"byte_end":609767,"line_start":835,"line_end":835,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609769,"byte_end":609772,"line_start":836,"line_end":836,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609774,"byte_end":609789,"line_start":837,"line_end":837,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609791,"byte_end":609794,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609796,"byte_end":609807,"line_start":839,"line_end":839,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609809,"byte_end":609836,"line_start":840,"line_end":840,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609838,"byte_end":609841,"line_start":841,"line_end":841,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609843,"byte_end":609874,"line_start":842,"line_end":842,"column_start":2,"column_end":33}},{"value":"/ bv.resize_with(5, |idx| idx % 2 == 1);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609876,"byte_end":609918,"line_start":843,"line_end":843,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits![1, 1, 0, 1, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609920,"byte_end":609961,"line_start":844,"line_end":844,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609963,"byte_end":609970,"line_start":845,"line_end":845,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":609972,"byte_end":609981,"line_start":846,"line_end":846,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4504},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611445,"byte_end":611449,"line_start":895,"line_end":895,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitVec<T, O>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Destroys the `BitVec` handle without destroying the bit-vector\n allocation. The allocation is returned as an `&mut BitSlice` that lasts\n for the remaining program lifetime.","sig":null,"attributes":[{"value":"/ Destroys the `BitVec` handle without destroying the bit-vector","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610348,"byte_end":610414,"line_start":863,"line_end":863,"column_start":2,"column_end":68}},{"value":"/ allocation. The allocation is returned as an `&mut BitSlice` that lasts","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610416,"byte_end":610491,"line_start":864,"line_end":864,"column_start":2,"column_end":77}},{"value":"/ for the remaining program lifetime.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610493,"byte_end":610532,"line_start":865,"line_end":865,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610534,"byte_end":610537,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ You *may* call [`BitBox::from_raw`] on this slice handle exactly once in","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610539,"byte_end":610615,"line_start":867,"line_end":867,"column_start":2,"column_end":78}},{"value":"/ order to reap the allocation before program exit. That function takes a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610617,"byte_end":610692,"line_start":868,"line_end":868,"column_start":2,"column_end":77}},{"value":"/ mutable pointer, not a mutable reference, so you must ensure that the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610694,"byte_end":610767,"line_start":869,"line_end":869,"column_start":2,"column_end":75}},{"value":"/ returned reference is never used again after restoring the allocation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610769,"byte_end":610842,"line_start":870,"line_end":870,"column_start":2,"column_end":75}},{"value":"/ handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610844,"byte_end":610855,"line_start":871,"line_end":871,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610857,"byte_end":610860,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610862,"byte_end":610877,"line_start":873,"line_end":873,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610879,"byte_end":610882,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ [`Vec::leak`](alloc::vec::Vec::leak)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610884,"byte_end":610924,"line_start":875,"line_end":875,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610926,"byte_end":610929,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610931,"byte_end":610946,"line_start":877,"line_end":877,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610948,"byte_end":610951,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610953,"byte_end":610964,"line_start":879,"line_end":879,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610966,"byte_end":610993,"line_start":880,"line_end":880,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":610995,"byte_end":610998,"line_start":881,"line_end":881,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611000,"byte_end":611030,"line_start":882,"line_end":882,"column_start":2,"column_end":32}},{"value":"/ let static_bits: &'static mut BitSlice = bv.leak();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611032,"byte_end":611087,"line_start":883,"line_end":883,"column_start":2,"column_end":57}},{"value":"/ static_bits.set(0, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611089,"byte_end":611118,"line_start":884,"line_end":884,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(static_bits, bits![1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611120,"byte_end":611164,"line_start":885,"line_end":885,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611166,"byte_end":611169,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ let bb = unsafe { BitBox::from_raw(static_bits) };","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611171,"byte_end":611225,"line_start":887,"line_end":887,"column_start":2,"column_end":56}},{"value":"/ // static_bits may no longer be used.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611227,"byte_end":611268,"line_start":888,"line_end":888,"column_start":2,"column_end":43}},{"value":"/ drop(bb); // explicitly reap memory before program exit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611270,"byte_end":611329,"line_start":889,"line_end":889,"column_start":2,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611331,"byte_end":611338,"line_start":890,"line_end":890,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611340,"byte_end":611343,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::leak`]: crate::boxed::BitBox::leak","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611345,"byte_end":611393,"line_start":892,"line_end":892,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611395,"byte_end":611404,"line_start":893,"line_end":893,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611406,"byte_end":611436,"line_start":894,"line_end":894,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611903,"byte_end":611909,"line_start":916,"line_end":916,"column_start":9,"column_end":15},"name":"resize","qualname":"<BitVec<T, O>>::resize","value":"pub fn resize(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the bit-vector to a new length. New bits are initialized to\n `value`.","sig":null,"attributes":[{"value":"/ Resizes the bit-vector to a new length. New bits are initialized to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611541,"byte_end":611612,"line_start":899,"line_end":899,"column_start":2,"column_end":73}},{"value":"/ `value`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611614,"byte_end":611626,"line_start":900,"line_end":900,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611628,"byte_end":611631,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611633,"byte_end":611648,"line_start":902,"line_end":902,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611650,"byte_end":611653,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize`](alloc::vec::Vec::resize)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611655,"byte_end":611699,"line_start":904,"line_end":904,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611701,"byte_end":611704,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611706,"byte_end":611721,"line_start":906,"line_end":906,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611723,"byte_end":611726,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611728,"byte_end":611739,"line_start":908,"line_end":908,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611741,"byte_end":611768,"line_start":909,"line_end":909,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611770,"byte_end":611773,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 2];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611775,"byte_end":611806,"line_start":911,"line_end":911,"column_start":2,"column_end":33}},{"value":"/ bv.resize(5, true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611808,"byte_end":611831,"line_start":912,"line_end":912,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 1, 1, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611833,"byte_end":611874,"line_start":913,"line_end":913,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611876,"byte_end":611883,"line_start":914,"line_end":914,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":611885,"byte_end":611894,"line_start":915,"line_end":915,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4507},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612397,"byte_end":612414,"line_start":935,"line_end":935,"column_start":9,"column_end":26},"name":"extend_from_slice","qualname":"<BitVec<T, O>>::extend_from_slice","value":"pub fn extend_from_slice<T2, O2>(&mut Self, &BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612178,"byte_end":612187,"line_start":930,"line_end":930,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612189,"byte_end":612219,"line_start":931,"line_end":931,"column_start":2,"column_end":32}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612221,"byte_end":612282,"line_start":932,"line_end":932,"column_start":2,"column_end":63}},{"value":"deprecated =\n\"use `.extend_from_bitslice()` or `.extend_from_raw_slice()` \\\n\t                instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612284,"byte_end":612388,"line_start":933,"line_end":934,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4510},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613051,"byte_end":613069,"line_start":964,"line_end":964,"column_start":9,"column_end":27},"name":"extend_from_within","qualname":"<BitVec<T, O>>::extend_from_within","value":"pub fn extend_from_within<R>(&mut Self, R) where R: RangeExt<usize>","parent":null,"children":[],"decl_id":null,"docs":" Extends `self` by copying an internal range of its bit-slice as the\n region to append.","sig":null,"attributes":[{"value":"/ Extends `self` by copying an internal range of its bit-slice as the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612543,"byte_end":612614,"line_start":943,"line_end":943,"column_start":2,"column_end":73}},{"value":"/ region to append.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612616,"byte_end":612637,"line_start":944,"line_end":944,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612639,"byte_end":612642,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612644,"byte_end":612659,"line_start":946,"line_end":946,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612661,"byte_end":612664,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_within`](alloc::vec::Vec::extend_from_within)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612666,"byte_end":612734,"line_start":948,"line_end":948,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612736,"byte_end":612739,"line_start":949,"line_end":949,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612741,"byte_end":612754,"line_start":950,"line_end":950,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612756,"byte_end":612759,"line_start":951,"line_end":951,"column_start":2,"column_end":5}},{"value":"/ This panics if `src` is not within `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612761,"byte_end":612818,"line_start":952,"line_end":952,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612820,"byte_end":612823,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612825,"byte_end":612840,"line_start":954,"line_end":954,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612842,"byte_end":612845,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612847,"byte_end":612858,"line_start":956,"line_end":956,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612860,"byte_end":612887,"line_start":957,"line_end":957,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612889,"byte_end":612892,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612894,"byte_end":612934,"line_start":959,"line_end":959,"column_start":2,"column_end":42}},{"value":"/ bv.extend_from_within(1 .. 4);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612936,"byte_end":612970,"line_start":960,"line_end":960,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 0, 1, 1, 0, 0]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":612972,"byte_end":613022,"line_start":961,"line_end":961,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613024,"byte_end":613031,"line_start":962,"line_end":962,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613033,"byte_end":613042,"line_start":963,"line_end":963,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4512},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614757,"byte_end":614763,"line_start":1020,"line_end":1020,"column_start":9,"column_end":15},"name":"splice","qualname":"<BitVec<T, O>>::splice","value":"pub fn splice<R, I>(&mut Self, R, I) -> Splice<, T, O, I::IntoIter> where\nR: RangeBounds<usize>, I: IntoIterator<Item = bool>","parent":null,"children":[],"decl_id":null,"docs":" Modifies [`self.drain()`] so that the removed bit-slice is instead\n replaced with the contents of another bit-stream.","sig":null,"attributes":[{"value":"/ Modifies [`self.drain()`] so that the removed bit-slice is instead","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613343,"byte_end":613413,"line_start":975,"line_end":975,"column_start":2,"column_end":72}},{"value":"/ replaced with the contents of another bit-stream.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613415,"byte_end":613468,"line_start":976,"line_end":976,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613470,"byte_end":613473,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ As with `.drain()`, the specified range is always removed from the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613475,"byte_end":613545,"line_start":978,"line_end":978,"column_start":2,"column_end":72}},{"value":"/ bit-vector even if the splicer is not fully consumed, and the splicer","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613547,"byte_end":613620,"line_start":979,"line_end":979,"column_start":2,"column_end":75}},{"value":"/ does not specify how many bits are removed if it leaks.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613622,"byte_end":613681,"line_start":980,"line_end":980,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613683,"byte_end":613686,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ The replacement source is only consumed when the splicer drops; however,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613688,"byte_end":613764,"line_start":982,"line_end":982,"column_start":2,"column_end":78}},{"value":"/ it may be pulled before then. The replacement source cannot assume that","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613766,"byte_end":613841,"line_start":983,"line_end":983,"column_start":2,"column_end":77}},{"value":"/ there will be a delay between creation of the splicer and when it must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613843,"byte_end":613917,"line_start":984,"line_end":984,"column_start":2,"column_end":76}},{"value":"/ begin producing bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613919,"byte_end":613944,"line_start":985,"line_end":985,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613946,"byte_end":613949,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ This copies the `Vec::splice` implementation; see its documentation for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":613951,"byte_end":614026,"line_start":987,"line_end":987,"column_start":2,"column_end":77}},{"value":"/ more details about how the replacement should act.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614028,"byte_end":614082,"line_start":988,"line_end":988,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614084,"byte_end":614087,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614089,"byte_end":614104,"line_start":990,"line_end":990,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614106,"byte_end":614109,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ [`Vec::splice`](alloc::vec::Vec::splice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614111,"byte_end":614155,"line_start":992,"line_end":992,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614157,"byte_end":614160,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614162,"byte_end":614175,"line_start":994,"line_end":994,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614177,"byte_end":614180,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ This panics if `range` departs `0 .. self.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614182,"byte_end":614235,"line_start":996,"line_end":996,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614237,"byte_end":614240,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614242,"byte_end":614257,"line_start":998,"line_end":998,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614259,"byte_end":614262,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614264,"byte_end":614275,"line_start":1000,"line_end":1000,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614277,"byte_end":614304,"line_start":1001,"line_end":1001,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614306,"byte_end":614309,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614311,"byte_end":614345,"line_start":1003,"line_end":1003,"column_start":2,"column_end":36}},{"value":"/ //                   a  b  c","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614347,"byte_end":614379,"line_start":1004,"line_end":1004,"column_start":2,"column_end":34}},{"value":"/ let mut yank = bv.splice(","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614381,"byte_end":614410,"line_start":1005,"line_end":1005,"column_start":2,"column_end":31}},{"value":"/   .. 2,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614412,"byte_end":614423,"line_start":1006,"line_end":1006,"column_start":2,"column_end":13}},{"value":"/   bits![static 1, 1, 0].iter().by_vals(),","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614425,"byte_end":614470,"line_start":1007,"line_end":1007,"column_start":2,"column_end":47}},{"value":"/ //             d  e  f","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614472,"byte_end":614498,"line_start":1008,"line_end":1008,"column_start":2,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614500,"byte_end":614506,"line_start":1009,"line_end":1009,"column_start":2,"column_end":8}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614508,"byte_end":614511,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ assert!(!yank.next().unwrap()); // a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614513,"byte_end":614553,"line_start":1011,"line_end":1011,"column_start":2,"column_end":42}},{"value":"/ assert!(yank.next().unwrap()); // b","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614555,"byte_end":614594,"line_start":1012,"line_end":1012,"column_start":2,"column_end":41}},{"value":"/ drop(yank);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614596,"byte_end":614611,"line_start":1013,"line_end":1013,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(bv, bits![1, 1, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614613,"byte_end":614651,"line_start":1014,"line_end":1014,"column_start":2,"column_end":40}},{"value":"/ //                   d  e  f  c","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614653,"byte_end":614688,"line_start":1015,"line_end":1015,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614690,"byte_end":614697,"line_start":1016,"line_end":1016,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614699,"byte_end":614702,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ [`self.drain()`]: Self::drain","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614704,"byte_end":614737,"line_start":1018,"line_end":1018,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":614739,"byte_end":614748,"line_start":1019,"line_end":1019,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4681},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":620652,"byte_end":620657,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::iter::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4685},{"krate":0,"index":4686},{"krate":0,"index":4687}],"decl_id":null,"docs":"# Draining Iteration","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622181,"byte_end":622192,"line_start":324,"line_end":324,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Drain>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Views the unyielded bits remaining in the drain.","sig":null,"attributes":[{"value":"/ Views the unyielded bits remaining in the drain.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":621996,"byte_end":622048,"line_start":317,"line_end":317,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622050,"byte_end":622053,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622055,"byte_end":622070,"line_start":319,"line_end":319,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622072,"byte_end":622075,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ [`Drain::as_slice`](alloc::vec::Drain::as_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622077,"byte_end":622129,"line_start":321,"line_end":321,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622131,"byte_end":622140,"line_start":322,"line_end":322,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622142,"byte_end":622172,"line_start":323,"line_end":323,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4695},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622457,"byte_end":622465,"line_start":332,"line_end":332,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Drain>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622296,"byte_end":622305,"line_start":328,"line_end":328,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622307,"byte_end":622337,"line_start":329,"line_end":329,"column_start":2,"column_end":32}},{"value":"deprecated = \"use `.as_bitslice()` instead\"","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622339,"byte_end":622385,"line_start":330,"line_end":330,"column_start":2,"column_end":48}},{"value":"allow(missing_docs, clippy :: missing_docs_in_private_items)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":622387,"byte_end":622448,"line_start":331,"line_end":331,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":7854},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":627804,"byte_end":627810,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::iter::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":7859},{"krate":0,"index":7860}],"decl_id":null,"docs":"# Splicing Iteration","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5125},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570741,"byte_end":570747,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":5128},{"krate":0,"index":5129}],"decl_id":null,"docs":"# Bit-Precision Dynamic Array","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570673,"byte_end":570683,"line_start":52,"line_end":52,"column_start":1,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":5133},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571109,"byte_end":571114,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::vec::BitVec::<T, O>::EMPTY","value":"Self","parent":{"krate":0,"index":5130},"children":[],"decl_id":null,"docs":" An empty bit-vector with no backing allocation.\n","sig":null,"attributes":[{"value":"/ An empty bit-vector with no backing allocation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571046,"byte_end":571097,"line_start":71,"line_end":71,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":5134},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571464,"byte_end":571470,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitVec<T, O>>::repeat","value":"pub fn repeat(bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit-vector by repeating a bit for the desired length.","sig":null,"attributes":[{"value":"/ Creates a new bit-vector by repeating a bit for the desired length.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571179,"byte_end":571250,"line_start":77,"line_end":77,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571252,"byte_end":571255,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571257,"byte_end":571272,"line_start":79,"line_end":79,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571274,"byte_end":571277,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571279,"byte_end":571290,"line_start":81,"line_end":81,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571292,"byte_end":571319,"line_start":82,"line_end":82,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571321,"byte_end":571324,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ let zeros = BitVec::<u8, Msb0>::repeat(false, 50);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571326,"byte_end":571380,"line_start":84,"line_end":84,"column_start":2,"column_end":56}},{"value":"/ let ones = BitVec::<u16, Lsb0>::repeat(true, 50);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571382,"byte_end":571435,"line_start":85,"line_end":85,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571437,"byte_end":571444,"line_start":86,"line_end":86,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571446,"byte_end":571455,"line_start":87,"line_end":87,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5136},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572443,"byte_end":572456,"line_start":121,"line_end":121,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitVec<T, O>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<T, O>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies the contents of a bit-slice into a new heap allocation.","sig":null,"attributes":[{"value":"/ Copies the contents of a bit-slice into a new heap allocation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571711,"byte_end":571777,"line_start":99,"line_end":99,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571779,"byte_end":571782,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ This copies the raw underlying elements into a new allocation, and sets","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571784,"byte_end":571859,"line_start":101,"line_end":101,"column_start":2,"column_end":77}},{"value":"/ the produced bit-vector to use the same memory layout as the originating","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571861,"byte_end":571937,"line_start":102,"line_end":102,"column_start":2,"column_end":78}},{"value":"/ bit-slice. This means that it may begin at any bit in the first element,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":571939,"byte_end":572015,"line_start":103,"line_end":103,"column_start":2,"column_end":78}},{"value":"/ not just the zeroth bit. If you require this property, call","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572017,"byte_end":572080,"line_start":104,"line_end":104,"column_start":2,"column_end":65}},{"value":"/ [`.force_align()`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572082,"byte_end":572105,"line_start":105,"line_end":105,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572107,"byte_end":572110,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ Dead bits in the copied memory elements are guaranteed to be zeroed.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572112,"byte_end":572184,"line_start":107,"line_end":107,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572186,"byte_end":572189,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572191,"byte_end":572206,"line_start":109,"line_end":109,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572208,"byte_end":572211,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572213,"byte_end":572224,"line_start":111,"line_end":111,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572226,"byte_end":572253,"line_start":112,"line_end":112,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572255,"byte_end":572258,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572260,"byte_end":572296,"line_start":114,"line_end":114,"column_start":2,"column_end":38}},{"value":"/ let bv = BitVec::from_bitslice(bits);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572298,"byte_end":572339,"line_start":115,"line_end":115,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(bv, bits);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572341,"byte_end":572366,"line_start":116,"line_end":116,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572368,"byte_end":572375,"line_start":117,"line_end":117,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572377,"byte_end":572380,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ [`.force_align()`]: Self::force_align","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572382,"byte_end":572423,"line_start":119,"line_end":119,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572425,"byte_end":572434,"line_start":120,"line_end":120,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5137},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573211,"byte_end":573223,"line_start":155,"line_end":155,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitVec<T, O>>::from_element","value":"pub fn from_element(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new bit-vector from a single element.","sig":null,"attributes":[{"value":"/ Constructs a new bit-vector from a single element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572873,"byte_end":572927,"line_start":141,"line_end":141,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572929,"byte_end":572932,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ This copies `elem` into a new heap allocation, and sets the bit-vector","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":572934,"byte_end":573008,"line_start":143,"line_end":143,"column_start":2,"column_end":76}},{"value":"/ to cover it entirely.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573010,"byte_end":573035,"line_start":144,"line_end":144,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573037,"byte_end":573040,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573042,"byte_end":573057,"line_start":146,"line_end":146,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573059,"byte_end":573062,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573064,"byte_end":573075,"line_start":148,"line_end":148,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573077,"byte_end":573104,"line_start":149,"line_end":149,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573106,"byte_end":573109,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<_, Msb0>::from_element(1u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573111,"byte_end":573161,"line_start":151,"line_end":151,"column_start":2,"column_end":52}},{"value":"/ assert!(bv[7]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573163,"byte_end":573182,"line_start":152,"line_end":152,"column_start":2,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573184,"byte_end":573191,"line_start":153,"line_end":153,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573193,"byte_end":573202,"line_start":154,"line_end":154,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5138},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573752,"byte_end":573762,"line_start":178,"line_end":178,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitVec<T, O>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new bit-vector from a slice of memory elements.","sig":null,"attributes":[{"value":"/ Constructs a new bit-vector from a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573277,"byte_end":573341,"line_start":159,"line_end":159,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573343,"byte_end":573346,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ This copies `slice` into a new heap allocation, and sets the bit-vector","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573348,"byte_end":573423,"line_start":161,"line_end":161,"column_start":2,"column_end":77}},{"value":"/ to cover it entirely.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573425,"byte_end":573450,"line_start":162,"line_end":162,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573452,"byte_end":573455,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573457,"byte_end":573470,"line_start":164,"line_end":164,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573472,"byte_end":573475,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ This panics if `slice` exceeds bit-vector capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573477,"byte_end":573532,"line_start":166,"line_end":166,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573534,"byte_end":573537,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573539,"byte_end":573554,"line_start":168,"line_end":168,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573556,"byte_end":573559,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573561,"byte_end":573572,"line_start":170,"line_end":170,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573574,"byte_end":573601,"line_start":171,"line_end":171,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573603,"byte_end":573606,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1, 2, 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573608,"byte_end":573640,"line_start":173,"line_end":173,"column_start":2,"column_end":34}},{"value":"/ let bv = BitVec::<_, Lsb0>::from_slice(slice);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573642,"byte_end":573692,"line_start":174,"line_end":174,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv.len(), 32);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573694,"byte_end":573723,"line_start":175,"line_end":175,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573725,"byte_end":573732,"line_start":176,"line_end":176,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573734,"byte_end":573743,"line_start":177,"line_end":177,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5139},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574323,"byte_end":574337,"line_start":198,"line_end":198,"column_start":9,"column_end":23},"name":"try_from_slice","qualname":"<BitVec<T, O>>::try_from_slice","value":"pub fn try_from_slice(&[T]) -> Result<Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Fallibly constructs a new bit-vector from a slice of memory elements.","sig":null,"attributes":[{"value":"/ Fallibly constructs a new bit-vector from a slice of memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573830,"byte_end":573903,"line_start":182,"line_end":182,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573905,"byte_end":573908,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ This fails early if `slice` exceeds bit-vector capacity. If it is not,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573910,"byte_end":573984,"line_start":184,"line_end":184,"column_start":2,"column_end":76}},{"value":"/ then `slice` is copied into a new heap allocation and fully spanned by","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":573986,"byte_end":574060,"line_start":185,"line_end":185,"column_start":2,"column_end":76}},{"value":"/ the returned bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574062,"byte_end":574090,"line_start":186,"line_end":186,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574092,"byte_end":574095,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574097,"byte_end":574112,"line_start":188,"line_end":188,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574114,"byte_end":574117,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574119,"byte_end":574130,"line_start":190,"line_end":190,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574132,"byte_end":574159,"line_start":191,"line_end":191,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574161,"byte_end":574164,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1, 2, 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574166,"byte_end":574198,"line_start":193,"line_end":193,"column_start":2,"column_end":34}},{"value":"/ let bv = BitVec::<_, Lsb0>::try_from_slice(slice).unwrap();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574200,"byte_end":574263,"line_start":194,"line_end":194,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bv.len(), 32);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574265,"byte_end":574294,"line_start":195,"line_end":195,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574296,"byte_end":574303,"line_start":196,"line_end":196,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574305,"byte_end":574314,"line_start":197,"line_end":197,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5140},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574973,"byte_end":574981,"line_start":221,"line_end":221,"column_start":9,"column_end":17},"name":"from_vec","qualname":"<BitVec<T, O>>::from_vec","value":"pub fn from_vec(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a regular vector in-place into a bit-vector.","sig":null,"attributes":[{"value":"/ Converts a regular vector in-place into a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574458,"byte_end":574515,"line_start":202,"line_end":202,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574517,"byte_end":574520,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ The produced bit-vector spans every bit in the original vector. No","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574522,"byte_end":574592,"line_start":204,"line_end":204,"column_start":2,"column_end":72}},{"value":"/ reällocation occurs; this is purely a transform of the handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574594,"byte_end":574661,"line_start":205,"line_end":205,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574663,"byte_end":574666,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ ## Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574668,"byte_end":574681,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574683,"byte_end":574686,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ This panics if the source vector is too long to view as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574688,"byte_end":574760,"line_start":209,"line_end":209,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574762,"byte_end":574765,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574767,"byte_end":574782,"line_start":211,"line_end":211,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574784,"byte_end":574787,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574789,"byte_end":574800,"line_start":213,"line_end":213,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574802,"byte_end":574829,"line_start":214,"line_end":214,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574831,"byte_end":574834,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ let v = vec![0u8, 1, 2, 3];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574836,"byte_end":574867,"line_start":216,"line_end":216,"column_start":2,"column_end":33}},{"value":"/ let bv = BitVec::<_, Msb0>::from_vec(v);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574869,"byte_end":574913,"line_start":217,"line_end":217,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bv.len(), 32);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574915,"byte_end":574944,"line_start":218,"line_end":218,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574946,"byte_end":574953,"line_start":219,"line_end":219,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":574955,"byte_end":574964,"line_start":220,"line_end":220,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5141},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575688,"byte_end":575700,"line_start":243,"line_end":243,"column_start":9,"column_end":21},"name":"try_from_vec","qualname":"<BitVec<T, O>>::try_from_vec","value":"pub fn try_from_vec(Vec<T>) -> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to convert a regular vector in-place into a bit-vector.","sig":null,"attributes":[{"value":"/ Attempts to convert a regular vector in-place into a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575102,"byte_end":575170,"line_start":226,"line_end":226,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575172,"byte_end":575175,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ This fails if the source vector is too long to view as a bit-slice. On","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575177,"byte_end":575251,"line_start":228,"line_end":228,"column_start":2,"column_end":76}},{"value":"/ success, the produced bit-vector spans every bit in the original vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575253,"byte_end":575329,"line_start":229,"line_end":229,"column_start":2,"column_end":78}},{"value":"/ No reällocation occurs; this is purely a transform of the handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575331,"byte_end":575401,"line_start":230,"line_end":230,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575403,"byte_end":575406,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575408,"byte_end":575423,"line_start":232,"line_end":232,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575425,"byte_end":575428,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575430,"byte_end":575441,"line_start":234,"line_end":234,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575443,"byte_end":575470,"line_start":235,"line_end":235,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575472,"byte_end":575475,"line_start":236,"line_end":236,"column_start":2,"column_end":5}},{"value":"/ let v = vec![0u8; 20];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575477,"byte_end":575503,"line_start":237,"line_end":237,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(BitVec::<_, Msb0>::try_from_vec(v).unwrap().len(), 160);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575505,"byte_end":575576,"line_start":238,"line_end":238,"column_start":2,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575578,"byte_end":575585,"line_start":239,"line_end":239,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575587,"byte_end":575590,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ It is not practical to allocate a vector that will fail this conversion.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575592,"byte_end":575668,"line_start":241,"line_end":241,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575670,"byte_end":575679,"line_start":242,"line_end":242,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5144},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577105,"byte_end":577125,"line_start":282,"line_end":282,"column_start":9,"column_end":29},"name":"extend_from_bitslice","qualname":"<BitVec<T, O>>::extend_from_bitslice","value":"pub fn extend_from_bitslice<T2, O2>(&mut Self, &BitSlice<T2, O2>) where\nT2: BitStore, O2: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Appends the contents of a bit-slice to a bit-vector.","sig":null,"attributes":[{"value":"/ Appends the contents of a bit-slice to a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":575999,"byte_end":576055,"line_start":253,"line_end":253,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576057,"byte_end":576060,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ This can extend from a bit-slice of any type parameters; it is not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576062,"byte_end":576132,"line_start":255,"line_end":255,"column_start":2,"column_end":72}},{"value":"/ restricted to using the same parameters as `self`. However, when the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576134,"byte_end":576206,"line_start":256,"line_end":256,"column_start":2,"column_end":74}},{"value":"/ type parameters *do* match, it is possible for this to use a batch-copy","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576208,"byte_end":576283,"line_start":257,"line_end":257,"column_start":2,"column_end":77}},{"value":"/ optimization to go faster than the individual-bit crawl that is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576285,"byte_end":576352,"line_start":258,"line_end":258,"column_start":2,"column_end":69}},{"value":"/ necessary when they differ.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576354,"byte_end":576385,"line_start":259,"line_end":259,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576387,"byte_end":576390,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ Until Rust provides extensive support for specialization in trait","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576392,"byte_end":576461,"line_start":261,"line_end":261,"column_start":2,"column_end":71}},{"value":"/ implementations, you should use this method whenever you are extending","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576463,"byte_end":576537,"line_start":262,"line_end":262,"column_start":2,"column_end":76}},{"value":"/ from a `BitSlice` proper, and only use the general [`.extend()`]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576539,"byte_end":576607,"line_start":263,"line_end":263,"column_start":2,"column_end":70}},{"value":"/ implementation if you are required to use a generic `bool` source.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576609,"byte_end":576679,"line_start":264,"line_end":264,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576681,"byte_end":576684,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576686,"byte_end":576701,"line_start":266,"line_end":266,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576703,"byte_end":576706,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576708,"byte_end":576774,"line_start":268,"line_end":268,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576776,"byte_end":576779,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576781,"byte_end":576796,"line_start":270,"line_end":270,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576798,"byte_end":576801,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576803,"byte_end":576814,"line_start":272,"line_end":272,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576816,"byte_end":576843,"line_start":273,"line_end":273,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576845,"byte_end":576848,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576850,"byte_end":576881,"line_start":275,"line_end":275,"column_start":2,"column_end":33}},{"value":"/ bv.extend_from_bitslice(bits![0, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576883,"byte_end":576933,"line_start":276,"line_end":276,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1, 0, 0, 1]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576935,"byte_end":576982,"line_start":277,"line_end":277,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576984,"byte_end":576991,"line_start":278,"line_end":278,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576993,"byte_end":576996,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ [`.extend()`]: https://docs.rs/bitvec/latest/bitvec/vec/struct.Vec.html#impl-Extend","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":576998,"byte_end":577085,"line_start":280,"line_end":280,"column_start":2,"column_end":89}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577087,"byte_end":577096,"line_start":281,"line_end":281,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5147},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577641,"byte_end":577662,"line_start":302,"line_end":302,"column_start":9,"column_end":30},"name":"extend_from_raw_slice","qualname":"<BitVec<T, O>>::extend_from_raw_slice","value":"pub fn extend_from_raw_slice(&mut Self, &[T])","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of `T` elements to a bit-vector.","sig":null,"attributes":[{"value":"/ Appends a slice of `T` elements to a bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577374,"byte_end":577426,"line_start":293,"line_end":293,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577428,"byte_end":577431,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ The slice is viewed as a `BitSlice<T, O>`, then appended directly to the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577433,"byte_end":577509,"line_start":295,"line_end":295,"column_start":2,"column_end":78}},{"value":"/ bit-vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577511,"byte_end":577526,"line_start":296,"line_end":296,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577528,"byte_end":577531,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577533,"byte_end":577548,"line_start":298,"line_end":298,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577550,"byte_end":577553,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577555,"byte_end":577621,"line_start":300,"line_end":300,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577623,"byte_end":577632,"line_start":301,"line_end":301,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5151},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577896,"byte_end":577907,"line_start":315,"line_end":315,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitVec<T, O>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-vector as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-vector as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577825,"byte_end":577876,"line_start":313,"line_end":313,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577878,"byte_end":577887,"line_start":314,"line_end":314,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5152},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578066,"byte_end":578081,"line_start":321,"line_end":321,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitVec<T, O>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Explicitly views the bit-vector as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Explicitly views the bit-vector as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577987,"byte_end":578046,"line_start":319,"line_end":319,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578048,"byte_end":578057,"line_start":320,"line_end":320,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5153},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578259,"byte_end":578271,"line_start":327,"line_end":327,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitVec<T, O>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-vector as a slice of its underlying memory elements.\n","sig":null,"attributes":[{"value":"/ Views the bit-vector as a slice of its underlying memory elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578169,"byte_end":578239,"line_start":325,"line_end":325,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578241,"byte_end":578250,"line_start":326,"line_end":326,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5154},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578528,"byte_end":578544,"line_start":336,"line_end":336,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitVec<T, O>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Views the bit-vector as a mutable slice of its underlying memory\n elements.\n","sig":null,"attributes":[{"value":"/ Views the bit-vector as a mutable slice of its underlying memory","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578425,"byte_end":578493,"line_start":333,"line_end":333,"column_start":2,"column_end":70}},{"value":"/ elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578495,"byte_end":578508,"line_start":334,"line_end":334,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578510,"byte_end":578519,"line_start":335,"line_end":335,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5155},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579062,"byte_end":579071,"line_start":354,"line_end":354,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitVec<T, O>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unsafe shared bit-pointer to the start of the buffer.","sig":null,"attributes":[{"value":"/ Creates an unsafe shared bit-pointer to the start of the buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578708,"byte_end":578776,"line_start":342,"line_end":342,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578778,"byte_end":578781,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578783,"byte_end":578798,"line_start":344,"line_end":344,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578800,"byte_end":578803,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](alloc::vec::Vec::as_ptr)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578805,"byte_end":578849,"line_start":346,"line_end":346,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578851,"byte_end":578854,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578856,"byte_end":578869,"line_start":348,"line_end":348,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578871,"byte_end":578874,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ You must initialize the contents of the underlying buffer before","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578876,"byte_end":578944,"line_start":350,"line_end":350,"column_start":2,"column_end":70}},{"value":"/ accessing memory through this pointer. See the `BitPtr` documentation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":578946,"byte_end":579019,"line_start":351,"line_end":351,"column_start":2,"column_end":75}},{"value":"/ for more details.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579021,"byte_end":579042,"line_start":352,"line_end":352,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579044,"byte_end":579053,"line_start":353,"line_end":353,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5156},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579511,"byte_end":579524,"line_start":370,"line_end":370,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitVec<T, O>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, T, O>","parent":null,"children":[],"decl_id":null,"docs":" Creates an unsafe writable bit-pointer to the start of the buffer.","sig":null,"attributes":[{"value":"/ Creates an unsafe writable bit-pointer to the start of the buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579147,"byte_end":579217,"line_start":358,"line_end":358,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579219,"byte_end":579222,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579224,"byte_end":579239,"line_start":360,"line_end":360,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579241,"byte_end":579244,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](alloc::vec::Vec::as_mut_ptr)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579246,"byte_end":579298,"line_start":362,"line_end":362,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579300,"byte_end":579303,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ ## Safety","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579305,"byte_end":579318,"line_start":364,"line_end":364,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579320,"byte_end":579323,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ You must initialize the contents of the underlying buffer before","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579325,"byte_end":579393,"line_start":366,"line_end":366,"column_start":2,"column_end":70}},{"value":"/ accessing memory through this pointer. See the `BitPtr` documentation","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579395,"byte_end":579468,"line_start":367,"line_end":367,"column_start":2,"column_end":75}},{"value":"/ for more details.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579470,"byte_end":579491,"line_start":368,"line_end":368,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579493,"byte_end":579502,"line_start":369,"line_end":369,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5157},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579984,"byte_end":580003,"line_start":391,"line_end":391,"column_start":9,"column_end":28},"name":"into_boxed_bitslice","qualname":"<BitVec<T, O>>::into_boxed_bitslice","value":"pub fn into_boxed_bitslice(Self) -> BitBox<T, O>","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-vector into a boxed bit-slice.","sig":null,"attributes":[{"value":"/ Converts a bit-vector into a boxed bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579591,"byte_end":579640,"line_start":374,"line_end":374,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579642,"byte_end":579645,"line_start":375,"line_end":375,"column_start":2,"column_end":5}},{"value":"/ This may cause a reällocation to drop any excess capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579647,"byte_end":579710,"line_start":376,"line_end":376,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579712,"byte_end":579715,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ ## Original","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579717,"byte_end":579732,"line_start":378,"line_end":378,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579734,"byte_end":579737,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](alloc::vec::Vec::into_boxed_slice)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579739,"byte_end":579803,"line_start":380,"line_end":380,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579805,"byte_end":579808,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579810,"byte_end":579825,"line_start":382,"line_end":382,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579827,"byte_end":579830,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579832,"byte_end":579843,"line_start":384,"line_end":384,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579845,"byte_end":579872,"line_start":385,"line_end":385,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579874,"byte_end":579877,"line_start":386,"line_end":386,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579879,"byte_end":579915,"line_start":387,"line_end":387,"column_start":2,"column_end":38}},{"value":"/ let bb = bv.into_boxed_bitslice();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579917,"byte_end":579955,"line_start":388,"line_end":388,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579957,"byte_end":579964,"line_start":389,"line_end":389,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":579966,"byte_end":579975,"line_start":390,"line_end":390,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5158},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580920,"byte_end":580928,"line_start":422,"line_end":422,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitVec<T, O>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-vector into a `Vec` of its underlying storage.","sig":null,"attributes":[{"value":"/ Converts a bit-vector into a `Vec` of its underlying storage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580275,"byte_end":580340,"line_start":401,"line_end":401,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580342,"byte_end":580345,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ The produced vector contains all elements that contained live bits. Dead","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580347,"byte_end":580423,"line_start":403,"line_end":403,"column_start":2,"column_end":78}},{"value":"/ bits have an unspecified value; you should call [`.set_uninitialized()`]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580425,"byte_end":580501,"line_start":404,"line_end":404,"column_start":2,"column_end":78}},{"value":"/ before converting into a vector.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580503,"byte_end":580539,"line_start":405,"line_end":405,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580541,"byte_end":580544,"line_start":406,"line_end":406,"column_start":2,"column_end":5}},{"value":"/ This does not affect the allocated memory; it is purely a conversion of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580546,"byte_end":580621,"line_start":407,"line_end":407,"column_start":2,"column_end":77}},{"value":"/ the handle.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580623,"byte_end":580638,"line_start":408,"line_end":408,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580640,"byte_end":580643,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580645,"byte_end":580660,"line_start":410,"line_end":410,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580662,"byte_end":580665,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580667,"byte_end":580678,"line_start":412,"line_end":412,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580680,"byte_end":580707,"line_start":413,"line_end":413,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580709,"byte_end":580712,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![u8, Msb0; 0, 1, 0, 0, 1];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580714,"byte_end":580760,"line_start":415,"line_end":415,"column_start":2,"column_end":48}},{"value":"/ let v = bv.into_vec();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580762,"byte_end":580788,"line_start":416,"line_end":416,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(v[0] & 0xF8, 0b01001_000);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580790,"byte_end":580831,"line_start":417,"line_end":417,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580833,"byte_end":580840,"line_start":418,"line_end":418,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580842,"byte_end":580845,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ [`.set_uninitialized()`]: Self::set_uninitialized","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580847,"byte_end":580900,"line_start":420,"line_end":420,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":580902,"byte_end":580911,"line_start":421,"line_end":421,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5162},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582393,"byte_end":582405,"line_start":474,"line_end":474,"column_start":9,"column_end":21},"name":"set_elements","qualname":"<BitVec<T, O>>::set_elements","value":"pub fn set_elements(&mut Self, T::Mem)","parent":null,"children":[],"decl_id":null,"docs":" Overwrites each element (visible in [`.as_raw_mut_slice()`]) with a new\n bit-pattern.","sig":null,"attributes":[{"value":"/ Overwrites each element (visible in [`.as_raw_mut_slice()`]) with a new","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581223,"byte_end":581298,"line_start":441,"line_end":441,"column_start":2,"column_end":77}},{"value":"/ bit-pattern.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581300,"byte_end":581316,"line_start":442,"line_end":442,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581318,"byte_end":581321,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ This unconditionally writes `element` into each element in the backing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581323,"byte_end":581397,"line_start":444,"line_end":444,"column_start":2,"column_end":76}},{"value":"/ slice, without altering the bit-vector’s length or capacity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581399,"byte_end":581465,"line_start":445,"line_end":445,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581467,"byte_end":581470,"line_start":446,"line_end":446,"column_start":2,"column_end":5}},{"value":"/ This guarantees that dead bits visible in [`.as_raw_slice()`] but not","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581472,"byte_end":581545,"line_start":447,"line_end":447,"column_start":2,"column_end":75}},{"value":"/ [`.as_bitslice()`] are initialized according to the bit-pattern of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581547,"byte_end":581617,"line_start":448,"line_end":448,"column_start":2,"column_end":72}},{"value":"/ `element.` The elements not visible in the raw slice, but present in the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581619,"byte_end":581695,"line_start":449,"line_end":449,"column_start":2,"column_end":78}},{"value":"/ allocation, do *not* specify a value. You may not rely on them being","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581697,"byte_end":581769,"line_start":450,"line_end":450,"column_start":2,"column_end":74}},{"value":"/ zeroed *or* being set to the `element` bit-pattern.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581771,"byte_end":581826,"line_start":451,"line_end":451,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581828,"byte_end":581831,"line_start":452,"line_end":452,"column_start":2,"column_end":5}},{"value":"/ ## Parameters","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581833,"byte_end":581850,"line_start":453,"line_end":453,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581852,"byte_end":581855,"line_start":454,"line_end":454,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581857,"byte_end":581874,"line_start":455,"line_end":455,"column_start":2,"column_end":19}},{"value":"/ - `element`: The bit-pattern with which each live element in the backing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581876,"byte_end":581952,"line_start":456,"line_end":456,"column_start":2,"column_end":78}},{"value":"/   store is initialized.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581954,"byte_end":581981,"line_start":457,"line_end":457,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581983,"byte_end":581986,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581988,"byte_end":582003,"line_start":459,"line_end":459,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582005,"byte_end":582008,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582010,"byte_end":582021,"line_start":461,"line_end":461,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582023,"byte_end":582050,"line_start":462,"line_end":462,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582052,"byte_end":582055,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![u8, Msb0; 0; 20];","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582057,"byte_end":582099,"line_start":464,"line_end":464,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582101,"byte_end":582143,"line_start":465,"line_end":465,"column_start":2,"column_end":44}},{"value":"/ bv.set_elements(0xA5);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582145,"byte_end":582171,"line_start":466,"line_end":466,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0xA5; 3]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582173,"byte_end":582218,"line_start":467,"line_end":467,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582220,"byte_end":582227,"line_start":468,"line_end":468,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582229,"byte_end":582232,"line_start":469,"line_end":469,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582234,"byte_end":582275,"line_start":470,"line_end":470,"column_start":2,"column_end":43}},{"value":"/ [`.as_raw_mut_slice()`]: Self::as_raw_mut_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582277,"byte_end":582328,"line_start":471,"line_end":471,"column_start":2,"column_end":53}},{"value":"/ [`.as_raw_slice()`]: Self::as_raw_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582330,"byte_end":582373,"line_start":472,"line_end":472,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582375,"byte_end":582384,"line_start":473,"line_end":473,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5164},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583632,"byte_end":583649,"line_start":512,"line_end":512,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitVec<T, O>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of a bit-vector to a known value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of a bit-vector to a known value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582528,"byte_end":582593,"line_start":480,"line_end":480,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582595,"byte_end":582598,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits that are observable in [`.as_raw_slice()`]","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582600,"byte_end":582676,"line_start":482,"line_end":482,"column_start":2,"column_end":78}},{"value":"/ but *not* observable in [`.as_bitslice()`] to a known value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582678,"byte_end":582742,"line_start":483,"line_end":483,"column_start":2,"column_end":66}},{"value":"/ Memory beyond the raw-slice view, but still within the allocation, is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582744,"byte_end":582817,"line_start":484,"line_end":484,"column_start":2,"column_end":75}},{"value":"/ considered fully dead and will never be seen.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582819,"byte_end":582868,"line_start":485,"line_end":485,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582870,"byte_end":582873,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ This can be used to zero the unused memory so that when viewed as a raw","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582875,"byte_end":582950,"line_start":487,"line_end":487,"column_start":2,"column_end":77}},{"value":"/ slice, unused bits have a consistent and predictable value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":582952,"byte_end":583015,"line_start":488,"line_end":488,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583017,"byte_end":583020,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583022,"byte_end":583037,"line_start":490,"line_end":490,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583039,"byte_end":583042,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583044,"byte_end":583055,"line_start":492,"line_end":492,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583057,"byte_end":583084,"line_start":493,"line_end":493,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583086,"byte_end":583089,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ let mut bv = 0b1101_1100u8.view_bits::<Lsb0>().to_bitvec();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583091,"byte_end":583154,"line_start":495,"line_end":495,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], 0b1101_1100u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583156,"byte_end":583208,"line_start":496,"line_end":496,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583210,"byte_end":583213,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ bv.truncate(4);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583215,"byte_end":583234,"line_start":498,"line_end":498,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.count_ones(), 2);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583236,"byte_end":583271,"line_start":499,"line_end":499,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], 0b1101_1100u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583273,"byte_end":583325,"line_start":500,"line_end":500,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583327,"byte_end":583330,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(false);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583332,"byte_end":583364,"line_start":502,"line_end":502,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], 0b0000_1100u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583366,"byte_end":583418,"line_start":503,"line_end":503,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583420,"byte_end":583423,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(true);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583425,"byte_end":583456,"line_start":505,"line_end":505,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], 0b1111_1100u8);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583458,"byte_end":583510,"line_start":506,"line_end":506,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583512,"byte_end":583519,"line_start":507,"line_end":507,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583521,"byte_end":583524,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583526,"byte_end":583567,"line_start":509,"line_end":509,"column_start":2,"column_end":43}},{"value":"/ [`.as_raw_slice()`]: Self::as_raw_slice","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583569,"byte_end":583612,"line_start":510,"line_end":510,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583614,"byte_end":583623,"line_start":511,"line_end":511,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5165},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584872,"byte_end":584883,"line_start":549,"line_end":549,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitVec<T, O>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the live region of the bit-vector’s contents begin at the\n front edge of the buffer.","sig":null,"attributes":[{"value":"/ Ensures that the live region of the bit-vector’s contents begin at the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":583936,"byte_end":584012,"line_start":522,"line_end":522,"column_start":2,"column_end":76}},{"value":"/ front edge of the buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584014,"byte_end":584043,"line_start":523,"line_end":523,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584045,"byte_end":584048,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ `BitVec` has performance optimizations where it moves its view of its","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584050,"byte_end":584123,"line_start":525,"line_end":525,"column_start":2,"column_end":75}},{"value":"/ buffer contents in order to avoid needless moves of its data within the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584125,"byte_end":584200,"line_start":526,"line_end":526,"column_start":2,"column_end":77}},{"value":"/ buffer. This can lead to unexpected contents of the raw memory values,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584202,"byte_end":584276,"line_start":527,"line_end":527,"column_start":2,"column_end":76}},{"value":"/ so this method ensures that the semantic contents of the bit-vector","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584278,"byte_end":584349,"line_start":528,"line_end":528,"column_start":2,"column_end":73}},{"value":"/ match its in-memory storage.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584351,"byte_end":584383,"line_start":529,"line_end":529,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584385,"byte_end":584388,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ ## Examples","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584390,"byte_end":584405,"line_start":531,"line_end":531,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584407,"byte_end":584410,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584412,"byte_end":584423,"line_start":533,"line_end":533,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584425,"byte_end":584452,"line_start":534,"line_end":534,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584454,"byte_end":584457,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ let data = 0b00_1111_00u8;","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584459,"byte_end":584489,"line_start":536,"line_end":536,"column_start":2,"column_end":32}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584491,"byte_end":584531,"line_start":537,"line_end":537,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584533,"byte_end":584536,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bits[2 .. 6].to_bitvec();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584538,"byte_end":584580,"line_start":539,"line_end":539,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits![1; 4]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584582,"byte_end":584614,"line_start":540,"line_end":540,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], data);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584616,"byte_end":584659,"line_start":541,"line_end":541,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584661,"byte_end":584664,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ bv.force_align();","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584666,"byte_end":584687,"line_start":543,"line_end":543,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(bv, bits![1; 4]);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584689,"byte_end":584721,"line_start":544,"line_end":544,"column_start":2,"column_end":34}},{"value":"/ // BitVec does not specify the value of dead bits in its buffer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584723,"byte_end":584791,"line_start":545,"line_end":545,"column_start":2,"column_end":70}},{"value":"/ assert_eq!(bv.as_raw_slice()[0] & 0xF0, 0xF0);","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584793,"byte_end":584843,"line_start":546,"line_end":546,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584845,"byte_end":584852,"line_start":547,"line_end":547,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":584854,"byte_end":584863,"line_start":548,"line_end":548,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":5176},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","parent":null,"children":[{"krate":0,"index":5177},{"krate":0,"index":5180},{"krate":0,"index":5181},{"krate":0,"index":5184},{"krate":0,"index":5187},{"krate":0,"index":5190},{"krate":0,"index":5193},{"krate":0,"index":5196},{"krate":0,"index":5206},{"krate":0,"index":5217},{"krate":0,"index":5228},{"krate":0,"index":5241},{"krate":0,"index":5247},{"krate":0,"index":5252},{"krate":0,"index":5260},{"krate":0,"index":5266},{"krate":0,"index":5272},{"krate":0,"index":5279}],"decl_id":null,"docs":"# Bit View Adapters","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5196},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644197,"byte_end":644204,"line_start":14,"line_end":14,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":5197},{"krate":0,"index":5198},{"krate":0,"index":5200},{"krate":0,"index":5202},{"krate":0,"index":5204}],"decl_id":null,"docs":"# Bit View","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5197},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644247,"byte_end":644252,"line_start":16,"line_end":16,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":5196},"children":[],"decl_id":null,"docs":" The underlying element type.\n","sig":null,"attributes":[{"value":"/ The underlying element type.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644208,"byte_end":644240,"line_start":15,"line_end":15,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5198},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644323,"byte_end":644332,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<Self::Store, O> where O: BitOrder","parent":{"krate":0,"index":5196},"children":[],"decl_id":null,"docs":" Views a memory region as an immutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Views a memory region as an immutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644266,"byte_end":644318,"line_start":18,"line_end":18,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5200},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644543,"byte_end":644556,"line_start":25,"line_end":25,"column_start":5,"column_end":18},"name":"try_view_bits","qualname":"::view::BitView::try_view_bits","value":"pub fn try_view_bits<O>(&Self)\n-> Result<&BitSlice<Self::Store, O>, BitSpanError<Self::Store>> where\nO: BitOrder","parent":{"krate":0,"index":5196},"children":[],"decl_id":null,"docs":" Attempts to view a memory region as an immutable bit-slice.","sig":null,"attributes":[{"value":"/ Attempts to view a memory region as an immutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644394,"byte_end":644457,"line_start":22,"line_end":22,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644459,"byte_end":644462,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ This may return an error if `self` is too long to view as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644464,"byte_end":644538,"line_start":24,"line_end":24,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5202},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644713,"byte_end":644726,"line_start":31,"line_end":31,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<Self::Store, O> where\nO: BitOrder","parent":{"krate":0,"index":5196},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644659,"byte_end":644708,"line_start":30,"line_end":30,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":5204},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644942,"byte_end":644959,"line_start":37,"line_end":37,"column_start":5,"column_end":22},"name":"try_view_bits_mut","qualname":"::view::BitView::try_view_bits_mut","value":"pub fn try_view_bits_mut<O>(&mut Self)\n-> Result<&mut BitSlice<Self::Store, O>, BitSpanError<Self::Store>> where\nO: BitOrder","parent":{"krate":0,"index":5196},"children":[],"decl_id":null,"docs":" Attempts to view a memory region as a mutable bit-slice.","sig":null,"attributes":[{"value":"/ Attempts to view a memory region as a mutable bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644796,"byte_end":644856,"line_start":34,"line_end":34,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644858,"byte_end":644861,"line_start":35,"line_end":35,"column_start":2,"column_end":5}},{"value":"/ This may return an error if `self` is too long to view as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":644863,"byte_end":644937,"line_start":36,"line_end":36,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":5241},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647153,"byte_end":647165,"line_start":141,"line_end":141,"column_start":11,"column_end":23},"name":"BitViewSized","qualname":"::view::BitViewSized","value":"BitViewSized: BitView + Sized","parent":null,"children":[{"krate":0,"index":5242},{"krate":0,"index":5243},{"krate":0,"index":5245},{"krate":0,"index":5246}],"decl_id":null,"docs":" Helper trait for scalars and arrays, but not slices.\n","sig":null,"attributes":[{"value":"/ Helper trait for scalars and arrays, but not slices.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647086,"byte_end":647142,"line_start":140,"line_end":140,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":5242},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647216,"byte_end":647220,"line_start":143,"line_end":143,"column_start":8,"column_end":12},"name":"ZERO","qualname":"::view::BitViewSized::ZERO","value":"Self","parent":{"krate":0,"index":5241},"children":[],"decl_id":null,"docs":" The zero constant.\n","sig":null,"attributes":[{"value":"/ The zero constant.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647186,"byte_end":647208,"line_start":142,"line_end":142,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5243},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647279,"byte_end":647292,"line_start":147,"line_end":147,"column_start":5,"column_end":18},"name":"into_bitarray","qualname":"::view::BitViewSized::into_bitarray","value":"pub fn into_bitarray<O>(Self) -> BitArray<Self, O> where O: BitOrder","parent":{"krate":0,"index":5241},"children":[],"decl_id":null,"docs":" Wraps `self` in a `BitArray`.\n","sig":null,"attributes":[{"value":"/ Wraps `self` in a `BitArray`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647230,"byte_end":647263,"line_start":145,"line_end":145,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647265,"byte_end":647274,"line_start":146,"line_end":146,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5245},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647422,"byte_end":647434,"line_start":153,"line_end":153,"column_start":5,"column_end":17},"name":"as_raw_slice","qualname":"::view::BitViewSized::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[Self::Store]","parent":{"krate":0,"index":5241},"children":[],"decl_id":null,"docs":" Views the type as a slice of its elements.\n","sig":null,"attributes":[{"value":"/ Views the type as a slice of its elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647371,"byte_end":647417,"line_start":152,"line_end":152,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5246},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647522,"byte_end":647538,"line_start":156,"line_end":156,"column_start":5,"column_end":21},"name":"as_raw_mut_slice","qualname":"::view::BitViewSized::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [Self::Store]","parent":{"krate":0,"index":5241},"children":[],"decl_id":null,"docs":" Views the type as a mutable slice of its elements.\n","sig":null,"attributes":[{"value":"/ Views the type as a mutable slice of its elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647463,"byte_end":647517,"line_start":155,"line_end":155,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":5260},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648167,"byte_end":648173,"line_start":192,"line_end":192,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":5262},{"krate":0,"index":5264}],"decl_id":null,"docs":"# Immutable Bit View","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5262},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648275,"byte_end":648282,"line_start":196,"line_end":196,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<T, O> where O: BitOrder","parent":{"krate":0,"index":5260},"children":[],"decl_id":null,"docs":" Views `self` as an immutable bit-slice region with the `O` ordering.\n","sig":null,"attributes":[{"value":"/ Views `self` as an immutable bit-slice region with the `O` ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648198,"byte_end":648270,"line_start":195,"line_end":195,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":5264},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648508,"byte_end":648519,"line_start":203,"line_end":203,"column_start":5,"column_end":16},"name":"try_as_bits","qualname":"::view::AsBits::try_as_bits","value":"pub fn try_as_bits<O>(&Self) -> Result<&BitSlice<T, O>, BitSpanError<T>> where\nO: BitOrder","parent":{"krate":0,"index":5260},"children":[],"decl_id":null,"docs":" Attempts to view `self` as an immutable bit-slice region with the `O`\n ordering.","sig":null,"attributes":[{"value":"/ Attempts to view `self` as an immutable bit-slice region with the `O`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648334,"byte_end":648407,"line_start":199,"line_end":199,"column_start":2,"column_end":75}},{"value":"/ ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648409,"byte_end":648422,"line_start":200,"line_end":200,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648424,"byte_end":648427,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ This may return an error if `self` is too long to view as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648429,"byte_end":648503,"line_start":202,"line_end":202,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":5266},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648657,"byte_end":648666,"line_start":208,"line_end":208,"column_start":11,"column_end":20},"name":"AsMutBits","qualname":"::view::AsMutBits","value":"AsMutBits<T>","parent":null,"children":[{"krate":0,"index":5268},{"krate":0,"index":5270}],"decl_id":null,"docs":"# Mutable Bit View","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5268},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648765,"byte_end":648776,"line_start":212,"line_end":212,"column_start":5,"column_end":16},"name":"as_mut_bits","qualname":"::view::AsMutBits::as_mut_bits","value":"pub fn as_mut_bits<O>(&mut Self) -> &mut BitSlice<T, O> where O: BitOrder","parent":{"krate":0,"index":5266},"children":[],"decl_id":null,"docs":" Views `self` as a mutable bit-slice region with the `O` ordering.\n","sig":null,"attributes":[{"value":"/ Views `self` as a mutable bit-slice region with the `O` ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648691,"byte_end":648760,"line_start":211,"line_end":211,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5270},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":649007,"byte_end":649022,"line_start":219,"line_end":219,"column_start":5,"column_end":20},"name":"try_as_mut_bits","qualname":"::view::AsMutBits::try_as_mut_bits","value":"pub fn try_as_mut_bits<O>(&mut Self)\n-> Result<&mut BitSlice<T, O>, BitSpanError<T>> where O: BitOrder","parent":{"krate":0,"index":5266},"children":[],"decl_id":null,"docs":" Attempts to view `self` as a mutable bit-slice region with the `O`\n ordering.","sig":null,"attributes":[{"value":"/ Attempts to view `self` as a mutable bit-slice region with the `O`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648836,"byte_end":648906,"line_start":215,"line_end":215,"column_start":2,"column_end":72}},{"value":"/ ordering.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648908,"byte_end":648921,"line_start":216,"line_end":216,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648923,"byte_end":648926,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ This may return an error if `self` is too long to view as a bit-slice.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":648928,"byte_end":649002,"line_start":218,"line_end":218,"column_start":2,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":5286},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":761,"byte_end":768,"line_start":43,"line_end":43,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":5287},{"krate":0,"index":5288},{"krate":0,"index":5291},{"krate":0,"index":5294},{"krate":0,"index":5297},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5304},{"krate":0,"index":5305},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5310},{"krate":0,"index":5311},{"krate":0,"index":5313},{"krate":0,"index":5314},{"krate":0,"index":5317},{"krate":0,"index":5320},{"krate":0,"index":5323},{"krate":0,"index":5326},{"krate":0,"index":5329},{"krate":0,"index":5330},{"krate":0,"index":5333},{"krate":0,"index":5336},{"krate":0,"index":5339},{"krate":0,"index":5342},{"krate":0,"index":5345},{"krate":0,"index":5346},{"krate":0,"index":5349},{"krate":0,"index":5352},{"krate":0,"index":5355}],"decl_id":null,"docs":"# Symbol Export","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56905,"byte_end":56906,"line_start":168,"line_end":168,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62324,"byte_end":62332,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":64270,"byte_end":64278,"line_start":26,"line_end":26,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65752,"byte_end":65760,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67701,"byte_end":67709,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67924,"byte_end":67932,"line_start":177,"line_end":177,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5424},{"krate":0,"index":217},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68269,"byte_end":68277,"line_start":197,"line_end":197,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68596,"byte_end":68604,"line_start":213,"line_end":213,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68742,"byte_end":68750,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69175,"byte_end":69183,"line_start":26,"line_end":26,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69411,"byte_end":69419,"line_start":38,"line_end":38,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69604,"byte_end":69612,"line_start":49,"line_end":49,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69850,"byte_end":69858,"line_start":64,"line_end":64,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70114,"byte_end":70122,"line_start":77,"line_end":77,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70348,"byte_end":70356,"line_start":89,"line_end":89,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70539,"byte_end":70547,"line_start":100,"line_end":100,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70782,"byte_end":70790,"line_start":115,"line_end":115,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71045,"byte_end":71053,"line_start":128,"line_end":128,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71281,"byte_end":71289,"line_start":140,"line_end":140,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71474,"byte_end":71482,"line_start":151,"line_end":151,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71720,"byte_end":71728,"line_start":166,"line_end":166,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71931,"byte_end":71939,"line_start":178,"line_end":178,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72123,"byte_end":72131,"line_start":191,"line_end":191,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72299,"byte_end":72307,"line_start":202,"line_end":202,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72581,"byte_end":72589,"line_start":216,"line_end":216,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72808,"byte_end":72816,"line_start":228,"line_end":228,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77023,"byte_end":77031,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77241,"byte_end":77249,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77417,"byte_end":77425,"line_start":59,"line_end":59,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77696,"byte_end":77704,"line_start":76,"line_end":76,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77804,"byte_end":77812,"line_start":84,"line_end":84,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78051,"byte_end":78059,"line_start":96,"line_end":96,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78299,"byte_end":78307,"line_start":110,"line_end":110,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78568,"byte_end":78576,"line_start":124,"line_end":124,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78835,"byte_end":78843,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79140,"byte_end":79148,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79354,"byte_end":79362,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79559,"byte_end":79567,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79724,"byte_end":79732,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":80762,"byte_end":80770,"line_start":237,"line_end":237,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":80892,"byte_end":80900,"line_start":248,"line_end":248,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81264,"byte_end":81272,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81445,"byte_end":81453,"line_start":283,"line_end":283,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81531,"byte_end":81539,"line_start":290,"line_end":290,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81781,"byte_end":81801,"line_start":302,"line_end":302,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82052,"byte_end":82072,"line_start":314,"line_end":314,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82432,"byte_end":82452,"line_start":328,"line_end":328,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82939,"byte_end":82959,"line_start":347,"line_end":347,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":83420,"byte_end":83430,"line_start":363,"line_end":363,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60373,"byte_end":60381,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95535,"byte_end":95541,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":99611,"byte_end":99617,"line_start":24,"line_end":24,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100183,"byte_end":100191,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101885,"byte_end":101893,"line_start":123,"line_end":123,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102065,"byte_end":102073,"line_start":135,"line_end":135,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102365,"byte_end":102373,"line_start":151,"line_end":151,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102584,"byte_end":102592,"line_start":164,"line_end":164,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":5485},{"krate":0,"index":5486},{"krate":0,"index":5487},{"krate":0,"index":713},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103009,"byte_end":103017,"line_start":188,"line_end":188,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103416,"byte_end":103424,"line_start":208,"line_end":208,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103557,"byte_end":103565,"line_start":219,"line_end":219,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103769,"byte_end":103777,"line_start":228,"line_end":228,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103940,"byte_end":103948,"line_start":236,"line_end":236,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104395,"byte_end":104403,"line_start":28,"line_end":28,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104616,"byte_end":104624,"line_start":40,"line_end":40,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104796,"byte_end":104802,"line_start":51,"line_end":51,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105029,"byte_end":105035,"line_start":66,"line_end":66,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105278,"byte_end":105286,"line_start":79,"line_end":79,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105497,"byte_end":105505,"line_start":91,"line_end":91,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105675,"byte_end":105681,"line_start":102,"line_end":102,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105905,"byte_end":105911,"line_start":117,"line_end":117,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106153,"byte_end":106161,"line_start":130,"line_end":130,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106374,"byte_end":106382,"line_start":142,"line_end":142,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106554,"byte_end":106560,"line_start":153,"line_end":153,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106787,"byte_end":106793,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106985,"byte_end":106991,"line_start":180,"line_end":180,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107164,"byte_end":107170,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107323,"byte_end":107329,"line_start":204,"line_end":204,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107527,"byte_end":107533,"line_start":216,"line_end":216,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107820,"byte_end":107826,"line_start":231,"line_end":231,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":108034,"byte_end":108040,"line_start":243,"line_end":243,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112589,"byte_end":112595,"line_start":40,"line_end":40,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112787,"byte_end":112793,"line_start":52,"line_end":52,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112981,"byte_end":112987,"line_start":64,"line_end":64,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113170,"byte_end":113176,"line_start":76,"line_end":76,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113272,"byte_end":113278,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113514,"byte_end":113522,"line_start":96,"line_end":96,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114293,"byte_end":114299,"line_start":138,"line_end":138,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114551,"byte_end":114559,"line_start":151,"line_end":151,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114834,"byte_end":114840,"line_start":165,"line_end":165,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":115732,"byte_end":115738,"line_start":206,"line_end":206,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":115926,"byte_end":115932,"line_start":218,"line_end":218,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116104,"byte_end":116110,"line_start":229,"line_end":229,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116283,"byte_end":116289,"line_start":240,"line_end":240,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116478,"byte_end":116484,"line_start":251,"line_end":251,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116740,"byte_end":116746,"line_start":265,"line_end":265,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116930,"byte_end":116936,"line_start":276,"line_end":276,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117094,"byte_end":117097,"line_start":287,"line_end":287,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117250,"byte_end":117256,"line_start":298,"line_end":298,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117461,"byte_end":117467,"line_start":311,"line_end":311,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117621,"byte_end":117627,"line_start":322,"line_end":322,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118006,"byte_end":118012,"line_start":346,"line_end":346,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118275,"byte_end":118281,"line_start":360,"line_end":360,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118454,"byte_end":118460,"line_start":372,"line_end":372,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118533,"byte_end":118539,"line_start":379,"line_end":379,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118606,"byte_end":118612,"line_start":386,"line_end":386,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84600,"byte_end":84606,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121516,"byte_end":121525,"line_start":114,"line_end":114,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122477,"byte_end":122486,"line_start":153,"line_end":153,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122932,"byte_end":122941,"line_start":173,"line_end":173,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":123721,"byte_end":123730,"line_start":207,"line_end":207,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":123856,"byte_end":123865,"line_start":218,"line_end":218,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125677,"byte_end":125683,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":128271,"byte_end":128277,"line_start":356,"line_end":356,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":131948,"byte_end":131954,"line_start":510,"line_end":510,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":132319,"byte_end":132325,"line_start":529,"line_end":529,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133025,"byte_end":133031,"line_start":562,"line_end":562,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133161,"byte_end":133167,"line_start":573,"line_end":573,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133794,"byte_end":133800,"line_start":603,"line_end":603,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134407,"byte_end":134413,"line_start":631,"line_end":631,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134699,"byte_end":134705,"line_start":647,"line_end":647,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134782,"byte_end":134788,"line_start":654,"line_end":654,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":136345,"byte_end":136359,"line_start":716,"line_end":716,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138523,"byte_end":138537,"line_start":807,"line_end":807,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140359,"byte_end":140373,"line_start":875,"line_end":875,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140879,"byte_end":140893,"line_start":893,"line_end":893,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141064,"byte_end":141078,"line_start":905,"line_end":905,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141605,"byte_end":141619,"line_start":930,"line_end":930,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141893,"byte_end":141907,"line_start":946,"line_end":946,"column_start":21,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field/io.rs","byte_start":163147,"byte_end":163153,"line_start":71,"line_end":71,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field/io.rs","byte_start":163551,"byte_end":163557,"line_start":88,"line_end":88,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":149178,"byte_end":149186,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1532},{"krate":0,"index":1535},{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":152546,"byte_end":152554,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":156108,"byte_end":156116,"line_start":392,"line_end":392,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":157325,"byte_end":157331,"line_start":445,"line_end":445,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":157932,"byte_end":157938,"line_start":478,"line_end":478,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":171905,"byte_end":171911,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179411,"byte_end":179417,"line_start":300,"line_end":300,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179586,"byte_end":179592,"line_start":309,"line_end":309,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179770,"byte_end":179776,"line_start":318,"line_end":318,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180274,"byte_end":180285,"line_start":341,"line_end":341,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1691},{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181069,"byte_end":181080,"line_start":379,"line_end":379,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181298,"byte_end":181309,"line_start":389,"line_end":389,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1698}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181604,"byte_end":181615,"line_start":405,"line_end":405,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182003,"byte_end":182009,"line_start":420,"line_end":420,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186113,"byte_end":186119,"line_start":569,"line_end":569,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186292,"byte_end":186298,"line_start":578,"line_end":578,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186476,"byte_end":186482,"line_start":587,"line_end":587,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187012,"byte_end":187018,"line_start":610,"line_end":610,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189481,"byte_end":189487,"line_start":710,"line_end":710,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189656,"byte_end":189662,"line_start":719,"line_end":719,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189840,"byte_end":189846,"line_start":728,"line_end":728,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190261,"byte_end":190267,"line_start":748,"line_end":748,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192088,"byte_end":192094,"line_start":819,"line_end":819,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192270,"byte_end":192276,"line_start":828,"line_end":828,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192454,"byte_end":192460,"line_start":837,"line_end":837,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192841,"byte_end":192848,"line_start":856,"line_end":856,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194962,"byte_end":194969,"line_start":947,"line_end":947,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195146,"byte_end":195153,"line_start":956,"line_end":956,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195332,"byte_end":195339,"line_start":965,"line_end":965,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1776}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195488,"byte_end":195495,"line_start":974,"line_end":974,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195667,"byte_end":195674,"line_start":984,"line_end":984,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195843,"byte_end":195850,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1787},{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":196013,"byte_end":196020,"line_start":1010,"line_end":1010,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1791},{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":213103,"byte_end":213107,"line_start":124,"line_end":124,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1859},{"krate":0,"index":1861},{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":214377,"byte_end":214381,"line_start":171,"line_end":171,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232629,"byte_end":232642,"line_start":131,"line_end":131,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232979,"byte_end":232992,"line_start":140,"line_end":140,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1999}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233226,"byte_end":233239,"line_start":151,"line_end":151,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233548,"byte_end":233561,"line_start":165,"line_end":165,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233593,"byte_end":233606,"line_start":167,"line_end":167,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233668,"byte_end":233681,"line_start":170,"line_end":170,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234776,"byte_end":234782,"line_start":63,"line_end":63,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236151,"byte_end":236157,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237386,"byte_end":237392,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237530,"byte_end":237536,"line_start":184,"line_end":184,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237658,"byte_end":237664,"line_start":193,"line_end":193,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237923,"byte_end":237929,"line_start":207,"line_end":207,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":238220,"byte_end":238226,"line_start":223,"line_end":223,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2129}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":238666,"byte_end":238672,"line_start":249,"line_end":249,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239150,"byte_end":239156,"line_start":276,"line_end":276,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239485,"byte_end":239491,"line_start":295,"line_end":295,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239736,"byte_end":239742,"line_start":308,"line_end":308,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239983,"byte_end":239989,"line_start":321,"line_end":321,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240172,"byte_end":240178,"line_start":334,"line_end":334,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240325,"byte_end":240331,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240628,"byte_end":240634,"line_start":359,"line_end":359,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240859,"byte_end":240865,"line_start":372,"line_end":372,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241089,"byte_end":241095,"line_start":385,"line_end":385,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241363,"byte_end":241369,"line_start":399,"line_end":399,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241475,"byte_end":241481,"line_start":407,"line_end":407,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241750,"byte_end":241756,"line_start":420,"line_end":420,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2206}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241934,"byte_end":241940,"line_start":434,"line_end":434,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":242097,"byte_end":242103,"line_start":445,"line_end":445,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":242428,"byte_end":242434,"line_start":463,"line_end":463,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2221}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243851,"byte_end":243862,"line_start":62,"line_end":62,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":247786,"byte_end":247797,"line_start":204,"line_end":204,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":247943,"byte_end":247954,"line_start":216,"line_end":216,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248082,"byte_end":248093,"line_start":225,"line_end":225,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2317}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248482,"byte_end":248493,"line_start":243,"line_end":243,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248688,"byte_end":248699,"line_start":256,"line_end":256,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248930,"byte_end":248935,"line_start":269,"line_end":269,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249146,"byte_end":249157,"line_start":282,"line_end":282,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2337}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249519,"byte_end":249530,"line_start":298,"line_end":298,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249739,"byte_end":249750,"line_start":312,"line_end":312,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5896},{"krate":0,"index":2349},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250242,"byte_end":250253,"line_start":341,"line_end":341,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2355},{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250720,"byte_end":250731,"line_start":367,"line_end":367,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250925,"byte_end":250936,"line_start":379,"line_end":379,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":251079,"byte_end":251090,"line_start":388,"line_end":388,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2371}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252537,"byte_end":252543,"line_start":79,"line_end":79,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259119,"byte_end":259125,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260081,"byte_end":260087,"line_start":350,"line_end":350,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261667,"byte_end":261673,"line_start":398,"line_end":398,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279864,"byte_end":279870,"line_start":939,"line_end":939,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287521,"byte_end":287527,"line_start":1191,"line_end":1191,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288033,"byte_end":288039,"line_start":1209,"line_end":1209,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288215,"byte_end":288221,"line_start":1224,"line_end":1224,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288308,"byte_end":288314,"line_start":1232,"line_end":1232,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288605,"byte_end":288611,"line_start":1246,"line_end":1246,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2596}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289038,"byte_end":289044,"line_start":1265,"line_end":1265,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2603}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289580,"byte_end":289586,"line_start":1290,"line_end":1290,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2607}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289764,"byte_end":289770,"line_start":1302,"line_end":1302,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2611}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289924,"byte_end":289930,"line_start":1313,"line_end":1313,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290217,"byte_end":290223,"line_start":1328,"line_end":1328,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2621},{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290497,"byte_end":290503,"line_start":1343,"line_end":1343,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2628}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290798,"byte_end":290804,"line_start":1362,"line_end":1362,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2633}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291101,"byte_end":291107,"line_start":1378,"line_end":1378,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291317,"byte_end":291323,"line_start":1392,"line_end":1392,"column_start":24,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291846,"byte_end":291857,"line_start":1413,"line_end":1413,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292026,"byte_end":292037,"line_start":1423,"line_end":1423,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2649}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292185,"byte_end":292196,"line_start":1433,"line_end":1433,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2652}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292461,"byte_end":292472,"line_start":1446,"line_end":1446,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":293695,"byte_end":293702,"line_start":77,"line_end":77,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2781}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":295775,"byte_end":295782,"line_start":125,"line_end":125,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":299056,"byte_end":299063,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":302951,"byte_end":302958,"line_start":381,"line_end":381,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2804},{"krate":0,"index":2805}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":304014,"byte_end":304021,"line_start":425,"line_end":425,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2824}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":308426,"byte_end":308433,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2829}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":308916,"byte_end":308923,"line_start":587,"line_end":587,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2833},{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":309620,"byte_end":309627,"line_start":613,"line_end":613,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2840},{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":311614,"byte_end":311621,"line_start":682,"line_end":682,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":311793,"byte_end":311800,"line_start":694,"line_end":694,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312289,"byte_end":312296,"line_start":713,"line_end":713,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312478,"byte_end":312485,"line_start":724,"line_end":724,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2863}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312689,"byte_end":312696,"line_start":736,"line_end":736,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2868}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312837,"byte_end":312844,"line_start":748,"line_end":748,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313035,"byte_end":313042,"line_start":760,"line_end":760,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2878}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313374,"byte_end":313381,"line_start":777,"line_end":777,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313977,"byte_end":313989,"line_start":801,"line_end":801,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314258,"byte_end":314270,"line_start":814,"line_end":814,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2888}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314426,"byte_end":314438,"line_start":824,"line_end":824,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2891}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314986,"byte_end":314998,"line_start":844,"line_end":844,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2894}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315588,"byte_end":315600,"line_start":869,"line_end":869,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315650,"byte_end":315662,"line_start":871,"line_end":871,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315742,"byte_end":315754,"line_start":874,"line_end":874,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374292,"byte_end":374300,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3236},{"krate":0,"index":3237},{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3249},{"krate":0,"index":3252},{"krate":0,"index":3255},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271},{"krate":0,"index":3272},{"krate":0,"index":3273},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3279},{"krate":0,"index":3281},{"krate":0,"index":3283},{"krate":0,"index":3285},{"krate":0,"index":3287},{"krate":0,"index":3289},{"krate":0,"index":3291},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3297},{"krate":0,"index":3301},{"krate":0,"index":3305},{"krate":0,"index":3309},{"krate":0,"index":3312},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3326},{"krate":0,"index":3329},{"krate":0,"index":3331}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444638,"byte_end":444646,"line_start":2360,"line_end":2360,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3336},{"krate":0,"index":3337}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":454095,"byte_end":454104,"line_start":2741,"line_end":2741,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3390},{"krate":0,"index":3391},{"krate":0,"index":3392}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456403,"byte_end":456407,"line_start":89,"line_end":89,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3485},{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460687,"byte_end":460691,"line_start":231,"line_end":231,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3490}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460998,"byte_end":461002,"line_start":247,"line_end":247,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":461259,"byte_end":461263,"line_start":260,"line_end":260,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3498}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462035,"byte_end":462042,"line_start":288,"line_end":288,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511},{"krate":0,"index":3512},{"krate":0,"index":3513}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464779,"byte_end":464786,"line_start":381,"line_end":381,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3517}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":465053,"byte_end":465060,"line_start":394,"line_end":394,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3521}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":475996,"byte_end":476007,"line_start":860,"line_end":860,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3538},{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478388,"byte_end":478402,"line_start":962,"line_end":962,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3544},{"krate":0,"index":3545},{"krate":0,"index":3546}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486360,"byte_end":486372,"line_start":1272,"line_end":1272,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3551},{"krate":0,"index":3552}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":488857,"byte_end":488872,"line_start":1374,"line_end":1374,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3557},{"krate":0,"index":3558},{"krate":0,"index":3559}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":505755,"byte_end":505763,"line_start":2119,"line_end":2119,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":506017,"byte_end":506025,"line_start":2134,"line_end":2134,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3611}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":506193,"byte_end":506201,"line_start":2148,"line_end":2148,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3615},{"krate":0,"index":6951},{"krate":0,"index":6952},{"krate":0,"index":6953},{"krate":0,"index":3616}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507078,"byte_end":507086,"line_start":2188,"line_end":2188,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3621}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507685,"byte_end":507693,"line_start":2219,"line_end":2219,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3626}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507838,"byte_end":507846,"line_start":2230,"line_end":2230,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508298,"byte_end":508307,"line_start":2251,"line_end":2251,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3634}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508550,"byte_end":508559,"line_start":2265,"line_end":2265,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3638}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508727,"byte_end":508736,"line_start":2279,"line_end":2279,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3642},{"krate":0,"index":7003},{"krate":0,"index":7004},{"krate":0,"index":7005},{"krate":0,"index":3643}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":509422,"byte_end":509431,"line_start":2316,"line_end":2316,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3648}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510033,"byte_end":510042,"line_start":2347,"line_end":2347,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3653}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510188,"byte_end":510197,"line_start":2358,"line_end":2358,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515832,"byte_end":515853,"line_start":2553,"line_end":2553,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3662},{"krate":0,"index":3663}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516418,"byte_end":516440,"line_start":2575,"line_end":2575,"column_start":16,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3668},{"krate":0,"index":3669}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":517432,"byte_end":517440,"line_start":35,"line_end":35,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3746}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":518271,"byte_end":518279,"line_start":67,"line_end":67,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3752}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":519028,"byte_end":519036,"line_start":96,"line_end":96,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":519765,"byte_end":519773,"line_start":125,"line_end":125,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3762},{"krate":0,"index":3763}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization/lsb0.rs","byte_start":524282,"byte_end":524290,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3836},{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3842},{"krate":0,"index":3844},{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3848}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization/msb0.rs","byte_start":532532,"byte_end":532540,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3894},{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3900},{"krate":0,"index":3902},{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3906}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization.rs","byte_start":522609,"byte_end":522617,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3919}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549316,"byte_end":549324,"line_start":44,"line_end":44,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4006}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549538,"byte_end":549546,"line_start":56,"line_end":56,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4010}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549743,"byte_end":549751,"line_start":68,"line_end":68,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549892,"byte_end":549900,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":550505,"byte_end":550513,"line_start":97,"line_end":97,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4023}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":551590,"byte_end":551598,"line_start":157,"line_end":157,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4042}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":551816,"byte_end":551824,"line_start":170,"line_end":170,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4048}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":552494,"byte_end":552502,"line_start":192,"line_end":192,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4054}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":553558,"byte_end":553566,"line_start":242,"line_end":242,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4072}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":553824,"byte_end":553832,"line_start":255,"line_end":255,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4078}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556230,"byte_end":556238,"line_start":363,"line_end":363,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4116}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556472,"byte_end":556480,"line_start":376,"line_end":376,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4120}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556714,"byte_end":556722,"line_start":389,"line_end":389,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4125}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560098,"byte_end":560106,"line_start":532,"line_end":532,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4137}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560360,"byte_end":560368,"line_start":545,"line_end":545,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560503,"byte_end":560511,"line_start":553,"line_end":553,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560663,"byte_end":560671,"line_start":561,"line_end":561,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560877,"byte_end":560885,"line_start":571,"line_end":571,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4152},{"krate":0,"index":4153}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325306,"byte_end":325314,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4166},{"krate":0,"index":4168},{"krate":0,"index":4170},{"krate":0,"index":4171},{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4176},{"krate":0,"index":4177}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335055,"byte_end":335063,"line_start":433,"line_end":433,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4181},{"krate":0,"index":4182},{"krate":0,"index":4183},{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4188},{"krate":0,"index":4189}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342798,"byte_end":342806,"line_start":721,"line_end":721,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4198},{"krate":0,"index":4199},{"krate":0,"index":4200},{"krate":0,"index":4201},{"krate":0,"index":4202},{"krate":0,"index":4203},{"krate":0,"index":4205}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349872,"byte_end":349880,"line_start":986,"line_end":986,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4210},{"krate":0,"index":4211},{"krate":0,"index":4212},{"krate":0,"index":4213}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351993,"byte_end":352001,"line_start":1044,"line_end":1044,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4217},{"krate":0,"index":4221},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4233},{"krate":0,"index":4235},{"krate":0,"index":4237},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362140,"byte_end":362148,"line_start":1433,"line_end":1433,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4247},{"krate":0,"index":4248}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365667,"byte_end":365675,"line_start":1556,"line_end":1556,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368185,"byte_end":368193,"line_start":1637,"line_end":1637,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4262},{"krate":0,"index":4263}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370582,"byte_end":370590,"line_start":1721,"line_end":1721,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4267},{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371959,"byte_end":371967,"line_start":1755,"line_end":1755,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4272}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588586,"byte_end":588592,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4469},{"krate":0,"index":4470},{"krate":0,"index":4471},{"krate":0,"index":4472},{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4475},{"krate":0,"index":4476},{"krate":0,"index":4478},{"krate":0,"index":4479},{"krate":0,"index":4480},{"krate":0,"index":4481},{"krate":0,"index":4482},{"krate":0,"index":4483},{"krate":0,"index":4484},{"krate":0,"index":4485},{"krate":0,"index":4486},{"krate":0,"index":4487},{"krate":0,"index":4488},{"krate":0,"index":4490},{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4496},{"krate":0,"index":4498},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4504},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4510},{"krate":0,"index":4512}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":615529,"byte_end":615535,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4596}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":616493,"byte_end":616499,"line_start":82,"line_end":82,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4604}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":616831,"byte_end":616837,"line_start":96,"line_end":96,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4613}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617110,"byte_end":617116,"line_start":111,"line_end":111,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4619}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617572,"byte_end":617578,"line_start":129,"line_end":129,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4626}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617944,"byte_end":617950,"line_start":147,"line_end":147,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4631}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618199,"byte_end":618205,"line_start":160,"line_end":160,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4638}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618554,"byte_end":618560,"line_start":175,"line_end":175,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4647}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618876,"byte_end":618882,"line_start":191,"line_end":191,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4653}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":619141,"byte_end":619147,"line_start":204,"line_end":204,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4659}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":619476,"byte_end":619482,"line_start":220,"line_end":220,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4664},{"krate":0,"index":4665},{"krate":0,"index":4666}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":621130,"byte_end":621135,"line_start":282,"line_end":282,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4692},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696},{"krate":0,"index":4698}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":624776,"byte_end":624781,"line_start":411,"line_end":411,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4702}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":624957,"byte_end":624962,"line_start":423,"line_end":423,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4706}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":625281,"byte_end":625286,"line_start":436,"line_end":436,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4710},{"krate":0,"index":7826},{"krate":0,"index":7827},{"krate":0,"index":7828},{"krate":0,"index":4711},{"krate":0,"index":4713}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":625761,"byte_end":625766,"line_start":458,"line_end":458,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4718},{"krate":0,"index":4720}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626221,"byte_end":626226,"line_start":476,"line_end":476,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4725}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626453,"byte_end":626458,"line_start":488,"line_end":488,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626663,"byte_end":626668,"line_start":497,"line_end":497,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626864,"byte_end":626869,"line_start":506,"line_end":506,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":627042,"byte_end":627047,"line_start":515,"line_end":515,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4739}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628047,"byte_end":628053,"line_start":562,"line_end":562,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4745}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628409,"byte_end":628415,"line_start":578,"line_end":578,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4751},{"krate":0,"index":7867},{"krate":0,"index":7868},{"krate":0,"index":7869},{"krate":0,"index":4752}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628882,"byte_end":628888,"line_start":602,"line_end":602,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4758},{"krate":0,"index":4759}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629221,"byte_end":629227,"line_start":620,"line_end":620,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4764}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629398,"byte_end":629404,"line_start":632,"line_end":632,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629587,"byte_end":629593,"line_start":641,"line_end":641,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4773}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631142,"byte_end":631150,"line_start":31,"line_end":31,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631363,"byte_end":631371,"line_start":43,"line_end":43,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4839}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631574,"byte_end":631580,"line_start":55,"line_end":55,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4844},{"krate":0,"index":4845}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631838,"byte_end":631844,"line_start":71,"line_end":71,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4850}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632087,"byte_end":632095,"line_start":84,"line_end":84,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4854}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632306,"byte_end":632314,"line_start":96,"line_end":96,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4858}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632515,"byte_end":632521,"line_start":108,"line_end":108,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4863},{"krate":0,"index":4864}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632776,"byte_end":632782,"line_start":124,"line_end":124,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4869}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633024,"byte_end":633032,"line_start":137,"line_end":137,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4873}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633245,"byte_end":633253,"line_start":149,"line_end":149,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4877}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633456,"byte_end":633462,"line_start":161,"line_end":161,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4882},{"krate":0,"index":4883}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633720,"byte_end":633726,"line_start":177,"line_end":177,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4888}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633918,"byte_end":633924,"line_start":189,"line_end":189,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4892},{"krate":0,"index":4893}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634097,"byte_end":634103,"line_start":202,"line_end":202,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4897}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634256,"byte_end":634262,"line_start":213,"line_end":213,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4901}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634523,"byte_end":634529,"line_start":227,"line_end":227,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4907},{"krate":0,"index":4908}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634816,"byte_end":634822,"line_start":242,"line_end":242,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4913}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":635210,"byte_end":635216,"line_start":258,"line_end":258,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4917},{"krate":0,"index":4918}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":637726,"byte_end":637732,"line_start":41,"line_end":41,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4993}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":637924,"byte_end":637930,"line_start":53,"line_end":53,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4997}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638118,"byte_end":638124,"line_start":65,"line_end":65,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5001}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638271,"byte_end":638277,"line_start":76,"line_end":76,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638373,"byte_end":638379,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5008}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638615,"byte_end":638623,"line_start":96,"line_end":96,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5014}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":639394,"byte_end":639400,"line_start":138,"line_end":138,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5031}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":639652,"byte_end":639660,"line_start":151,"line_end":151,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5037}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":640553,"byte_end":640559,"line_start":193,"line_end":193,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5056}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":640833,"byte_end":640839,"line_start":206,"line_end":206,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5060}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641027,"byte_end":641033,"line_start":218,"line_end":218,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5064}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641231,"byte_end":641237,"line_start":230,"line_end":230,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5068}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641399,"byte_end":641405,"line_start":242,"line_end":242,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5072}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641580,"byte_end":641586,"line_start":254,"line_end":254,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5076}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641793,"byte_end":641799,"line_start":266,"line_end":266,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5080}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642002,"byte_end":642008,"line_start":278,"line_end":278,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5084}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642219,"byte_end":642225,"line_start":290,"line_end":290,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5088}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642412,"byte_end":642415,"line_start":302,"line_end":302,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5092}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642605,"byte_end":642611,"line_start":314,"line_end":314,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5097}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642806,"byte_end":642812,"line_start":326,"line_end":326,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5101},{"krate":0,"index":5102}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643032,"byte_end":643038,"line_start":340,"line_end":340,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5106}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643157,"byte_end":643163,"line_start":351,"line_end":351,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5110}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643587,"byte_end":643593,"line_start":378,"line_end":378,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5114}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643766,"byte_end":643772,"line_start":390,"line_end":390,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643845,"byte_end":643851,"line_start":397,"line_end":397,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643918,"byte_end":643924,"line_start":404,"line_end":404,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570996,"byte_end":571002,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5133},{"krate":0,"index":5134},{"krate":0,"index":5136},{"krate":0,"index":5137},{"krate":0,"index":5138},{"krate":0,"index":5139},{"krate":0,"index":5140},{"krate":0,"index":5141},{"krate":0,"index":5144},{"krate":0,"index":5147}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577775,"byte_end":577781,"line_start":308,"line_end":308,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5151},{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155},{"krate":0,"index":5156},{"krate":0,"index":5157},{"krate":0,"index":5158}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581173,"byte_end":581179,"line_start":436,"line_end":436,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5162},{"krate":0,"index":5164},{"krate":0,"index":5165},{"krate":0,"index":5166},{"krate":0,"index":5167},{"krate":0,"index":5168},{"krate":0,"index":5169},{"krate":0,"index":5173}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":645122,"byte_end":645123,"line_start":44,"line_end":44,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5211},{"krate":0,"index":5213},{"krate":0,"index":5215}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647601,"byte_end":647602,"line_start":159,"line_end":159,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5249},{"krate":0,"index":5250},{"krate":0,"index":5251}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":649170,"byte_end":649171,"line_start":226,"line_end":226,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5275},{"krate":0,"index":5277}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":649524,"byte_end":649525,"line_start":245,"line_end":245,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5282},{"krate":0,"index":5284}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":498,"byte_end":504,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/macros.rs","byte_start":3698,"byte_end":3706,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":515,"byte_end":521,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":57}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":531,"byte_end":536,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":97}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":546,"byte_end":551,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":554}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":561,"byte_end":567,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1110}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":577,"byte_end":582,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1397}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":592,"byte_end":597,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1606}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":607,"byte_end":610,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1793}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":620,"byte_end":625,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1824}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":635,"byte_end":638,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1887}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":660,"byte_end":665,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3018}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":675,"byte_end":680,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4282}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":690,"byte_end":693,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4325}},{"kind":"Mod","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/lib.rs","byte_start":703,"byte_end":707,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":5176}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":52200,"byte_end":52206,"line_start":18,"line_end":18,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":21,"index":31},"to":{"krate":0,"index":81}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/access.rs","byte_start":56905,"byte_end":56906,"line_start":168,"line_end":168,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":90},"to":{"krate":0,"index":81}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/api.rs","byte_start":62324,"byte_end":62332,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":64270,"byte_end":64278,"line_start":26,"line_end":26,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":7783}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":65752,"byte_end":65760,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":5413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67701,"byte_end":67709,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":5413},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":67924,"byte_end":67932,"line_start":177,"line_end":177,"column_start":25,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":5413},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68269,"byte_end":68277,"line_start":197,"line_end":197,"column_start":36,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":5413},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68596,"byte_end":68604,"line_start":213,"line_end":213,"column_start":34,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":5413},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/iter.rs","byte_start":68742,"byte_end":68750,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":5413},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69175,"byte_end":69183,"line_start":26,"line_end":26,"column_start":45,"column_end":53},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69411,"byte_end":69419,"line_start":38,"line_end":38,"column_start":46,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69604,"byte_end":69612,"line_start":49,"line_end":49,"column_start":33,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3184}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":69850,"byte_end":69858,"line_start":64,"line_end":64,"column_start":39,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70114,"byte_end":70122,"line_start":77,"line_end":77,"column_start":44,"column_end":52},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70348,"byte_end":70356,"line_start":89,"line_end":89,"column_start":45,"column_end":53},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70539,"byte_end":70547,"line_start":100,"line_end":100,"column_start":32,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3189}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":70782,"byte_end":70790,"line_start":115,"line_end":115,"column_start":38,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71045,"byte_end":71053,"line_start":128,"line_end":128,"column_start":45,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71281,"byte_end":71289,"line_start":140,"line_end":140,"column_start":46,"column_end":54},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71474,"byte_end":71482,"line_start":151,"line_end":151,"column_start":33,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3194}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71720,"byte_end":71728,"line_start":166,"line_end":166,"column_start":39,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":71931,"byte_end":71939,"line_start":178,"line_end":178,"column_start":22,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72123,"byte_end":72131,"line_start":191,"line_end":191,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72299,"byte_end":72307,"line_start":202,"line_end":202,"column_start":32,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72581,"byte_end":72589,"line_start":216,"line_end":216,"column_start":35,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/ops.rs","byte_start":72808,"byte_end":72816,"line_start":228,"line_end":228,"column_start":20,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3177}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77023,"byte_end":77031,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2654}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77241,"byte_end":77249,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2657}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77417,"byte_end":77425,"line_start":59,"line_end":59,"column_start":22,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77696,"byte_end":77704,"line_start":76,"line_end":76,"column_start":19,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":77804,"byte_end":77812,"line_start":84,"line_end":84,"column_start":20,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78051,"byte_end":78059,"line_start":96,"line_end":96,"column_start":51,"column_end":59},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78299,"byte_end":78307,"line_start":110,"line_end":110,"column_start":36,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78568,"byte_end":78576,"line_start":124,"line_end":124,"column_start":46,"column_end":54},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":78835,"byte_end":78843,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79140,"byte_end":79148,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79354,"byte_end":79362,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79559,"byte_end":79567,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":79724,"byte_end":79732,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":2970}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":80762,"byte_end":80770,"line_start":237,"line_end":237,"column_start":24,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":80892,"byte_end":80900,"line_start":248,"line_end":248,"column_start":22,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81264,"byte_end":81272,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81445,"byte_end":81453,"line_start":283,"line_end":283,"column_start":21,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81531,"byte_end":81539,"line_start":290,"line_end":290,"column_start":22,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":536},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":81781,"byte_end":81801,"line_start":302,"line_end":302,"column_start":6,"column_end":26},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82052,"byte_end":82072,"line_start":314,"line_end":314,"column_start":16,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5445},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82432,"byte_end":82452,"line_start":328,"line_end":328,"column_start":18,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5445},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":82939,"byte_end":82959,"line_start":347,"line_end":347,"column_start":28,"column_end":48},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5445},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array/traits.rs","byte_start":83420,"byte_end":83430,"line_start":363,"line_end":363,"column_start":6,"column_end":16},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/array.rs","byte_start":60373,"byte_end":60381,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/api.rs","byte_start":95535,"byte_end":95541,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":99611,"byte_end":99617,"line_start":24,"line_end":24,"column_start":29,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":7783}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":100183,"byte_end":100191,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":101885,"byte_end":101893,"line_start":123,"line_end":123,"column_start":38,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102065,"byte_end":102073,"line_start":135,"line_end":135,"column_start":22,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102365,"byte_end":102373,"line_start":151,"line_end":151,"column_start":22,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":102584,"byte_end":102592,"line_start":164,"line_end":164,"column_start":25,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103009,"byte_end":103017,"line_start":188,"line_end":188,"column_start":36,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103416,"byte_end":103424,"line_start":208,"line_end":208,"column_start":34,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103557,"byte_end":103565,"line_start":219,"line_end":219,"column_start":30,"column_end":38},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103769,"byte_end":103777,"line_start":228,"line_end":228,"column_start":28,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/iter.rs","byte_start":103940,"byte_end":103948,"line_start":236,"line_end":236,"column_start":28,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104395,"byte_end":104403,"line_start":28,"line_end":28,"column_start":43,"column_end":51},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104616,"byte_end":104624,"line_start":40,"line_end":40,"column_start":44,"column_end":52},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":104796,"byte_end":104802,"line_start":51,"line_end":51,"column_start":33,"column_end":39},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3184}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105029,"byte_end":105035,"line_start":66,"line_end":66,"column_start":39,"column_end":45},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105278,"byte_end":105286,"line_start":79,"line_end":79,"column_start":42,"column_end":50},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105497,"byte_end":105505,"line_start":91,"line_end":91,"column_start":43,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105675,"byte_end":105681,"line_start":102,"line_end":102,"column_start":32,"column_end":38},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3189}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":105905,"byte_end":105911,"line_start":117,"line_end":117,"column_start":38,"column_end":44},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106153,"byte_end":106161,"line_start":130,"line_end":130,"column_start":43,"column_end":51},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106374,"byte_end":106382,"line_start":142,"line_end":142,"column_start":44,"column_end":52},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106554,"byte_end":106560,"line_start":153,"line_end":153,"column_start":33,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3194}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106787,"byte_end":106793,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":106985,"byte_end":106991,"line_start":180,"line_end":180,"column_start":22,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107164,"byte_end":107170,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107323,"byte_end":107329,"line_start":204,"line_end":204,"column_start":21,"column_end":27},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107527,"byte_end":107533,"line_start":216,"line_end":216,"column_start":32,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":107820,"byte_end":107826,"line_start":231,"line_end":231,"column_start":35,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/ops.rs","byte_start":108034,"byte_end":108040,"line_start":243,"line_end":243,"column_start":20,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3177}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112589,"byte_end":112595,"line_start":40,"line_end":40,"column_start":39,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2654}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112787,"byte_end":112793,"line_start":52,"line_end":52,"column_start":42,"column_end":48},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2657}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":112981,"byte_end":112987,"line_start":64,"line_end":64,"column_start":22,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113170,"byte_end":113176,"line_start":76,"line_end":76,"column_start":19,"column_end":25},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113272,"byte_end":113278,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":113514,"byte_end":113522,"line_start":96,"line_end":96,"column_start":52,"column_end":60},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114293,"byte_end":114299,"line_start":138,"line_end":138,"column_start":36,"column_end":42},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114551,"byte_end":114559,"line_start":151,"line_end":151,"column_start":53,"column_end":61},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":114834,"byte_end":114840,"line_start":165,"line_end":165,"column_start":37,"column_end":43},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":115732,"byte_end":115738,"line_start":206,"line_end":206,"column_start":38,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":115926,"byte_end":115932,"line_start":218,"line_end":218,"column_start":38,"column_end":44},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116104,"byte_end":116110,"line_start":229,"line_end":229,"column_start":41,"column_end":47},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116283,"byte_end":116289,"line_start":240,"line_end":240,"column_start":37,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116478,"byte_end":116484,"line_start":251,"line_end":251,"column_start":29,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116740,"byte_end":116746,"line_start":265,"line_end":265,"column_start":50,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":116930,"byte_end":116936,"line_start":276,"line_end":276,"column_start":35,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117094,"byte_end":117097,"line_start":287,"line_end":287,"column_start":35,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117250,"byte_end":117256,"line_start":298,"line_end":298,"column_start":34,"column_end":40},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":2970}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117461,"byte_end":117467,"line_start":311,"line_end":311,"column_start":24,"column_end":30},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":117621,"byte_end":117627,"line_start":322,"line_end":322,"column_start":22,"column_end":28},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118006,"byte_end":118012,"line_start":346,"line_end":346,"column_start":35,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118275,"byte_end":118281,"line_start":360,"line_end":360,"column_start":21,"column_end":27},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118454,"byte_end":118460,"line_start":372,"line_end":372,"column_start":28,"column_end":34},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118533,"byte_end":118539,"line_start":379,"line_end":379,"column_start":28,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed/traits.rs","byte_start":118606,"byte_end":118612,"line_start":386,"line_end":386,"column_start":22,"column_end":28},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1083},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/boxed.rs","byte_start":84600,"byte_end":84606,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":121516,"byte_end":121525,"line_start":114,"line_end":114,"column_start":19,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122477,"byte_end":122486,"line_start":153,"line_end":153,"column_start":31,"column_end":40},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1226},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":122932,"byte_end":122941,"line_start":173,"line_end":173,"column_start":29,"column_end":38},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1226},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":123721,"byte_end":123730,"line_start":207,"line_end":207,"column_start":22,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1226},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":123856,"byte_end":123865,"line_start":218,"line_end":218,"column_start":21,"column_end":30},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1226},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":125677,"byte_end":125683,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":128271,"byte_end":128277,"line_start":356,"line_end":356,"column_start":19,"column_end":25},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":131948,"byte_end":131954,"line_start":510,"line_end":510,"column_start":31,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":132319,"byte_end":132325,"line_start":529,"line_end":529,"column_start":29,"column_end":35},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133025,"byte_end":133031,"line_start":562,"line_end":562,"column_start":22,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133161,"byte_end":133167,"line_start":573,"line_end":573,"column_start":25,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":133794,"byte_end":133800,"line_start":603,"line_end":603,"column_start":36,"column_end":42},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134407,"byte_end":134413,"line_start":631,"line_end":631,"column_start":34,"column_end":40},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134699,"byte_end":134705,"line_start":647,"line_end":647,"column_start":30,"column_end":36},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":134782,"byte_end":134788,"line_start":654,"line_end":654,"column_start":21,"column_end":27},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":136345,"byte_end":136359,"line_start":716,"line_end":716,"column_start":19,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":138523,"byte_end":138537,"line_start":807,"line_end":807,"column_start":16,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140359,"byte_end":140373,"line_start":875,"line_end":875,"column_start":19,"column_end":33},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":140879,"byte_end":140893,"line_start":893,"line_end":893,"column_start":26,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141064,"byte_end":141078,"line_start":905,"line_end":905,"column_start":29,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141605,"byte_end":141619,"line_start":930,"line_end":930,"column_start":28,"column_end":42},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/domain.rs","byte_start":141893,"byte_end":141907,"line_start":946,"line_end":946,"column_start":21,"column_end":35},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field/io.rs","byte_start":163147,"byte_end":163153,"line_start":71,"line_end":71,"column_start":21,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5125},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field/io.rs","byte_start":163551,"byte_end":163557,"line_start":88,"line_end":88,"column_start":22,"column_end":28},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":5125},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":149178,"byte_end":149186,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4157},"to":{"krate":0,"index":1514}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":152546,"byte_end":152554,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4157},"to":{"krate":0,"index":1514}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":156108,"byte_end":156116,"line_start":392,"line_end":392,"column_start":25,"column_end":33},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":536},"to":{"krate":0,"index":1514}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":157325,"byte_end":157331,"line_start":445,"line_end":445,"column_start":25,"column_end":31},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1083},"to":{"krate":0,"index":1514}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/field.rs","byte_start":157932,"byte_end":157938,"line_start":478,"line_end":478,"column_start":25,"column_end":31},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":5125},"to":{"krate":0,"index":1514}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":171905,"byte_end":171911,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":5537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179411,"byte_end":179417,"line_start":300,"line_end":300,"column_start":20,"column_end":26},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":5537},"to":{"krate":2,"index":9689}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179586,"byte_end":179592,"line_start":309,"line_end":309,"column_start":19,"column_end":25},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5537},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":179770,"byte_end":179776,"line_start":318,"line_end":318,"column_start":21,"column_end":27},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5537},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":180274,"byte_end":180285,"line_start":341,"line_end":341,"column_start":9,"column_end":20},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181069,"byte_end":181080,"line_start":379,"line_end":379,"column_start":19,"column_end":30},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":5570},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181298,"byte_end":181309,"line_start":389,"line_end":389,"column_start":21,"column_end":32},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":5570},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":181604,"byte_end":181615,"line_start":405,"line_end":405,"column_start":31,"column_end":42},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":5570},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":182003,"byte_end":182009,"line_start":420,"line_end":420,"column_start":9,"column_end":15},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186113,"byte_end":186119,"line_start":569,"line_end":569,"column_start":20,"column_end":26},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5603},"to":{"krate":2,"index":9689}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186292,"byte_end":186298,"line_start":578,"line_end":578,"column_start":19,"column_end":25},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5603},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":186476,"byte_end":186482,"line_start":587,"line_end":587,"column_start":21,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":5603},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":187012,"byte_end":187018,"line_start":610,"line_end":610,"column_start":9,"column_end":15},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":5636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189481,"byte_end":189487,"line_start":710,"line_end":710,"column_start":20,"column_end":26},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":5636},"to":{"krate":2,"index":9689}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189656,"byte_end":189662,"line_start":719,"line_end":719,"column_start":19,"column_end":25},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":5636},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":189840,"byte_end":189846,"line_start":728,"line_end":728,"column_start":21,"column_end":27},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5636},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":190261,"byte_end":190267,"line_start":748,"line_end":748,"column_start":9,"column_end":15},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192088,"byte_end":192094,"line_start":819,"line_end":819,"column_start":20,"column_end":26},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5669},"to":{"krate":2,"index":9689}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192270,"byte_end":192276,"line_start":828,"line_end":828,"column_start":19,"column_end":25},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5669},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192454,"byte_end":192460,"line_start":837,"line_end":837,"column_start":21,"column_end":27},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5669},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":192841,"byte_end":192848,"line_start":856,"line_end":856,"column_start":9,"column_end":16},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":194962,"byte_end":194969,"line_start":947,"line_end":947,"column_start":20,"column_end":27},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":9689}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195146,"byte_end":195153,"line_start":956,"line_end":956,"column_start":19,"column_end":26},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195332,"byte_end":195339,"line_start":965,"line_end":965,"column_start":21,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195488,"byte_end":195495,"line_start":974,"line_end":974,"column_start":28,"column_end":35},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":7742}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195667,"byte_end":195674,"line_start":984,"line_end":984,"column_start":23,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":3184}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":195843,"byte_end":195850,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":3189}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/index.rs","byte_start":196013,"byte_end":196020,"line_start":1010,"line_end":1010,"column_start":17,"column_end":24},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":5701},"to":{"krate":2,"index":3177}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205154,"byte_end":205162,"line_start":12,"line_end":12,"column_start":24,"column_end":32},"kind":"SuperTrait","from":{"krate":20,"index":290},"to":{"krate":0,"index":1807}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/mem.rs","byte_start":205165,"byte_end":205171,"line_start":12,"line_end":12,"column_start":35,"column_end":41},"kind":"SuperTrait","from":{"krate":21,"index":52},"to":{"krate":0,"index":1807}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":213103,"byte_end":213107,"line_start":124,"line_end":124,"column_start":26,"column_end":30},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5821},"to":{"krate":0,"index":1849}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/order.rs","byte_start":214377,"byte_end":214381,"line_start":171,"line_end":171,"column_start":26,"column_end":30},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5843},"to":{"krate":0,"index":1849}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232629,"byte_end":232642,"line_start":131,"line_end":131,"column_start":9,"column_end":22},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":232979,"byte_end":232992,"line_start":140,"line_end":140,"column_start":19,"column_end":32},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233226,"byte_end":233239,"line_start":151,"line_end":151,"column_start":21,"column_end":34},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233548,"byte_end":233561,"line_start":165,"line_end":165,"column_start":25,"column_end":38},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233593,"byte_end":233606,"line_start":167,"line_end":167,"column_start":25,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":5865},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/addr.rs","byte_start":233668,"byte_end":233681,"line_start":170,"line_end":170,"column_start":31,"column_end":44},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":5865},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":234776,"byte_end":234782,"line_start":63,"line_end":63,"column_start":15,"column_end":21},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":236151,"byte_end":236157,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237386,"byte_end":237392,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237530,"byte_end":237536,"line_start":184,"line_end":184,"column_start":22,"column_end":28},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237658,"byte_end":237664,"line_start":193,"line_end":193,"column_start":23,"column_end":29},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":237923,"byte_end":237929,"line_start":207,"line_end":207,"column_start":6,"column_end":12},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":238220,"byte_end":238226,"line_start":223,"line_end":223,"column_start":35,"column_end":41},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":238666,"byte_end":238672,"line_start":249,"line_end":249,"column_start":36,"column_end":42},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239150,"byte_end":239156,"line_start":276,"line_end":276,"column_start":6,"column_end":12},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239485,"byte_end":239491,"line_start":295,"line_end":295,"column_start":36,"column_end":42},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239736,"byte_end":239742,"line_start":308,"line_end":308,"column_start":37,"column_end":43},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":239983,"byte_end":239989,"line_start":321,"line_end":321,"column_start":31,"column_end":37},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240172,"byte_end":240178,"line_start":334,"line_end":334,"column_start":28,"column_end":34},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240325,"byte_end":240331,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240628,"byte_end":240634,"line_start":359,"line_end":359,"column_start":27,"column_end":33},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":240859,"byte_end":240865,"line_start":372,"line_end":372,"column_start":27,"column_end":33},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":9695}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241089,"byte_end":241095,"line_start":385,"line_end":385,"column_start":24,"column_end":30},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241363,"byte_end":241369,"line_start":399,"line_end":399,"column_start":31,"column_end":37},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241475,"byte_end":241481,"line_start":407,"line_end":407,"column_start":31,"column_end":37},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241750,"byte_end":241756,"line_start":420,"line_end":420,"column_start":25,"column_end":31},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":241934,"byte_end":241940,"line_start":434,"line_end":434,"column_start":25,"column_end":31},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":242097,"byte_end":242103,"line_start":445,"line_end":445,"column_start":24,"column_end":30},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/proxy.rs","byte_start":242428,"byte_end":242434,"line_start":463,"line_end":463,"column_start":23,"column_end":29},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3177}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":243851,"byte_end":243862,"line_start":62,"line_end":62,"column_start":15,"column_end":26},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":247786,"byte_end":247797,"line_start":204,"line_end":204,"column_start":25,"column_end":36},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":247943,"byte_end":247954,"line_start":216,"line_end":216,"column_start":22,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248082,"byte_end":248093,"line_start":225,"line_end":225,"column_start":6,"column_end":17},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248482,"byte_end":248493,"line_start":243,"line_end":243,"column_start":27,"column_end":38},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248688,"byte_end":248699,"line_start":256,"line_end":256,"column_start":48,"column_end":59},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":248930,"byte_end":248935,"line_start":269,"line_end":269,"column_start":46,"column_end":51},"kind":{"Impl":{"id":206}},"from":{"krate":2,"index":44761},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249146,"byte_end":249157,"line_start":282,"line_end":282,"column_start":25,"column_end":36},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249519,"byte_end":249530,"line_start":298,"line_end":298,"column_start":24,"column_end":35},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":249739,"byte_end":249750,"line_start":312,"line_end":312,"column_start":28,"column_end":39},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250242,"byte_end":250253,"line_start":341,"line_end":341,"column_start":39,"column_end":50},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250720,"byte_end":250731,"line_start":367,"line_end":367,"column_start":37,"column_end":48},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":250925,"byte_end":250936,"line_start":379,"line_end":379,"column_start":33,"column_end":44},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/range.rs","byte_start":251079,"byte_end":251090,"line_start":388,"line_end":388,"column_start":48,"column_end":59},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2282},"to":{"krate":2,"index":3432}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":252537,"byte_end":252543,"line_start":79,"line_end":79,"column_start":15,"column_end":21},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":259119,"byte_end":259125,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":260081,"byte_end":260087,"line_start":350,"line_end":350,"column_start":12,"column_end":18},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":261667,"byte_end":261673,"line_start":398,"line_end":398,"column_start":15,"column_end":21},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":279864,"byte_end":279870,"line_start":939,"line_end":939,"column_start":12,"column_end":18},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":287521,"byte_end":287527,"line_start":1191,"line_end":1191,"column_start":15,"column_end":21},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288033,"byte_end":288039,"line_start":1209,"line_end":1209,"column_start":25,"column_end":31},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288215,"byte_end":288221,"line_start":1224,"line_end":1224,"column_start":22,"column_end":28},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288308,"byte_end":288314,"line_start":1232,"line_end":1232,"column_start":23,"column_end":29},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":288605,"byte_end":288611,"line_start":1246,"line_end":1246,"column_start":58,"column_end":64},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289038,"byte_end":289044,"line_start":1265,"line_end":1265,"column_start":59,"column_end":65},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289580,"byte_end":289586,"line_start":1290,"line_end":1290,"column_start":25,"column_end":31},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289764,"byte_end":289770,"line_start":1302,"line_end":1302,"column_start":29,"column_end":35},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":289924,"byte_end":289930,"line_start":1313,"line_end":1313,"column_start":34,"column_end":40},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2970}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290217,"byte_end":290223,"line_start":1328,"line_end":1328,"column_start":32,"column_end":38},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":2970}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290497,"byte_end":290503,"line_start":1343,"line_end":1343,"column_start":25,"column_end":31},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":290798,"byte_end":290804,"line_start":1362,"line_end":1362,"column_start":27,"column_end":33},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":9695}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291101,"byte_end":291107,"line_start":1378,"line_end":1378,"column_start":24,"column_end":30},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291317,"byte_end":291323,"line_start":1392,"line_end":1392,"column_start":24,"column_end":30},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":291846,"byte_end":291857,"line_start":1413,"line_end":1413,"column_start":36,"column_end":47},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":5897},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292026,"byte_end":292037,"line_start":1423,"line_end":1423,"column_start":32,"column_end":43},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5897},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292185,"byte_end":292196,"line_start":1433,"line_end":1433,"column_start":21,"column_end":32},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":5897},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/single.rs","byte_start":292461,"byte_end":292472,"line_start":1446,"line_end":1446,"column_start":31,"column_end":42},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5897},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":293695,"byte_end":293702,"line_start":77,"line_end":77,"column_start":15,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":295775,"byte_end":295782,"line_start":125,"line_end":125,"column_start":15,"column_end":22},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":299056,"byte_end":299063,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":302951,"byte_end":302958,"line_start":381,"line_end":381,"column_start":15,"column_end":22},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":304014,"byte_end":304021,"line_start":425,"line_end":425,"column_start":15,"column_end":22},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":308426,"byte_end":308433,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":308916,"byte_end":308923,"line_start":587,"line_end":587,"column_start":12,"column_end":19},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":309620,"byte_end":309627,"line_start":613,"line_end":613,"column_start":15,"column_end":22},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":311614,"byte_end":311621,"line_start":682,"line_end":682,"column_start":25,"column_end":32},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":311793,"byte_end":311800,"line_start":694,"line_end":694,"column_start":59,"column_end":66},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312289,"byte_end":312296,"line_start":713,"line_end":713,"column_start":38,"column_end":45},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312478,"byte_end":312485,"line_start":724,"line_end":724,"column_start":42,"column_end":49},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312689,"byte_end":312696,"line_start":736,"line_end":736,"column_start":27,"column_end":34},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":312837,"byte_end":312844,"line_start":748,"line_end":748,"column_start":25,"column_end":32},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313035,"byte_end":313042,"line_start":760,"line_end":760,"column_start":27,"column_end":34},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":9695}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313374,"byte_end":313381,"line_start":777,"line_end":777,"column_start":24,"column_end":31},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":313977,"byte_end":313989,"line_start":801,"line_end":801,"column_start":34,"column_end":46},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314258,"byte_end":314270,"line_start":814,"line_end":814,"column_start":36,"column_end":48},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314426,"byte_end":314438,"line_start":824,"line_end":824,"column_start":19,"column_end":31},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":314986,"byte_end":314998,"line_start":844,"line_end":844,"column_start":21,"column_end":33},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315588,"byte_end":315600,"line_start":869,"line_end":869,"column_start":25,"column_end":37},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315650,"byte_end":315662,"line_start":871,"line_end":871,"column_start":25,"column_end":37},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5934},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/ptr/span.rs","byte_start":315742,"byte_end":315754,"line_start":874,"line_end":874,"column_start":31,"column_end":43},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5934},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":374292,"byte_end":374300,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":444638,"byte_end":444646,"line_start":2360,"line_end":2360,"column_start":12,"column_end":20},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/api.rs","byte_start":454095,"byte_end":454104,"line_start":2741,"line_end":2741,"column_start":44,"column_end":53},"kind":{"Impl":{"id":268}},"from":{"krate":2,"index":44745},"to":{"krate":0,"index":3354}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":456403,"byte_end":456407,"line_start":89,"line_end":89,"column_start":16,"column_end":20},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":3470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460687,"byte_end":460691,"line_start":231,"line_end":231,"column_start":22,"column_end":26},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3470},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":460998,"byte_end":461002,"line_start":247,"line_end":247,"column_start":38,"column_end":42},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":3470},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":461259,"byte_end":461263,"line_start":260,"line_end":260,"column_start":22,"column_end":26},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":3470},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":462035,"byte_end":462042,"line_start":288,"line_end":288,"column_start":16,"column_end":23},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":3499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":464779,"byte_end":464786,"line_start":381,"line_end":381,"column_start":45,"column_end":52},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":3499},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":465053,"byte_end":465060,"line_start":394,"line_end":394,"column_start":22,"column_end":29},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":3499},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":475996,"byte_end":476007,"line_start":860,"line_end":860,"column_start":16,"column_end":27},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":6268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":478388,"byte_end":478402,"line_start":962,"line_end":962,"column_start":16,"column_end":30},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":6307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":486360,"byte_end":486372,"line_start":1272,"line_end":1272,"column_start":16,"column_end":28},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":6412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":488857,"byte_end":488872,"line_start":1374,"line_end":1374,"column_start":16,"column_end":31},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":6451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":501947,"byte_end":501966,"line_start":1956,"line_end":1956,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":7827},"to":{"krate":0,"index":3586}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":505755,"byte_end":505763,"line_start":2119,"line_end":2119,"column_start":16,"column_end":24},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":6902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":506017,"byte_end":506025,"line_start":2134,"line_end":2134,"column_start":24,"column_end":32},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":6902},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":506193,"byte_end":506201,"line_start":2148,"line_end":2148,"column_start":25,"column_end":33},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":6902},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507078,"byte_end":507086,"line_start":2188,"line_end":2188,"column_start":36,"column_end":44},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":6902},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507685,"byte_end":507693,"line_start":2219,"line_end":2219,"column_start":34,"column_end":42},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":6902},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":507838,"byte_end":507846,"line_start":2230,"line_end":2230,"column_start":30,"column_end":38},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":6902},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508298,"byte_end":508307,"line_start":2251,"line_end":2251,"column_start":16,"column_end":25},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":6954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508550,"byte_end":508559,"line_start":2265,"line_end":2265,"column_start":24,"column_end":33},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":6954},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":508727,"byte_end":508736,"line_start":2279,"line_end":2279,"column_start":25,"column_end":34},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":6954},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":509422,"byte_end":509431,"line_start":2316,"line_end":2316,"column_start":36,"column_end":45},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":6954},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510033,"byte_end":510042,"line_start":2347,"line_end":2347,"column_start":34,"column_end":43},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":6954},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":510188,"byte_end":510197,"line_start":2358,"line_end":2358,"column_start":30,"column_end":39},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":6954},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":515832,"byte_end":515853,"line_start":2553,"line_end":2553,"column_start":16,"column_end":37},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":7086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/iter.rs","byte_start":516418,"byte_end":516440,"line_start":2575,"line_end":2575,"column_start":16,"column_end":38},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":7166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":517432,"byte_end":517440,"line_start":35,"line_end":35,"column_start":58,"column_end":66},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":518271,"byte_end":518279,"line_start":67,"line_end":67,"column_start":57,"column_end":65},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":519028,"byte_end":519036,"line_start":96,"line_end":96,"column_start":58,"column_end":66},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/ops.rs","byte_start":519765,"byte_end":519773,"line_start":125,"line_end":125,"column_start":29,"column_end":37},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization/lsb0.rs","byte_start":524282,"byte_end":524290,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization/msb0.rs","byte_start":532532,"byte_end":532540,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/specialization.rs","byte_start":522609,"byte_end":522617,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549316,"byte_end":549324,"line_start":44,"line_end":44,"column_start":28,"column_end":36},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549538,"byte_end":549546,"line_start":56,"line_end":56,"column_start":28,"column_end":36},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549743,"byte_end":549751,"line_start":68,"line_end":68,"column_start":19,"column_end":27},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":549892,"byte_end":549900,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":550505,"byte_end":550513,"line_start":97,"line_end":97,"column_start":54,"column_end":62},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":551590,"byte_end":551598,"line_start":157,"line_end":157,"column_start":55,"column_end":63},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":551816,"byte_end":551824,"line_start":170,"line_end":170,"column_start":59,"column_end":67},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":552494,"byte_end":552502,"line_start":192,"line_end":192,"column_start":55,"column_end":63},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":553558,"byte_end":553566,"line_start":242,"line_end":242,"column_start":56,"column_end":64},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":553824,"byte_end":553832,"line_start":255,"line_end":255,"column_start":60,"column_end":68},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556230,"byte_end":556238,"line_start":363,"line_end":363,"column_start":22,"column_end":30},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556472,"byte_end":556480,"line_start":376,"line_end":376,"column_start":24,"column_end":32},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":556714,"byte_end":556722,"line_start":389,"line_end":389,"column_start":24,"column_end":32},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":9695}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560098,"byte_end":560106,"line_start":532,"line_end":532,"column_start":21,"column_end":29},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560360,"byte_end":560368,"line_start":545,"line_end":545,"column_start":28,"column_end":36},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560503,"byte_end":560511,"line_start":553,"line_end":553,"column_start":28,"column_end":36},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560663,"byte_end":560671,"line_start":561,"line_end":561,"column_start":22,"column_end":30},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice/traits.rs","byte_start":560877,"byte_end":560885,"line_start":571,"line_end":571,"column_start":24,"column_end":32},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":4157},"to":{"krate":5,"index":669}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":325306,"byte_end":325314,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":335055,"byte_end":335063,"line_start":433,"line_end":433,"column_start":12,"column_end":20},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":342798,"byte_end":342806,"line_start":721,"line_end":721,"column_start":12,"column_end":20},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":349872,"byte_end":349880,"line_start":986,"line_end":986,"column_start":12,"column_end":20},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":351993,"byte_end":352001,"line_start":1044,"line_end":1044,"column_start":12,"column_end":20},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":362140,"byte_end":362148,"line_start":1433,"line_end":1433,"column_start":12,"column_end":20},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":365667,"byte_end":365675,"line_start":1556,"line_end":1556,"column_start":12,"column_end":20},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":368185,"byte_end":368193,"line_start":1637,"line_end":1637,"column_start":12,"column_end":20},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":370582,"byte_end":370590,"line_start":1721,"line_end":1721,"column_start":12,"column_end":20},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/slice.rs","byte_start":371959,"byte_end":371967,"line_start":1755,"line_end":1755,"column_start":12,"column_end":20},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/store.rs","byte_start":561326,"byte_end":561331,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":4308}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/api.rs","byte_start":588586,"byte_end":588592,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":5125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":615529,"byte_end":615535,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7792}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":616493,"byte_end":616499,"line_start":82,"line_end":82,"column_start":37,"column_end":43},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7792}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":616831,"byte_end":616837,"line_start":96,"line_end":96,"column_start":63,"column_end":69},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7792}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617110,"byte_end":617116,"line_start":111,"line_end":111,"column_start":26,"column_end":32},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7792}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617572,"byte_end":617578,"line_start":129,"line_end":129,"column_start":34,"column_end":40},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7792}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":617944,"byte_end":617950,"line_start":147,"line_end":147,"column_start":35,"column_end":41},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618199,"byte_end":618205,"line_start":160,"line_end":160,"column_start":43,"column_end":49},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618554,"byte_end":618560,"line_start":175,"line_end":175,"column_start":6,"column_end":12},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":618876,"byte_end":618882,"line_start":191,"line_end":191,"column_start":32,"column_end":38},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":619141,"byte_end":619147,"line_start":204,"line_end":204,"column_start":40,"column_end":46},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7779}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":619476,"byte_end":619482,"line_start":220,"line_end":220,"column_start":29,"column_end":35},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":7783}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":621130,"byte_end":621135,"line_start":282,"line_end":282,"column_start":16,"column_end":21},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":624776,"byte_end":624781,"line_start":411,"line_end":411,"column_start":38,"column_end":43},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":624957,"byte_end":624962,"line_start":423,"line_end":423,"column_start":22,"column_end":27},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":625281,"byte_end":625286,"line_start":436,"line_end":436,"column_start":25,"column_end":30},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":625761,"byte_end":625766,"line_start":458,"line_end":458,"column_start":36,"column_end":41},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626221,"byte_end":626226,"line_start":476,"line_end":476,"column_start":34,"column_end":39},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626453,"byte_end":626458,"line_start":488,"line_end":488,"column_start":30,"column_end":35},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626663,"byte_end":626668,"line_start":497,"line_end":497,"column_start":28,"column_end":33},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":626864,"byte_end":626869,"line_start":506,"line_end":506,"column_start":28,"column_end":33},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":627042,"byte_end":627047,"line_start":515,"line_end":515,"column_start":21,"column_end":26},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4681},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628047,"byte_end":628053,"line_start":562,"line_end":562,"column_start":19,"column_end":25},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":7854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628409,"byte_end":628415,"line_start":578,"line_end":578,"column_start":28,"column_end":34},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":7854},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":628882,"byte_end":628888,"line_start":602,"line_end":602,"column_start":39,"column_end":45},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":7854},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629221,"byte_end":629227,"line_start":620,"line_end":620,"column_start":37,"column_end":43},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":7854},"to":{"krate":2,"index":7852}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629398,"byte_end":629404,"line_start":632,"line_end":632,"column_start":33,"column_end":39},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":7854},"to":{"krate":2,"index":8253}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/iter.rs","byte_start":629587,"byte_end":629593,"line_start":641,"line_end":641,"column_start":24,"column_end":30},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":7854},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631142,"byte_end":631150,"line_start":31,"line_end":31,"column_start":43,"column_end":51},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631363,"byte_end":631371,"line_start":43,"line_end":43,"column_start":44,"column_end":52},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631574,"byte_end":631580,"line_start":55,"line_end":55,"column_start":33,"column_end":39},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3184}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":631838,"byte_end":631844,"line_start":71,"line_end":71,"column_start":39,"column_end":45},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3211}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632087,"byte_end":632095,"line_start":84,"line_end":84,"column_start":42,"column_end":50},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632306,"byte_end":632314,"line_start":96,"line_end":96,"column_start":43,"column_end":51},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632515,"byte_end":632521,"line_start":108,"line_end":108,"column_start":32,"column_end":38},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3189}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":632776,"byte_end":632782,"line_start":124,"line_end":124,"column_start":38,"column_end":44},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633024,"byte_end":633032,"line_start":137,"line_end":137,"column_start":43,"column_end":51},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633245,"byte_end":633253,"line_start":149,"line_end":149,"column_start":44,"column_end":52},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633456,"byte_end":633462,"line_start":161,"line_end":161,"column_start":33,"column_end":39},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3194}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633720,"byte_end":633726,"line_start":177,"line_end":177,"column_start":39,"column_end":45},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3219}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":633918,"byte_end":633924,"line_start":189,"line_end":189,"column_start":22,"column_end":28},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3276}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634097,"byte_end":634103,"line_start":202,"line_end":202,"column_start":25,"column_end":31},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634256,"byte_end":634262,"line_start":213,"line_end":213,"column_start":21,"column_end":27},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634523,"byte_end":634529,"line_start":227,"line_end":227,"column_start":32,"column_end":38},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3361}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":634816,"byte_end":634822,"line_start":242,"line_end":242,"column_start":35,"column_end":41},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3365}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/ops.rs","byte_start":635210,"byte_end":635216,"line_start":258,"line_end":258,"column_start":20,"column_end":26},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3177}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":637726,"byte_end":637732,"line_start":41,"line_end":41,"column_start":39,"column_end":45},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2654}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":637924,"byte_end":637930,"line_start":53,"line_end":53,"column_start":42,"column_end":48},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2657}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638118,"byte_end":638124,"line_start":65,"line_end":65,"column_start":22,"column_end":28},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638271,"byte_end":638277,"line_start":76,"line_end":76,"column_start":19,"column_end":25},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638373,"byte_end":638379,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2745}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":638615,"byte_end":638623,"line_start":96,"line_end":96,"column_start":52,"column_end":60},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":639394,"byte_end":639400,"line_start":138,"line_end":138,"column_start":36,"column_end":42},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2709}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":639652,"byte_end":639660,"line_start":151,"line_end":151,"column_start":53,"column_end":61},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":4157},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":640553,"byte_end":640559,"line_start":193,"line_end":193,"column_start":37,"column_end":43},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":640833,"byte_end":640839,"line_start":206,"line_end":206,"column_start":38,"column_end":44},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641027,"byte_end":641033,"line_start":218,"line_end":218,"column_start":38,"column_end":44},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641231,"byte_end":641237,"line_start":230,"line_end":230,"column_start":36,"column_end":42},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2954}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641399,"byte_end":641405,"line_start":242,"line_end":242,"column_start":36,"column_end":42},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641580,"byte_end":641586,"line_start":254,"line_end":254,"column_start":41,"column_end":47},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":641793,"byte_end":641799,"line_start":266,"line_end":266,"column_start":45,"column_end":51},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642002,"byte_end":642008,"line_start":278,"line_end":278,"column_start":37,"column_end":43},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642219,"byte_end":642225,"line_start":290,"line_end":290,"column_start":35,"column_end":41},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642412,"byte_end":642415,"line_start":302,"line_end":302,"column_start":35,"column_end":38},"kind":{"Impl":{"id":402}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642605,"byte_end":642611,"line_start":314,"line_end":314,"column_start":50,"column_end":56},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":642806,"byte_end":642812,"line_start":326,"line_end":326,"column_start":32,"column_end":38},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":2970}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643032,"byte_end":643038,"line_start":340,"line_end":340,"column_start":24,"column_end":30},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643157,"byte_end":643163,"line_start":351,"line_end":351,"column_start":22,"column_end":28},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643587,"byte_end":643593,"line_start":378,"line_end":378,"column_start":21,"column_end":27},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":9885}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643766,"byte_end":643772,"line_start":390,"line_end":390,"column_start":28,"column_end":34},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643845,"byte_end":643851,"line_start":397,"line_end":397,"column_start":28,"column_end":34},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec/traits.rs","byte_start":643918,"byte_end":643924,"line_start":404,"line_end":404,"column_start":22,"column_end":28},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":5125},"to":{"krate":2,"index":3098}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":570996,"byte_end":571002,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":5125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":577775,"byte_end":577781,"line_start":308,"line_end":308,"column_start":12,"column_end":18},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":5125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/vec.rs","byte_start":581173,"byte_end":581179,"line_start":436,"line_end":436,"column_start":12,"column_end":18},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":5125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":645122,"byte_end":645123,"line_start":44,"line_end":44,"column_start":21,"column_end":22},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":5207},"to":{"krate":0,"index":5196}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647167,"byte_end":647174,"line_start":141,"line_end":141,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":5196},"to":{"krate":0,"index":5241}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647177,"byte_end":647182,"line_start":141,"line_end":141,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":5241}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":647601,"byte_end":647602,"line_start":159,"line_end":159,"column_start":26,"column_end":27},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":5248},"to":{"krate":0,"index":5241}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":649170,"byte_end":649171,"line_start":226,"line_end":226,"column_start":26,"column_end":27},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":5273},"to":{"krate":0,"index":5260}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.1/src/view.rs","byte_start":649524,"byte_end":649525,"line_start":245,"line_end":245,"column_start":29,"column_end":30},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":5280},"to":{"krate":0,"index":5266}}]}