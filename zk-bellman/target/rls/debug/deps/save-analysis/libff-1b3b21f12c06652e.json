{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0","program":"/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ff","--edition=2021","/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"bits\"","--cfg","feature=\"bitvec\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=1b3b21f12c06652e","-C","extra-filename=-1b3b21f12c06652e","--out-dir","/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","-L","dependency=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","--extern","bitvec=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libbitvec-98e8be46811e888e.rmeta","--extern","rand_core=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/librand_core-1b683ff8d81d8c62.rmeta","--extern","subtle=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libsubtle-999679ce737cde54.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libff-1b3b21f12c06652e.rmeta"},"prelude":{"crate_id":{"name":"ff","disambiguator":[13453528231645199977,0]},"crate_root":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src","external_crates":[{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":5,"id":{"name":"subtle","disambiguator":[4693613423320812284,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":6,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":7,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":8,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":9,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":10,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":12,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":13,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":14,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":15,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":16,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":17,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":18,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":19,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","num":20,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":21,"id":{"name":"bitvec","disambiguator":[15961701678275193747,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":22,"id":{"name":"funty","disambiguator":[15770065805564930555,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":23,"id":{"name":"radium","disambiguator":[7311690213042413157,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":24,"id":{"name":"tap","disambiguator":[15141533886974157350,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":25,"id":{"name":"wyz","disambiguator":[10016541334912243662,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":26,"id":{"name":"rand_core","disambiguator":[17350612091855812901,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":27,"id":{"name":"getrandom","disambiguator":[6512853696765046289,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":28,"id":{"name":"cfg_if","disambiguator":[243630855546215384,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","num":29,"id":{"name":"libc","disambiguator":[17397406625196134390,0]}}],"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":0,"byte_end":9367,"line_start":1,"line_end":298,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":308,"byte_end":309,"line_start":13,"line_end":13,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":5241},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":516,"byte_end":528,"line_start":21,"line_end":21,"column_start":23,"column_end":35},"alias_span":null,"name":"BitViewSized","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":0,"byte_end":9367,"line_start":1,"line_end":298,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":103},{"krate":0,"index":116}],"decl_id":null,"docs":" This crate provides traits for working with finite fields.\n","sig":null,"attributes":[{"value":"/ This crate provides traits for working with finite fields.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"deny(rustdoc :: broken_intra_doc_links)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":168,"byte_end":209,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":210,"byte_end":233,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10000,"byte_end":10011,"line_start":18,"line_end":18,"column_start":11,"column_end":22},"name":"BatchInvert","qualname":"::batch::BatchInvert","value":"BatchInvert<F: Field>","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" Extension trait for iterators over mutable field elements which allows those field\n elements to be inverted in a batch.","sig":null,"attributes":[{"value":"/ Extension trait for iterators over mutable field elements which allows those field","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9581,"byte_end":9667,"line_start":9,"line_end":9,"column_start":1,"column_end":87}},{"value":"/ elements to be inverted in a batch.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9668,"byte_end":9707,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9708,"byte_end":9711,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ `I: IntoIterator<Item = &'a mut F: Field + ConstantTimeEq>` implements this trait when","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9712,"byte_end":9802,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ the `alloc` feature flag is enabled.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9803,"byte_end":9843,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9844,"byte_end":9847,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ For non-allocating contexts, see the [`BatchInverter`] struct.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9848,"byte_end":9914,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":9915,"byte_end":9940,"line_start":16,"line_end":16,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10238,"byte_end":10250,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"batch_invert","qualname":"::batch::BatchInvert::batch_invert","value":"pub fn batch_invert(Self) -> F","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Consumes this iterator and inverts each field element (when nonzero). Zero-valued\n elements are left as zero.","sig":null,"attributes":[{"value":"/ Consumes this iterator and inverts each field element (when nonzero). Zero-valued","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10028,"byte_end":10113,"line_start":19,"line_end":19,"column_start":5,"column_end":90}},{"value":"/ elements are left as zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10118,"byte_end":10148,"line_start":20,"line_end":20,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10153,"byte_end":10156,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10161,"byte_end":10230,"line_start":22,"line_end":22,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11195,"byte_end":11208,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"BatchInverter","qualname":"::batch::BatchInverter","value":"BatchInverter {  }","parent":null,"children":[],"decl_id":null,"docs":" A non-allocating batch inverter.\n","sig":null,"attributes":[{"value":"/ A non-allocating batch inverter.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11147,"byte_end":11183,"line_start":57,"line_end":57,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11644,"byte_end":11672,"line_start":71,"line_end":71,"column_start":12,"column_end":40},"name":"invert_with_external_scratch","qualname":"<BatchInverter>::invert_with_external_scratch","value":"pub fn invert_with_external_scratch<F>(&mut [F], &mut [F]) -> F where\nF: Field + ConstantTimeEq","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `elements` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `elements` (when nonzero). Zero-valued elements are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11238,"byte_end":11323,"line_start":61,"line_end":61,"column_start":5,"column_end":90}},{"value":"/ left as zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11328,"byte_end":11345,"line_start":62,"line_end":62,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11350,"byte_end":11353,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ - `scratch_space` is a slice of field elements that can be freely overwritten.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11358,"byte_end":11440,"line_start":64,"line_end":64,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11445,"byte_end":11448,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11453,"byte_end":11522,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11527,"byte_end":11530,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11535,"byte_end":11547,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11552,"byte_end":11555,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function will panic if `elements.len() != scratch_space.len()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11560,"byte_end":11632,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12830,"byte_end":12858,"line_start":102,"line_end":102,"column_start":12,"column_end":40},"name":"invert_with_internal_scratch","qualname":"<BatchInverter>::invert_with_internal_scratch","value":"pub fn invert_with_internal_scratch<F, T, TE, TS>(&mut [T], TE, TS) -> F where\nF: Field + ConstantTimeEq, TE: Fn(&mut T) -> &mut F, TS: Fn(&mut T) -> &mut F","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `items` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `items` (when nonzero). Zero-valued elements are","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12449,"byte_end":12531,"line_start":95,"line_end":95,"column_start":5,"column_end":87}},{"value":"/ left as zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12536,"byte_end":12553,"line_start":96,"line_end":96,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12558,"byte_end":12561,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - `element` is a function that extracts the element to be inverted from `items`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12566,"byte_end":12650,"line_start":98,"line_end":98,"column_start":5,"column_end":89}},{"value":"/ - `scratch_space` is a function that extracts the scratch space from `items`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12655,"byte_end":12736,"line_start":99,"line_end":99,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12741,"byte_end":12744,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":12749,"byte_end":12818,"line_start":101,"line_end":101,"column_start":5,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":81},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":908,"byte_end":917,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"name":"FieldBits","qualname":"::FieldBits","value":"BitArray<V, Lsb0>","parent":null,"children":[],"decl_id":null,"docs":" Bit representation of a field element.\n","sig":null,"attributes":[{"value":"/ Bit representation of a field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":783,"byte_end":825,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"cfg(feature = \"bits\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":826,"byte_end":850,"line_start":31,"line_end":31,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":83},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1002,"byte_end":1007,"line_start":36,"line_end":36,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Default + Send + Sync + fmt::Debug + 'static +\nConditionallySelectable + ConstantTimeEq + Add<Output = Self> + Sub<Output =\nSelf> + Mul<Output = Self> + Neg<Output = Self> + for<'a> Add<&'a Self, Output\n= Self> + for<'a> Mul<&'a Self, Output = Self> + for<'a> Sub<&'a Self, Output\n= Self> + MulAssign + AddAssign + SubAssign + for<'a> MulAssign<&'a Self> +\nfor<'a> AddAssign<&'a Self> + for<'a> SubAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":943,"byte_end":991,"line_start":35,"line_end":35,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1638,"byte_end":1644,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"random","qualname":"::Field::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random using a user-provided RNG.\n","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1554,"byte_end":1630,"line_start":62,"line_end":62,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1751,"byte_end":1755,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1678,"byte_end":1743,"line_start":65,"line_end":65,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1850,"byte_end":1853,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1772,"byte_end":1842,"line_start":68,"line_end":68,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1920,"byte_end":1927,"line_start":72,"line_end":72,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1870,"byte_end":1912,"line_start":71,"line_end":71,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2241,"byte_end":2256,"line_start":82,"line_end":82,"column_start":8,"column_end":23},"name":"is_zero_vartime","qualname":"::Field::is_zero_vartime","value":"pub fn is_zero_vartime(&Self) -> bool","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1992,"byte_end":2034,"line_start":76,"line_end":76,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2039,"byte_end":2042,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2047,"byte_end":2061,"line_start":78,"line_end":78,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2066,"byte_end":2069,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees. Implementors of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2074,"byte_end":2151,"line_start":80,"line_end":80,"column_start":5,"column_end":82}},{"value":"/ `Field` trait **may** optimise this method using non-constant-time logic.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2156,"byte_end":2233,"line_start":81,"line_end":81,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2364,"byte_end":2370,"line_start":88,"line_end":88,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&Self) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2315,"byte_end":2340,"line_start":86,"line_end":86,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2345,"byte_end":2356,"line_start":87,"line_end":87,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2439,"byte_end":2443,"line_start":92,"line_end":92,"column_start":8,"column_end":12},"name":"cube","qualname":"::Field::cube","value":"pub fn cube(&Self) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Cubes this element.\n","sig":null,"attributes":[{"value":"/ Cubes this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2392,"byte_end":2415,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"must_use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2420,"byte_end":2431,"line_start":91,"line_end":91,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2550,"byte_end":2556,"line_start":98,"line_end":98,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2501,"byte_end":2526,"line_start":96,"line_end":96,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2531,"byte_end":2542,"line_start":97,"line_end":97,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2682,"byte_end":2688,"line_start":102,"line_end":102,"column_start":8,"column_end":14},"name":"invert","qualname":"::Field::invert","value":"pub fn invert(&Self) -> CtOption<Self>","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element,\n failing if the element is zero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2578,"byte_end":2634,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ failing if the element is zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2639,"byte_end":2674,"line_start":101,"line_end":101,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2813,"byte_end":2817,"line_start":106,"line_end":106,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::Field::sqrt","value":"pub fn sqrt(&Self) -> CtOption<Self>","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2720,"byte_end":2778,"line_start":104,"line_end":104,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2783,"byte_end":2805,"line_start":105,"line_end":105,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3115,"byte_end":3126,"line_start":113,"line_end":113,"column_start":8,"column_end":19},"name":"pow_vartime","qualname":"::Field::pow_vartime","value":"pub fn pow_vartime<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Exponentiates `self` by `exp`, where `exp` is a little-endian order\n integer exponent.","sig":null,"attributes":[{"value":"/ Exponentiates `self` by `exp`, where `exp` is a little-endian order","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2849,"byte_end":2920,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ integer exponent.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2925,"byte_end":2946,"line_start":109,"line_end":109,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2951,"byte_end":2954,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ **This operation is variable time with respect to the exponent.** If the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":2959,"byte_end":3035,"line_start":111,"line_end":111,"column_start":5,"column_end":81}},{"value":"/ exponent is fixed, this operation is effectively constant time.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3040,"byte_end":3107,"line_start":112,"line_end":112,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3530,"byte_end":3540,"line_start":130,"line_end":130,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field + From<u64>","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3471,"byte_end":3519,"line_start":129,"line_end":129,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3668,"byte_end":3672,"line_start":133,"line_end":133,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: Copy + Default + Send + Sync + 'static + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this binary\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this binary","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3566,"byte_end":3634,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3639,"byte_end":3658,"line_start":132,"line_end":132,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3993,"byte_end":4009,"line_start":141,"line_end":141,"column_start":8,"column_end":24},"name":"from_str_vartime","qualname":"::PrimeField::from_str_vartime","value":"pub fn from_str_vartime(&str) -> Option<Self>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3747,"byte_end":3818,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3823,"byte_end":3888,"line_start":136,"line_end":136,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3893,"byte_end":3896,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3901,"byte_end":3915,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3920,"byte_end":3923,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3928,"byte_end":3985,"line_start":140,"line_end":140,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5179,"byte_end":5188,"line_start":185,"line_end":185,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> CtOption<Self>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":4836,"byte_end":4919,"line_start":179,"line_end":179,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":4924,"byte_end":5008,"line_start":180,"line_end":180,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5013,"byte_end":5034,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5039,"byte_end":5042,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5047,"byte_end":5126,"line_start":183,"line_end":183,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5131,"byte_end":5171,"line_start":184,"line_end":184,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5778,"byte_end":5795,"line_start":198,"line_end":198,"column_start":8,"column_end":25},"name":"from_repr_vartime","qualname":"::PrimeField::from_repr_vartime","value":"pub fn from_repr_vartime(Self::Repr) -> Option<Self>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5231,"byte_end":5314,"line_start":187,"line_end":187,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5319,"byte_end":5403,"line_start":188,"line_end":188,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5408,"byte_end":5429,"line_start":189,"line_end":189,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5442,"byte_end":5521,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5526,"byte_end":5566,"line_start":192,"line_end":192,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5571,"byte_end":5574,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5579,"byte_end":5593,"line_start":194,"line_end":194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5598,"byte_end":5601,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees. Implementors of the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5606,"byte_end":5683,"line_start":196,"line_end":196,"column_start":5,"column_end":82}},{"value":"/ `PrimeField` trait **may** optimise this method using non-constant-time logic.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5688,"byte_end":5770,"line_start":197,"line_end":197,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6151,"byte_end":6158,"line_start":207,"line_end":207,"column_start":8,"column_end":15},"name":"to_repr","qualname":"::PrimeField::to_repr","value":"pub fn to_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into the standard byte representation for\n this field.","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into the standard byte representation for","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5880,"byte_end":5964,"line_start":202,"line_end":202,"column_start":5,"column_end":89}},{"value":"/ this field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5969,"byte_end":5984,"line_start":203,"line_end":203,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5989,"byte_end":5992,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The endianness of the byte representation is implementation-specific. Generic","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":5997,"byte_end":6078,"line_start":205,"line_end":205,"column_start":5,"column_end":86}},{"value":"/ encodings of field elements should be treated as opaque.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6083,"byte_end":6143,"line_start":206,"line_end":206,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6235,"byte_end":6241,"line_start":210,"line_end":210,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeField::is_odd","value":"pub fn is_odd(&Self) -> Choice","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Returns true iff this element is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is odd.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6186,"byte_end":6227,"line_start":209,"line_end":209,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6337,"byte_end":6344,"line_start":214,"line_end":214,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeField::is_even","value":"pub fn is_even(&Self) -> Choice","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Returns true iff this element is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is even.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6265,"byte_end":6307,"line_start":212,"line_end":212,"column_start":5,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6312,"byte_end":6329,"line_start":213,"line_end":213,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6476,"byte_end":6484,"line_start":219,"line_end":219,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6398,"byte_end":6465,"line_start":218,"line_end":218,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6638,"byte_end":6646,"line_start":224,"line_end":224,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6496,"byte_end":6573,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6578,"byte_end":6581,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This is usually `Self::NUM_BITS - 1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6586,"byte_end":6627,"line_start":223,"line_end":223,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7070,"byte_end":7094,"line_start":235,"line_end":235,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Returns a fixed multiplicative generator of `modulus - 1` order. This element must\n also be a quadratic nonresidue.","sig":null,"attributes":[{"value":"/ Returns a fixed multiplicative generator of `modulus - 1` order. This element must","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6658,"byte_end":6744,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ also be a quadratic nonresidue.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6749,"byte_end":6784,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6789,"byte_end":6792,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ It can be calculated using [SageMath] as `GF(modulus).primitive_element()`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6797,"byte_end":6876,"line_start":229,"line_end":229,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6881,"byte_end":6884,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Implementations of this method MUST ensure that this is the generator used to","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6889,"byte_end":6970,"line_start":231,"line_end":231,"column_start":5,"column_end":86}},{"value":"/ derive `Self::root_of_unity`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":6975,"byte_end":7008,"line_start":232,"line_end":232,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7013,"byte_end":7016,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ [SageMath]: https://www.sagemath.org/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7021,"byte_end":7062,"line_start":234,"line_end":234,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7324,"byte_end":7325,"line_start":241,"line_end":241,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","sig":null,"attributes":[{"value":"/ An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7111,"byte_end":7191,"line_start":237,"line_end":237,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7196,"byte_end":7199,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is the number of leading zero bits in the little-endian bit representation of","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7204,"byte_end":7290,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"/ `modulus - 1`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7295,"byte_end":7313,"line_start":240,"line_end":240,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7523,"byte_end":7536,"line_start":247,"line_end":247,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Returns the `2^s` root of unity.","sig":null,"attributes":[{"value":"/ Returns the `2^s` root of unity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7337,"byte_end":7373,"line_start":243,"line_end":243,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7378,"byte_end":7381,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ It can be calculated by exponentiating `Self::multiplicative_generator` by `t`,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7386,"byte_end":7469,"line_start":245,"line_end":245,"column_start":5,"column_end":88}},{"value":"/ where `t = (modulus - 1) >> Self::S`.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7474,"byte_end":7515,"line_start":246,"line_end":246,"column_start":5,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":116},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7695,"byte_end":7709,"line_start":253,"line_end":253,"column_start":11,"column_end":25},"name":"PrimeFieldBits","qualname":"::PrimeFieldBits","value":"PrimeFieldBits: PrimeField","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" This represents the bits of an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents the bits of an element of a prime field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7551,"byte_end":7611,"line_start":250,"line_end":250,"column_start":1,"column_end":61}},{"value":"cfg(feature = \"bits\")","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7612,"byte_end":7636,"line_start":251,"line_end":251,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":117},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7810,"byte_end":7818,"line_start":255,"line_end":255,"column_start":10,"column_end":18},"name":"ReprBits","qualname":"::PrimeFieldBits::ReprBits","value":"type ReprBits: BitViewSized + Send + Sync;","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" The backing store for a bit representation of a prime field element.\n","sig":null,"attributes":[{"value":"/ The backing store for a bit representation of a prime field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7728,"byte_end":7800,"line_start":254,"line_end":254,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7942,"byte_end":7952,"line_start":258,"line_end":258,"column_start":8,"column_end":18},"name":"to_le_bits","qualname":"::PrimeFieldBits::to_le_bits","value":"pub fn to_le_bits(&Self) -> FieldBits<Self::ReprBits>","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into a little-endian sequence of bits.\n","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into a little-endian sequence of bits.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7853,"byte_end":7934,"line_start":257,"line_end":257,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":8089,"byte_end":8101,"line_start":261,"line_end":261,"column_start":8,"column_end":20},"name":"char_le_bits","qualname":"::PrimeFieldBits::char_le_bits","value":"pub fn char_le_bits() -> FieldBits<Self::ReprBits>","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Returns the bits of the field characteristic (the modulus) in little-endian order.\n","sig":null,"attributes":[{"value":"/ Returns the bits of the field characteristic (the modulus) in little-endian order.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7995,"byte_end":8081,"line_start":260,"line_end":260,"column_start":5,"column_end":91}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10375,"byte_end":10376,"line_start":28,"line_end":28,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11218,"byte_end":11231,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":10375,"byte_end":10376,"line_start":28,"line_end":28,"column_start":35,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":0,"index":12}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/batch.rs","byte_start":11218,"byte_end":11231,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1013,"byte_end":1018,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1025,"byte_end":1027,"line_start":38,"line_end":38,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1034,"byte_end":1038,"line_start":39,"line_end":39,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1045,"byte_end":1050,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1057,"byte_end":1064,"line_start":41,"line_end":41,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":3035},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1071,"byte_end":1075,"line_start":42,"line_end":42,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1082,"byte_end":1086,"line_start":43,"line_end":43,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1098,"byte_end":1103,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1124,"byte_end":1147,"line_start":46,"line_end":46,"column_start":7,"column_end":30},"kind":"SuperTrait","from":{"krate":5,"index":66},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1154,"byte_end":1168,"line_start":47,"line_end":47,"column_start":7,"column_end":21},"kind":"SuperTrait","from":{"krate":5,"index":58},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1200,"byte_end":1203,"line_start":49,"line_end":49,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1225,"byte_end":1228,"line_start":50,"line_end":50,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1250,"byte_end":1253,"line_start":51,"line_end":51,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1283,"byte_end":1286,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1326,"byte_end":1329,"line_start":53,"line_end":53,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":54,"line_end":54,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1404,"byte_end":1413,"line_start":55,"line_end":55,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1420,"byte_end":1429,"line_start":56,"line_end":56,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1436,"byte_end":1445,"line_start":57,"line_end":57,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1460,"byte_end":1469,"line_start":58,"line_end":58,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1494,"byte_end":1503,"line_start":59,"line_end":59,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":1528,"byte_end":1537,"line_start":60,"line_end":60,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":83}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3542,"byte_end":3547,"line_start":130,"line_end":130,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":83},"to":{"krate":0,"index":103}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":3550,"byte_end":3554,"line_start":130,"line_end":130,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":103}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.12.0/src/lib.rs","byte_start":7711,"byte_end":7721,"line_start":253,"line_end":253,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":103},"to":{"krate":0,"index":116}}]}