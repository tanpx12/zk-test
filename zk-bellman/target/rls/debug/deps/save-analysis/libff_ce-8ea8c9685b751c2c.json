{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3","program":"/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ff_ce","--edition=2018","/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"derive\"","--cfg","feature=\"ff_derive_ce\"","-C","metadata=8ea8c9685b751c2c","-C","extra-filename=-8ea8c9685b751c2c","--out-dir","/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","-L","dependency=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps","--extern","byteorder=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libbyteorder-7c274f399d426ec2.rmeta","--extern","ff_derive_ce=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libff_derive_ce-cc0d4a35b14970de.so","--extern","hex=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libhex-e6e12260d7fb4e79.rmeta","--extern","rand=/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/librand-09fb7d6cf926977f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tanpx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tanpx/Desktop/rust-playground/zk-bellman/target/rls/debug/deps/libff_ce-8ea8c9685b751c2c.rmeta"},"prelude":{"crate_id":{"name":"ff_ce","disambiguator":[7082077842657306077,0]},"crate_root":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src","external_crates":[{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":20,"id":{"name":"byteorder","disambiguator":[6392723507105128103,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":21,"id":{"name":"rand","disambiguator":[3743214236480749950,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":22,"id":{"name":"libc","disambiguator":[17397406625196134390,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":23,"id":{"name":"hex","disambiguator":[9772945174470309834,0]}},{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","num":24,"id":{"name":"ff_derive_ce","disambiguator":[14777444717911069688,0]}}],"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":0,"byte_end":13478,"line_start":1,"line_end":473,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":170,"byte_end":171,"line_start":10,"line_end":10,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":6}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":293,"byte_end":294,"line_start":18,"line_end":18,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"PrimeField","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11096,"byte_end":11097,"line_start":402,"line_end":402,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":155},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12365,"byte_end":12371,"line_start":446,"line_end":446,"column_start":18,"column_end":24},"alias_span":null,"name":"to_hex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12373,"byte_end":12381,"line_start":446,"line_end":446,"column_start":26,"column_end":34},"alias_span":null,"name":"from_hex","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":0,"byte_end":13478,"line_start":1,"line_end":473,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":162},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":110},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":143,"byte_end":146,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"name":"hex","qualname":"::hex","value":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":7}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":443,"byte_end":448,"line_start":26,"line_end":26,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Send + Sync + fmt::Debug + fmt::Display +\n'static + rand::Rand + hash::Hash","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":384,"byte_end":432,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":637,"byte_end":641,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":564,"byte_end":629,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":736,"byte_end":739,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":658,"byte_end":728,"line_start":32,"line_end":32,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":806,"byte_end":813,"line_start":36,"line_end":36,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":756,"byte_end":798,"line_start":35,"line_end":35,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":868,"byte_end":874,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&mut Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":835,"byte_end":860,"line_start":38,"line_end":38,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":925,"byte_end":931,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&mut Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":892,"byte_end":917,"line_start":41,"line_end":41,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":982,"byte_end":988,"line_start":45,"line_end":45,"column_start":8,"column_end":14},"name":"negate","qualname":"::Field::negate","value":"pub fn negate(&mut Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Negates this element.\n","sig":null,"attributes":[{"value":"/ Negates this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":949,"byte_end":974,"line_start":44,"line_end":44,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1055,"byte_end":1065,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"add_assign","qualname":"::Field::add_assign","value":"pub fn add_assign(&mut Self, &Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Adds another element to this element.\n","sig":null,"attributes":[{"value":"/ Adds another element to this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1006,"byte_end":1047,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1153,"byte_end":1163,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"::Field::sub_assign","value":"pub fn sub_assign(&mut Self, &Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Subtracts another element from this element.\n","sig":null,"attributes":[{"value":"/ Subtracts another element from this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1097,"byte_end":1145,"line_start":50,"line_end":50,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1250,"byte_end":1260,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"::Field::mul_assign","value":"pub fn mul_assign(&mut Self, &Self)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Multiplies another element by this element.\n","sig":null,"attributes":[{"value":"/ Multiplies another element by this element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1195,"byte_end":1242,"line_start":53,"line_end":53,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1368,"byte_end":1375,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"inverse","qualname":"::Field::inverse","value":"pub fn inverse(&Self) -> Option<Self>","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element, if nonzero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element, if nonzero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1292,"byte_end":1360,"line_start":56,"line_end":56,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1520,"byte_end":1533,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"frobenius_map","qualname":"::Field::frobenius_map","value":"pub fn frobenius_map(&mut Self, usize)","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Exponentiates this element by a power of the base prime modulus via\n the Frobenius automorphism.\n","sig":null,"attributes":[{"value":"/ Exponentiates this element by a power of the base prime modulus via","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1405,"byte_end":1476,"line_start":59,"line_end":59,"column_start":5,"column_end":76}},{"value":"/ the Frobenius automorphism.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1481,"byte_end":1512,"line_start":60,"line_end":60,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"pow","qualname":"::Field::pow","value":"pub fn pow<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Exponentiates this element by a number represented with `u64` limbs,\n least significant digit first.\n","sig":null,"attributes":[{"value":"/ Exponentiates this element by a number represented with `u64` limbs,","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1565,"byte_end":1637,"line_start":63,"line_end":63,"column_start":5,"column_end":77}},{"value":"/ least significant digit first.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":1642,"byte_end":1676,"line_start":64,"line_end":64,"column_start":5,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2179,"byte_end":2188,"line_start":87,"line_end":87,"column_start":11,"column_end":20},"name":"SqrtField","qualname":"::SqrtField","value":"SqrtField: Field","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"decl_id":null,"docs":" This trait represents an element of a field that has a square root operation described for it.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field that has a square root operation described for it.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2070,"byte_end":2168,"line_start":86,"line_end":86,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2263,"byte_end":2271,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"legendre","qualname":"::SqrtField::legendre","value":"pub fn legendre(&Self) -> LegendreSymbol","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Returns the Legendre symbol of the field element.\n","sig":null,"attributes":[{"value":"/ Returns the Legendre symbol of the field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2202,"byte_end":2255,"line_start":88,"line_end":88,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2396,"byte_end":2400,"line_start":93,"line_end":93,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::SqrtField::sqrt","value":"pub fn sqrt(&Self) -> Option<Self>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2303,"byte_end":2361,"line_start":91,"line_end":91,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2366,"byte_end":2388,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2647,"byte_end":2661,"line_start":99,"line_end":99,"column_start":11,"column_end":25},"name":"PrimeFieldRepr","qualname":"::PrimeFieldRepr","value":"PrimeFieldRepr: Sized + Copy + Clone + Eq + Ord + Send + Sync + Default + fmt::Debug +\nfmt::Display + 'static + rand::Rand + AsRef<[u64]> + AsMut<[u64]> +\nFrom<u64> + hash::Hash","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":66},{"krate":0,"index":75},{"krate":0,"index":84}],"decl_id":null,"docs":" This trait represents a wrapper around a biginteger which can encode any element of a particular\n prime field. It is a smart wrapper around a sequence of `u64` limbs, least-significant digit\n first.\n","sig":null,"attributes":[{"value":"/ This trait represents a wrapper around a biginteger which can encode any element of a particular","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2428,"byte_end":2528,"line_start":96,"line_end":96,"column_start":1,"column_end":101}},{"value":"/ prime field. It is a smart wrapper around a sequence of `u64` limbs, least-significant digit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2529,"byte_end":2625,"line_start":97,"line_end":97,"column_start":1,"column_end":97}},{"value":"/ first.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2626,"byte_end":2636,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2952,"byte_end":2964,"line_start":118,"line_end":118,"column_start":8,"column_end":20},"name":"sub_noborrow","qualname":"::PrimeFieldRepr::sub_noborrow","value":"pub fn sub_noborrow(&mut Self, &Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Subtract another represetation from this one.\n","sig":null,"attributes":[{"value":"/ Subtract another represetation from this one.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2895,"byte_end":2944,"line_start":117,"line_end":117,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3047,"byte_end":3058,"line_start":121,"line_end":121,"column_start":8,"column_end":19},"name":"add_nocarry","qualname":"::PrimeFieldRepr::add_nocarry","value":"pub fn add_nocarry(&mut Self, &Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Add another representation to this one.\n","sig":null,"attributes":[{"value":"/ Add another representation to this one.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2996,"byte_end":3039,"line_start":120,"line_end":120,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3191,"byte_end":3199,"line_start":125,"line_end":125,"column_start":8,"column_end":16},"name":"num_bits","qualname":"::PrimeFieldRepr::num_bits","value":"pub fn num_bits(&Self) -> u32","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Compute the number of bits needed to encode this number. Always a\n multiple of 64.\n","sig":null,"attributes":[{"value":"/ Compute the number of bits needed to encode this number. Always a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3090,"byte_end":3159,"line_start":123,"line_end":123,"column_start":5,"column_end":74}},{"value":"/ multiple of 64.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3164,"byte_end":3183,"line_start":124,"line_end":124,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3269,"byte_end":3276,"line_start":128,"line_end":128,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::PrimeFieldRepr::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Returns true iff this number is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this number is zero.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3220,"byte_end":3261,"line_start":127,"line_end":127,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3346,"byte_end":3352,"line_start":131,"line_end":131,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeFieldRepr::is_odd","value":"pub fn is_odd(&Self) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Returns true iff this number is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this number is odd.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3298,"byte_end":3338,"line_start":130,"line_end":130,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3423,"byte_end":3430,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeFieldRepr::is_even","value":"pub fn is_even(&Self) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Returns true iff this number is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this number is even.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3374,"byte_end":3415,"line_start":133,"line_end":133,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3547,"byte_end":3551,"line_start":138,"line_end":138,"column_start":8,"column_end":12},"name":"div2","qualname":"::PrimeFieldRepr::div2","value":"pub fn div2(&mut Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Performs a rightwise bitshift of this number, effectively dividing\n it by 2.\n","sig":null,"attributes":[{"value":"/ Performs a rightwise bitshift of this number, effectively dividing","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3452,"byte_end":3522,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ it by 2.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3527,"byte_end":3539,"line_start":137,"line_end":137,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3641,"byte_end":3644,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"shr","qualname":"::PrimeFieldRepr::shr","value":"pub fn shr(&mut Self, u32)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Performs a rightwise bitshift of this number by some amount.\n","sig":null,"attributes":[{"value":"/ Performs a rightwise bitshift of this number by some amount.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3569,"byte_end":3633,"line_start":140,"line_end":140,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3790,"byte_end":3794,"line_start":145,"line_end":145,"column_start":8,"column_end":12},"name":"mul2","qualname":"::PrimeFieldRepr::mul2","value":"pub fn mul2(&mut Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Performs a leftwise bitshift of this number, effectively multiplying\n it by 2. Overflow is ignored.\n","sig":null,"attributes":[{"value":"/ Performs a leftwise bitshift of this number, effectively multiplying","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3672,"byte_end":3744,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/ it by 2. Overflow is ignored.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3749,"byte_end":3782,"line_start":144,"line_end":144,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3883,"byte_end":3886,"line_start":148,"line_end":148,"column_start":8,"column_end":11},"name":"shl","qualname":"::PrimeFieldRepr::shl","value":"pub fn shl(&mut Self, u32)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Performs a leftwise bitshift of this number by some amount.\n","sig":null,"attributes":[{"value":"/ Performs a leftwise bitshift of this number by some amount.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3812,"byte_end":3875,"line_start":147,"line_end":147,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3979,"byte_end":3987,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"write_be","qualname":"::PrimeFieldRepr::write_be","value":"pub fn write_be<W: Write>(&Self, W) -> io::Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes this `PrimeFieldRepr` as a big endian integer.\n","sig":null,"attributes":[{"value":"/ Writes this `PrimeFieldRepr` as a big endian integer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":3914,"byte_end":3971,"line_start":150,"line_end":150,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4295,"byte_end":4302,"line_start":162,"line_end":162,"column_start":8,"column_end":15},"name":"read_be","qualname":"::PrimeFieldRepr::read_be","value":"pub fn read_be<R: Read>(&mut Self, R) -> io::Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a big endian integer into this representation.\n","sig":null,"attributes":[{"value":"/ Reads a big endian integer into this representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4231,"byte_end":4287,"line_start":161,"line_end":161,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4622,"byte_end":4630,"line_start":173,"line_end":173,"column_start":8,"column_end":16},"name":"write_le","qualname":"::PrimeFieldRepr::write_le","value":"pub fn write_le<W: Write>(&Self, W) -> io::Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes this `PrimeFieldRepr` as a little endian integer.\n","sig":null,"attributes":[{"value":"/ Writes this `PrimeFieldRepr` as a little endian integer.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4554,"byte_end":4614,"line_start":172,"line_end":172,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4941,"byte_end":4948,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"read_le","qualname":"::PrimeFieldRepr::read_le","value":"pub fn read_le<R: Read>(&mut Self, R) -> io::Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a little endian integer into this representation.\n","sig":null,"attributes":[{"value":"/ Reads a little endian integer into this representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":4874,"byte_end":4933,"line_start":183,"line_end":183,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":163},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5256,"byte_end":5260,"line_start":197,"line_end":197,"column_start":5,"column_end":9},"name":"Zero","qualname":"::LegendreSymbol::Zero","value":"LegendreSymbol::Zero","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5270,"byte_end":5286,"line_start":198,"line_end":198,"column_start":5,"column_end":21},"name":"QuadraticResidue","qualname":"::LegendreSymbol::QuadraticResidue","value":"LegendreSymbol::QuadraticResidue","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":169},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5296,"byte_end":5315,"line_start":199,"line_end":199,"column_start":5,"column_end":24},"name":"QuadraticNonResidue","qualname":"::LegendreSymbol::QuadraticNonResidue","value":"LegendreSymbol::QuadraticNonResidue","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":162},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5235,"byte_end":5249,"line_start":196,"line_end":196,"column_start":10,"column_end":24},"name":"LegendreSymbol","qualname":"::LegendreSymbol","value":"pub enum LegendreSymbol {\n    Zero = ,\n    QuadraticResidue = ,\n    QuadraticNonResidue = ,\n}","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5530,"byte_end":5540,"line_start":207,"line_end":207,"column_start":5,"column_end":15},"name":"NotInField","qualname":"::PrimeFieldDecodingError::NotInField","value":"PrimeFieldDecodingError::NotInField(String)","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" The encoded value is not in the field\n","sig":null,"attributes":[{"value":"/ The encoded value is not in the field","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5484,"byte_end":5525,"line_start":206,"line_end":206,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":177},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5454,"byte_end":5477,"line_start":205,"line_end":205,"column_start":10,"column_end":33},"name":"PrimeFieldDecodingError","qualname":"::PrimeFieldDecodingError","value":"pub enum PrimeFieldDecodingError { NotInField(String), }","parent":null,"children":[{"krate":0,"index":178}],"decl_id":null,"docs":" An error that may occur when trying to interpret a `PrimeFieldRepr` as a\n `PrimeField` element.\n","sig":null,"attributes":[{"value":"/ An error that may occur when trying to interpret a `PrimeFieldRepr` as a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5325,"byte_end":5401,"line_start":202,"line_end":202,"column_start":1,"column_end":77}},{"value":"/ `PrimeField` element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5402,"byte_end":5427,"line_start":203,"line_end":203,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6121,"byte_end":6131,"line_start":229,"line_end":229,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6062,"byte_end":6110,"line_start":228,"line_end":228,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6251,"byte_end":6255,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: PrimeFieldRepr + From<Self>;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this biginteger\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this biginteger","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6145,"byte_end":6217,"line_start":230,"line_end":230,"column_start":5,"column_end":77}},{"value":"/ representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6222,"byte_end":6241,"line_start":231,"line_end":231,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6440,"byte_end":6448,"line_start":236,"line_end":236,"column_start":8,"column_end":16},"name":"from_str","qualname":"::PrimeField::from_str","value":"pub fn from_str(&str) -> Option<Self>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.\n","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6291,"byte_end":6362,"line_start":234,"line_end":234,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6367,"byte_end":6432,"line_start":235,"line_end":235,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7417,"byte_end":7426,"line_start":275,"line_end":275,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> Result<Self, PrimeFieldDecodingError>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Convert this prime field element into a biginteger representation.\n","sig":null,"attributes":[{"value":"/ Convert this prime field element into a biginteger representation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7339,"byte_end":7409,"line_start":274,"line_end":274,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7567,"byte_end":7580,"line_start":278,"line_end":278,"column_start":8,"column_end":21},"name":"from_raw_repr","qualname":"::PrimeField::from_raw_repr","value":"pub fn from_raw_repr(Self::Repr) -> Result<Self, PrimeFieldDecodingError>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Creates an element from raw representation in Montgommery form.\n","sig":null,"attributes":[{"value":"/ Creates an element from raw representation in Montgommery form.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7492,"byte_end":7559,"line_start":277,"line_end":277,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7771,"byte_end":7780,"line_start":282,"line_end":282,"column_start":8,"column_end":17},"name":"into_repr","qualname":"::PrimeField::into_repr","value":"pub fn into_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Convert a biginteger representation into a prime field element, if\n the number is an element of the field.\n","sig":null,"attributes":[{"value":"/ Convert a biginteger representation into a prime field element, if","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7646,"byte_end":7716,"line_start":280,"line_end":280,"column_start":5,"column_end":75}},{"value":"/ the number is an element of the field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7721,"byte_end":7763,"line_start":281,"line_end":281,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7854,"byte_end":7867,"line_start":285,"line_end":285,"column_start":8,"column_end":21},"name":"into_raw_repr","qualname":"::PrimeField::into_raw_repr","value":"pub fn into_raw_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Expose Montgommery represendation.\n","sig":null,"attributes":[{"value":"/ Expose Montgommery represendation.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7808,"byte_end":7846,"line_start":284,"line_end":284,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7953,"byte_end":7957,"line_start":288,"line_end":288,"column_start":8,"column_end":12},"name":"char","qualname":"::PrimeField::char","value":"pub fn char() -> Self::Repr","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns the field characteristic; the modulus.\n","sig":null,"attributes":[{"value":"/ Returns the field characteristic; the modulus.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7895,"byte_end":7945,"line_start":287,"line_end":287,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8058,"byte_end":8066,"line_start":291,"line_end":291,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":7980,"byte_end":8047,"line_start":290,"line_end":290,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8166,"byte_end":8174,"line_start":294,"line_end":294,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.\n","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8078,"byte_end":8155,"line_start":293,"line_end":293,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8313,"byte_end":8337,"line_start":298,"line_end":298,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns the multiplicative generator of `char()` - 1 order. This element\n must also be quadratic nonresidue.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative generator of `char()` - 1 order. This element","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8186,"byte_end":8262,"line_start":296,"line_end":296,"column_start":5,"column_end":81}},{"value":"/ must also be quadratic nonresidue.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8267,"byte_end":8305,"line_start":297,"line_end":297,"column_start":5,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8403,"byte_end":8404,"line_start":301,"line_end":301,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" 2^s * t = `char()` - 1 with t odd.\n","sig":null,"attributes":[{"value":"/ 2^s * t = `char()` - 1 with t odd.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8354,"byte_end":8392,"line_start":300,"line_end":300,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8531,"byte_end":8544,"line_start":305,"line_end":305,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns the 2^s root of unity computed by exponentiating the `multiplicative_generator()`\n by t.\n","sig":null,"attributes":[{"value":"/ Returns the 2^s root of unity computed by exponentiating the `multiplicative_generator()`","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8416,"byte_end":8509,"line_start":303,"line_end":303,"column_start":5,"column_end":98}},{"value":"/ by t.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8514,"byte_end":8523,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8782,"byte_end":8794,"line_start":311,"line_end":311,"column_start":11,"column_end":23},"name":"ScalarEngine","qualname":"::ScalarEngine","value":"ScalarEngine: Sized + 'static + Clone + Send + Sync","parent":null,"children":[{"krate":0,"index":111}],"decl_id":null,"docs":" An \"engine\" is a collection of types (fields, elliptic curve groups, etc.)\n with well-defined relationships. Specific relationships (for example, a\n pairing-friendly curve) can be defined in a subtrait.\n","sig":null,"attributes":[{"value":"/ An \"engine\" is a collection of types (fields, elliptic curve groups, etc.)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8559,"byte_end":8637,"line_start":308,"line_end":308,"column_start":1,"column_end":79}},{"value":"/ with well-defined relationships. Specific relationships (for example, a","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8638,"byte_end":8713,"line_start":309,"line_end":309,"column_start":1,"column_end":76}},{"value":"/ pairing-friendly curve) can be defined in a subtrait.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8714,"byte_end":8771,"line_start":310,"line_end":310,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":111},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8902,"byte_end":8904,"line_start":313,"line_end":313,"column_start":10,"column_end":12},"name":"Fr","qualname":"::ScalarEngine::Fr","value":"type Fr: PrimeField + SqrtField;","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" This is the scalar field of the engine's groups.\n","sig":null,"attributes":[{"value":"/ This is the scalar field of the engine's groups.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8840,"byte_end":8892,"line_start":312,"line_end":312,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":183},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8961,"byte_end":8972,"line_start":317,"line_end":317,"column_start":12,"column_end":23},"name":"BitIterator","qualname":"::BitIterator","value":"BitIterator {  }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9055,"byte_end":9058,"line_start":323,"line_end":323,"column_start":12,"column_end":15},"name":"new","qualname":"<BitIterator<E>>::new","value":"pub fn new(E) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11246,"byte_end":11249,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"sbb","qualname":"::arith_impl::sbb","value":"pub fn sbb(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a - b - borrow, returning the result and modifying\n the borrow value.\n","sig":null,"attributes":[{"value":"/ Calculate a - b - borrow, returning the result and modifying","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11122,"byte_end":11186,"line_start":406,"line_end":406,"column_start":5,"column_end":69}},{"value":"/ the borrow value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11191,"byte_end":11212,"line_start":407,"line_end":407,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11217,"byte_end":11234,"line_start":408,"line_end":408,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11654,"byte_end":11657,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"adc","qualname":"::arith_impl::adc","value":"pub fn adc(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + b + carry, returning the sum and modifying the\n carry value.\n","sig":null,"attributes":[{"value":"/ Calculate a + b + carry, returning the sum and modifying the","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11535,"byte_end":11599,"line_start":419,"line_end":419,"column_start":5,"column_end":69}},{"value":"/ carry value.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11604,"byte_end":11620,"line_start":420,"line_end":420,"column_start":5,"column_end":21}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11625,"byte_end":11642,"line_start":421,"line_end":421,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12059,"byte_end":12073,"line_start":435,"line_end":435,"column_start":12,"column_end":26},"name":"mac_with_carry","qualname":"::arith_impl::mac_with_carry","value":"pub fn mac_with_carry(u64, u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + (b * c) + carry, returning the least significant digit\n and setting carry to the most significant digit.\n","sig":null,"attributes":[{"value":"/ Calculate a + (b * c) + carry, returning the least significant digit","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11896,"byte_end":11968,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ and setting carry to the most significant digit.","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":11973,"byte_end":12025,"line_start":433,"line_end":433,"column_start":5,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12030,"byte_end":12047,"line_start":434,"line_end":434,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12464,"byte_end":12470,"line_start":451,"line_end":451,"column_start":12,"column_end":18},"name":"to_hex","qualname":"::to_hex::to_hex","value":"pub fn to_hex<F: PrimeField>(&F) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":12755,"byte_end":12763,"line_start":460,"line_end":460,"column_start":12,"column_end":20},"name":"from_hex","qualname":"::to_hex::from_hex","value":"pub fn from_hex<F: PrimeField>(&str) -> Result<F, String>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5568,"byte_end":5591,"line_start":210,"line_end":210,"column_start":16,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5779,"byte_end":5802,"line_start":218,"line_end":218,"column_start":23,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9027,"byte_end":9038,"line_start":322,"line_end":322,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9188,"byte_end":9199,"line_start":330,"line_end":330,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9644,"byte_end":9655,"line_start":350,"line_end":350,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":454,"byte_end":459,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":462,"byte_end":464,"line_start":27,"line_end":27,"column_start":13,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2714},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":467,"byte_end":471,"line_start":27,"line_end":27,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":474,"byte_end":479,"line_start":27,"line_end":27,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":482,"byte_end":486,"line_start":27,"line_end":27,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":489,"byte_end":493,"line_start":27,"line_end":27,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":501,"byte_end":506,"line_start":27,"line_end":27,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":514,"byte_end":521,"line_start":27,"line_end":27,"column_start":65,"column_end":72},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":540,"byte_end":544,"line_start":27,"line_end":27,"column_start":91,"column_end":95},"kind":"SuperTrait","from":{"krate":21,"index":869},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":553,"byte_end":557,"line_start":27,"line_end":27,"column_start":104,"column_end":108},"kind":"SuperTrait","from":{"krate":2,"index":9885},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2190,"byte_end":2195,"line_start":87,"line_end":87,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":29},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2667,"byte_end":2672,"line_start":100,"line_end":100,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2679,"byte_end":2683,"line_start":101,"line_end":101,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2690,"byte_end":2695,"line_start":102,"line_end":102,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2702,"byte_end":2704,"line_start":103,"line_end":103,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":2714},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2711,"byte_end":2714,"line_start":104,"line_end":104,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2745},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2721,"byte_end":2725,"line_start":105,"line_end":105,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2732,"byte_end":2736,"line_start":106,"line_end":106,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2743,"byte_end":2750,"line_start":107,"line_end":107,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":3035},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2762,"byte_end":2767,"line_start":108,"line_end":108,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2779,"byte_end":2786,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2813,"byte_end":2817,"line_start":111,"line_end":111,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":21,"index":869},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2824,"byte_end":2829,"line_start":112,"line_end":112,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2954},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2843,"byte_end":2848,"line_start":113,"line_end":113,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2957},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2862,"byte_end":2866,"line_start":114,"line_end":114,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2963},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":2884,"byte_end":2888,"line_start":115,"line_end":115,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":9885},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5568,"byte_end":5591,"line_start":210,"line_end":210,"column_start":16,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":5779,"byte_end":5802,"line_start":218,"line_end":218,"column_start":23,"column_end":46},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":6133,"byte_end":6138,"line_start":229,"line_end":229,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":29},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8796,"byte_end":8801,"line_start":311,"line_end":311,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8814,"byte_end":8819,"line_start":311,"line_end":311,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8822,"byte_end":8826,"line_start":311,"line_end":311,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":8829,"byte_end":8833,"line_start":311,"line_end":311,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9027,"byte_end":9038,"line_start":322,"line_end":322,"column_start":23,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9188,"byte_end":9199,"line_start":330,"line_end":330,"column_start":36,"column_end":47},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":183},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/tanpx/.cargo/registry/src/github.com-1ecc6299db9ec823/ff_ce-0.10.3/src/lib.rs","byte_start":9644,"byte_end":9655,"line_start":350,"line_end":350,"column_start":45,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":183},"to":{"krate":2,"index":7852}}]}